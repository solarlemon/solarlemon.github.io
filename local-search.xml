<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>尚硅谷七小时学完SpringCloud</title>
    <link href="/2025/07/31/00.%E6%88%91%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/07/31/00.%E6%88%91%E7%9A%84%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Nacos"><a href="#1-Nacos" class="headerlink" title="1 Nacos"></a>1 Nacos</h2><h3 id="1-1-注册中心"><a href="#1-1-注册中心" class="headerlink" title="1.1 注册中心"></a>1.1 注册中心</h3><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002194.png" alt="|800|1000"></p><ul><li>在每个微服务中导入 web 依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在公共服务中导入 nacos 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--服务发现 启动注册中心nacos--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>在 order 微服务中新建一个 SpringBoot 启动项<br><code>services/service-order/src/main/java/com/example/order/OrderMainApplication.java </code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.order;  <br>  <br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;  <br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;  <br>  <br><span class="hljs-meta">@SpringBootApplication</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderMainApplication</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        SpringApplication.run(OrderMainApplication.class, args);  <br>    &#125;&#125;<br></code></pre></td></tr></table></figure><ul><li>编写对应配置文件<br><code>services/service-order/src/main/resources/application.properties</code></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">service-order   # 应用/服务名</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8000  </span><br>  <br><span class="hljs-attr">spring.cloud.nacos.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br></code></pre></td></tr></table></figure><ul><li>按照同样的方法启动多个服务。<br>启动后即可在 nacos 中查看到多个服务：<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002195.png" alt="|825|1000"></li></ul><h3 id="1-2-服务发现"><a href="#1-2-服务发现" class="headerlink" title="1.2 服务发现"></a>1.2 服务发现</h3><blockquote><p> 后续底层代码自动实现</p></blockquote><ul><li>开启服务发现功能<br>  在微服务项目中使用注解 <code>@EnableDiscoveryClient</code> 开启服务发现功能。（默认开启）</li><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DiscoveryTest</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    DiscoveryClient  discoveryClient;  <br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDiscovery</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">for</span>(String serviceName : discoveryClient.getServices())&#123;  <br>            System.out.println(serviceName);  <br>            <span class="hljs-comment">//获取ip地址和端口  </span><br>            discoveryClient.getInstances(serviceName).forEach(instance -&gt; &#123;  <br>                System.out.println(instance.getServiceId() + <span class="hljs-string">&quot;:&quot;</span> + instance.getUri());  <br>            &#125;);        <br>        &#125;    <br>    &#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-远程调用"><a href="#1-3-远程调用" class="headerlink" title="1.3 远程调用"></a>1.3 远程调用</h3><h4 id="1-3-1-基本流程"><a href="#1-3-1-基本流程" class="headerlink" title="1.3.1 基本流程"></a>1.3.1 基本流程</h4><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002196.png" alt="|775|1000"></p><h4 id="1-3-2-下单场景"><a href="#1-3-2-下单场景" class="headerlink" title="1.3.2 下单场景"></a>1.3.2 下单场景</h4><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002197.png" alt="|775|1000"></p><ul><li>先使用基本的 SpringBoot 技术搭建出各个 API。<blockquote><p>[!note] 由于微服务把各个 bean 都分到不同的 service 中，所以需要一个 model 将所有 bean 放入一个模块中。所以在 services 的 pom.xml 中引入 model 的依赖。</p></blockquote></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>model<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在 OrderServiceImpl 中的 createOrder 函数中创建商品订单<br>发送请求 <code>http://localhost:8000/create?userId=2&amp;productId=100</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span>  <br>RestTemplate restTemplate;<br><br><span class="hljs-keyword">private</span> Product <span class="hljs-title function_">getProductFromRemote</span><span class="hljs-params">(Long productId)</span> &#123;  <br>    <span class="hljs-comment">// 1.获取商品服务所在的所有机器的IP+port  </span><br>    List&lt;ServiceInstance&gt; instanceList = discoveryClient.getInstances(<span class="hljs-string">&quot;service-product&quot;</span>);  <br>    <span class="hljs-type">ServiceInstance</span> <span class="hljs-variable">serviceInstance</span> <span class="hljs-operator">=</span> instanceList.get(<span class="hljs-number">0</span>);  <br>    <span class="hljs-comment">// url地址  </span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> serviceInstance.getUri().toString() + <span class="hljs-string">&quot;/product/&quot;</span> + productId;  <br>    log.info(<span class="hljs-string">&quot;url:&#123;&#125;&quot;</span>, url);  <span class="hljs-comment">// url:http://192.168.1.100:9000/product/100</span><br>    <span class="hljs-comment">//2. 给远程发送请求，返回的json结果转换为Product对象  </span><br>    <span class="hljs-keyword">return</span> restTemplate.getForObject(url, Product.class);  <br>&#125;<br></code></pre></td></tr></table></figure><p>当商品服务器宕机一个时，其他服务器顶上，但是目前面临一个问题，只能固定向某一个未宕机的商品服务器发送请求，马上由<font color="#ff0000">负载均衡</font>来解决。</p><p>其中 <code>RestTemplate</code>:<br><code>services/service-order/src/main/java/com/example/order/config/OrderServiceConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceConfig</span> &#123;  <br>    <span class="hljs-comment">// 因为是线程安全的，只有一个对象，所以可以定义为单例  </span><br>    <span class="hljs-meta">@Bean</span>  <br>    <span class="hljs-keyword">public</span> RestTemplate  <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();  <br>    &#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-3-负载均衡"><a href="#1-3-3-负载均衡" class="headerlink" title="1.3.3 负载均衡"></a>1.3.3 负载均衡</h4><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002198.png" alt="|1000"><br>修改成负载均衡：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//导入依赖spring-cloud-starter-loadbalancer  </span><br>LoadBalancerClient loadBalancerClient;<br><br><br><span class="hljs-keyword">private</span> Product <span class="hljs-title function_">getProductFromRemoteWithLoadBalance</span><span class="hljs-params">(Long productId)</span> &#123;  <br>    <span class="hljs-comment">// 1.获取商品服务所在的所以机器的IP+port  </span><br>    ServiceInstance choose=loadBalancerClient.choose(<span class="hljs-string">&quot;service-product&quot;</span>);  <br>    <span class="hljs-comment">// url地址  </span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> choose.getUri().toString() + <span class="hljs-string">&quot;/product/&quot;</span> + productId;  <br>    log.info(<span class="hljs-string">&quot;url:&#123;&#125;&quot;</span>, url);  <br>    <span class="hljs-comment">//2. 给远程发送请求，返回的json结果转换为Product对象  </span><br>    <span class="hljs-keyword">return</span> restTemplate.getForObject(url, Product.class);  <br>&#125;<br></code></pre></td></tr></table></figure><p>基于注解的负载均衡：<br>在 OrderServiceConfig 的 RestTemplate 中添加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span>  <br><span class="hljs-meta">@LoadBalanced</span> <span class="hljs-comment">//注解的负载均衡  </span><br><span class="hljs-keyword">public</span> RestTemplate  <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 基于注解的负载均衡  </span><br><span class="hljs-keyword">private</span> Product <span class="hljs-title function_">getProductFromRemoteWithLoadBalanceAnnotation</span><span class="hljs-params">(Long productId)</span> &#123;  <br>    String url=<span class="hljs-string">&quot;http://service-product/product/&quot;</span>+productId;  <br>    <span class="hljs-comment">//2. 给远程发送请求:service-product会被动态替换  </span><br>    <span class="hljs-keyword">return</span> restTemplate.getForObject(url, Product.class);  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-4-面试题"><a href="#1-3-4-面试题" class="headerlink" title="1.3.4 面试题"></a>1.3.4 面试题</h4><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002199.png" alt="|750|1000"><br>调用过：会在<font color="#ff0000">实例缓存</font>会保存实例信息，可以从中拿到微服务地址&#x2F;名字，可以通过；<br>没调用过：必须从注册中心获取微服务访问地址，不能通过。</p><h3 id="1-4-配置中心"><a href="#1-4-配置中心" class="headerlink" title="1.4 配置中心"></a>1.4 配置中心</h3><p>统一管理所以微服务配置，不停机配置。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002200.png" alt="|700|1000"></p><h4 id="1-4-1-基本使用"><a href="#1-4-1-基本使用" class="headerlink" title="1.4.1 基本使用"></a>1.4.1 基本使用</h4><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002201.png" alt="|825|1000"></p><ul><li>各个微服务的父项目中引入依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置中心--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>导入配置<br><code>services/service-order/src/main/resources/application.properties</code></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.config.import</span>=<span class="hljs-string">nacos:service-order.properties</span><br></code></pre></td></tr></table></figure><ul><li>在 nacos 服务页面创建 data-id</li><li>即可获取对应值<br>在 OrderController 中获取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RefreshScope</span> <span class="hljs-comment">//配置中心自动刷新</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;...&#125;<br><br><br><span class="hljs-meta">@Value(&quot;$&#123;order.timeout&#125;&quot;)</span>  <br>String orderTimeout;  <br><span class="hljs-meta">@Value(&quot;$&#123;order.auto-confirm&#125;&quot;)</span>  <br>String orderAutoConfig;<br></code></pre></td></tr></table></figure><ul><li>存在问题，配置多了需要很多@Value，可以写到一个 properties 类<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002202.png" alt="|650|1000"><br><code>services/service-order/src/main/java/com/example/order/properties/OrderProperties.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span>  <br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;order&quot;)</span> <span class="hljs-comment">//无需添加自动刷新注解  </span><br><span class="hljs-meta">@Component</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderProperties</span> &#123;  <br>  <br>    <span class="hljs-comment">//变量名要一一对应，短横线自动转换为驼峰命名  </span><br>    String timeout;  <br>    String autoConfirm;  <br>&#125;<br>...<br><span class="hljs-meta">@Autowired</span>  <br>OrderProperties orderProperties;<br></code></pre></td></tr></table></figure><h4 id="1-4-2-监听配置变化"><a href="#1-4-2-监听配置变化" class="headerlink" title="1.4.2 监听配置变化"></a>1.4.2 监听配置变化</h4><p>在项目启动时监听配置<br><code>services/service-order/src/main/java/com/example/order/OrderMainApplication.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>ApplicationRunner <span class="hljs-title function_">applicationRunner</span><span class="hljs-params">(NacosConfigManager nacosConfigManager)</span>&#123;<br><span class="hljs-keyword">return</span>  args -&gt; &#123;<br><span class="hljs-type">ConfigService</span> <span class="hljs-variable">configService</span> <span class="hljs-operator">=</span> nacosConfigManager.getConfigService();<br>configService.addListener(<span class="hljs-string">&quot;service-order.properties&quot;</span>,<br><span class="hljs-string">&quot;DEFAULT_GROUP&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Listener</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Executor <span class="hljs-title function_">getExecutor</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> Executors.newFixedThreadPool(<span class="hljs-number">4</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveConfigInfo</span><span class="hljs-params">(String configInfo)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;变化的配置信息：&quot;</span>+configInfo);<br>System.out.println(<span class="hljs-string">&quot;邮件通知...&quot;</span>);<br>&#125;<br>&#125;);<br>System.out.println(<span class="hljs-string">&quot;=========&quot;</span>);<br>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-4-3-面试题"><a href="#1-4-3-面试题" class="headerlink" title="1.4.3 面试题"></a>1.4.3 面试题</h4><p>nacos 中的数据集（配置中心）和 application.properties 有相同的配置项，哪个生效?<br>引入了配置中心可以统一管理，所以外部导入的配置生效。</p><blockquote><p>[!important] 后导入优先+外部有限</p></blockquote><h4 id="1-4-4-数据隔离"><a href="#1-4-4-数据隔离" class="headerlink" title="1.4.4 数据隔离"></a>1.4.4 数据隔离</h4><p>需求描述<br>• 项目有多套环境：dev，test，prod<br>• 每个微服务，同一种配置，在每套环境的值都不一样。<br>• 如：database. properties • 如：common. properties • 项目可以通过切换环境，加载本环境的配置<br>难点<br>• 区分多套环境<br>• 区分多种微服务<br>• 区分多种配置<br>• 按需加载配置<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002204.png" alt="|900|1000"><br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002205.png" alt="|775|1000"></p><h4 id="1-4-5-总结"><a href="#1-4-5-总结" class="headerlink" title="1.4.5 总结"></a>1.4.5 总结</h4><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002206.png" alt="|925|1000"></p><h2 id="2-OpenFeign"><a href="#2-OpenFeign" class="headerlink" title="2 OpenFeign"></a>2 OpenFeign</h2><p>通过注解实现<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002207.png" alt="|800|1000"></p><h3 id="2-1-远程调用"><a href="#2-1-远程调用" class="headerlink" title="2.1 远程调用"></a>2.1 远程调用</h3><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002208.png" alt="|775|1000"></p><ul><li>安装依赖</li><li>FeignClient 发送请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;service-product&quot;)</span> <span class="hljs-comment">//feign远程调用客户端  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductFeignClient</span> &#123;  <br>  <br>    <span class="hljs-comment">//mvc注解的两套使用逻辑  </span><br>    <span class="hljs-comment">//1.标注在controller上，表示接收这样的请求  </span><br>    <span class="hljs-comment">//2.标注在FeignClient上，表示接收这样的请求  </span><br>    <span class="hljs-meta">@GetMapping(&quot;/product/&#123;id&#125;&quot;)</span>  <br>    Product <span class="hljs-title function_">getProductById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>; <span class="hljs-comment">//自动根据服务名进行负载均衡  </span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在 controller 启用 feiclient</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients</span> <span class="hljs-comment">//启用feign远程调用  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>在主启动类添加 @EnableFeignClients</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(basePackages = &quot;com.example.order.feign&quot;)</span><br></code></pre></td></tr></table></figure><ul><li>实现<br>在 service 实现类中发起请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span>  <br>ProductFeignClient productFeignClient;<br><br><span class="hljs-comment">// Product product = getProductFromRemoteWithLoadBalanceAnnotation(productId);  </span><br><br><span class="hljs-comment">// 使用feign完成远程调用  </span><br><span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productFeignClient.getProductById(productId);<br></code></pre></td></tr></table></figure><ul><li>远程调用第三方 API</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;weather-client&quot;, url = &quot;http://aliv18.data.moji.com&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WeatherFeignClient</span> &#123;  <br>    <span class="hljs-meta">@PostMapping(&quot;/whapi/json/alicityweather/condition&quot;)</span>  <br>    String <span class="hljs-title function_">getWeather</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(&quot;Authorization&quot;)</span> String authorization,  </span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestParam(&quot;token&quot;)</span> String token,  </span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestParam(&quot;cityId&quot;)</span> String cityId)</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-小技巧-面试题"><a href="#2-2-小技巧-面试题" class="headerlink" title="2.2 小技巧&amp;面试题"></a>2.2 小技巧&amp;面试题</h3><ul><li>如何编写好OpenFeign声明式的远程调用接口<ul><li>业务API：直接复制对方Controller签名即可</li><li>第三方API：根据接口文档确定请求如何发</li></ul></li><li>面试题：客户端负载均衡与服务端负载均衡区别<ul><li><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002209.png" alt="|725|1000"></li></ul></li></ul><h3 id="2-3-日志"><a href="#2-3-日志" class="headerlink" title="2.3 日志"></a>2.3 日志</h3><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002210.png" alt="|750|1000"></p><ul><li>配置文件中添加：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">logging:</span>  <br>  <span class="hljs-attr">level:</span>  <br>    <span class="hljs-attr">com.example.order.feign:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><ul><li>配置类中添加：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span>  <br>Logger.Level  <span class="hljs-title function_">feignLoggerLevel</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">return</span> Logger.Level.FULL;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-超时控制"><a href="#2-4-超时控制" class="headerlink" title="2.4 超时控制"></a>2.4 超时控制</h3><ul><li><p>分析情况<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002211.png" alt="|850|1000"></p></li><li><p>具体流程<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002212.png" alt="|800|1000"></p></li><li><p>添加配置<br>在 <code>services/service-order/src/main/resources/application.yaml</code> 中添加</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <br>  <span class="hljs-attr">profiles:</span>  <br>    <span class="hljs-attr">active:</span> <span class="hljs-string">prod</span> <span class="hljs-comment"># 环境标识  </span><br>    <span class="hljs-attr">include:</span> <span class="hljs-string">feign</span> <span class="hljs-comment"># 引入application-feign配置</span><br></code></pre></td></tr></table></figure><p><code>services/service-order/src/main/resources/application-feign.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <br>  <span class="hljs-attr">cloud:</span>  <br>    <span class="hljs-attr">openfeign:</span>  <br>      <span class="hljs-attr">client:</span>  <br>        <span class="hljs-attr">config:</span>  <br>          <span class="hljs-comment"># 所以服务的默认配置</span><br>          <span class="hljs-attr">default:</span>  <br>            <span class="hljs-attr">logger-level:</span> <span class="hljs-string">full</span>  <br>            <span class="hljs-attr">connect-timeout:</span> <span class="hljs-number">1000</span>  <br>            <span class="hljs-attr">read-timeout:</span> <span class="hljs-number">2000</span>  <br>          <span class="hljs-comment"># 指定服务名的配置  </span><br>          <span class="hljs-attr">service-product:</span>  <br>            <span class="hljs-attr">logger-level:</span> <span class="hljs-string">full</span>  <br>            <span class="hljs-attr">connect-timeout:</span> <span class="hljs-number">3000</span>  <br>            <span class="hljs-attr">read-timeout:</span> <span class="hljs-number">5000</span><br></code></pre></td></tr></table></figure><ul><li>重试机制<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002213.png" alt="|750|1000"></li></ul><p>在配置类中添加设置 <code>services/service-order/src/main/java/com/example/order/config/OrderServiceConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span>  <br>Retryer <span class="hljs-title function_">retryer</span><span class="hljs-params">()</span>&#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Retryer</span>.Default();  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-拦截器"><a href="#2-5-拦截器" class="headerlink" title="2.5 拦截器"></a>2.5 拦截器</h3><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002214.png" alt="|775|1000"></p><ul><li>请求拦截器<br>把数据放到请求头以共享数据：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//自动扫码容器中的拦截器  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XTokenRequestInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RequestInterceptor</span> &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(RequestTemplate requestTemplate)</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;XTokenRequestInterceptor...&quot;</span>);  <br>        <span class="hljs-comment">//设置请求头  </span><br>        requestTemplate.header(<span class="hljs-string">&quot;X-Token&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);  <br>    &#125;&#125;<br></code></pre></td></tr></table></figure><p><code>services/service-product/src/main/java/com/example/product/controller/ProductController.java</code> 中获取到数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/product/&#123;id&#125;&quot;)</span>  <br><span class="hljs-keyword">public</span> Product <span class="hljs-title function_">getProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long productId,  </span><br><span class="hljs-params">                          HttpServletRequest request)</span> &#123;  <br>    System.out.println(<span class="hljs-string">&quot;getProduct: &quot;</span> + productId);  <br>    System.out.println(<span class="hljs-string">&quot;X-Token: &quot;</span> + request.getHeader(<span class="hljs-string">&quot;X-Token&quot;</span>));  <br>    <span class="hljs-keyword">return</span> productService.getProductById(productId);  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-Fallback-兜底返回"><a href="#2-6-Fallback-兜底返回" class="headerlink" title="2.6 Fallback-兜底返回"></a>2.6 Fallback-兜底返回</h3><p>拿到兜底数据…<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002215.png" alt="|800|1000"></p><ul><li>配置 sentinel 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>启用 sentinel<br><code>services/service-order/src/main/resources/application-feign.yaml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span>  <br>  <span class="hljs-attr">sentinel:</span>  <br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li>选择要 fallbak 的 FeignClient</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;service-product&quot;,fallback = ProductFeignClientFallback.class)</span> <span class="hljs-comment">//feign远程调用客户端  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductFeignClient</span> &#123;  <br>  <br>    <span class="hljs-comment">//mvc注解的两套使用逻辑  </span><br>    <span class="hljs-comment">//1.标注在controller上，表示接收这样的请求  </span><br>    <span class="hljs-comment">//2.标注在FeignClient上，表示接收这样的请求  </span><br>    <span class="hljs-meta">@GetMapping(&quot;/product/&#123;id&#125;&quot;)</span>  <br>    Product <span class="hljs-title function_">getProductById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>; <span class="hljs-comment">//自动根据服务名进行负载均衡  </span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>编写对应的 <code>ProductFeignClientFallback</code><br><code>services/service-order/src/main/java/com/example/order/feign/fallback/ProductFeignClientFallback.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductFeignClientFallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProductFeignClient</span> &#123;  <br>  <br>    <span class="hljs-comment">// 调用ProductFeignClient失败时被调用  </span><br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">getProductById</span><span class="hljs-params">(Long id)</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;调用远程服务失败，兜底回调&quot;</span>);  <br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();  <br>        product.setId(<span class="hljs-number">0L</span>);  <br>        product.setPrice(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;0&quot;</span>));  <br>        product.setProductName(<span class="hljs-string">&quot;未知商品&quot;</span>);  <br>        product.setNum(<span class="hljs-number">0</span>);  <br>  <br>        <span class="hljs-keyword">return</span> product;  <br>    &#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="2-7-总结"><a href="#2-7-总结" class="headerlink" title="2.7 总结"></a>2.7 总结</h3><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002216.png" alt="|729|1000"></p><h2 id="3-Sentinel"><a href="#3-Sentinel" class="headerlink" title="3 Sentinel"></a>3 Sentinel</h2><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Spring Cloud Alibaba Sentinel 以流量为切入点，从流量控制、流量路由、熔断降级、系统自适应过载保护、热点流量防护等多个维度保护服务的稳定性。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002217.png" alt="|775|1000"></p><h3 id="3-1-架构原理"><a href="#3-1-架构原理" class="headerlink" title="3.1 架构原理"></a>3.1 架构原理</h3><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002218.png" alt="|775|1000"></p><h3 id="3-2-资源和规则"><a href="#3-2-资源和规则" class="headerlink" title="3.2 资源和规则"></a>3.2 资源和规则</h3><p> 定义资源：<br> • 主流框架自动适配（Web Servlet、Dubbo、Spring Cloud、gRPC、Spring WebFlux、Reactor）；所有 Web 接口均为资源<br> • 编程式：SphU API<br> • 声明式：@SentinelResource<br> 定义规则：<br> • 流量控制（FlowRule）<br> • 熔断降级（DegradeRule）<br> • 系统保护（SystemRule）<br> • 来源访问控制（AuthorityRule）<br> • 热点参数（ParamFlowRule）<br> <img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002219.png" alt="|449|1000"></p><h3 id="3-3-基本使用"><a href="#3-3-基本使用" class="headerlink" title="3.3 基本使用"></a>3.3 基本使用</h3><ul><li>每个微服务配置依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>启动控制台</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar sentinel.jar<br></code></pre></td></tr></table></figure><p>登录 locolhost: 8080, 用户名和密码都是 sentinel。</p><ul><li>配置连接</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">cloud:</span><br><span class="hljs-attr">sentinel:</span>  <br>  <span class="hljs-attr">transport:</span>  <br>    <span class="hljs-attr">dashboard:</span> <span class="hljs-string">localhost:8080</span>  <br>  <span class="hljs-attr">eager:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 启动时加载sentinel</span><br></code></pre></td></tr></table></figure><h3 id="3-4-异常处理"><a href="#3-4-异常处理" class="headerlink" title="3.4 异常处理"></a>3.4 异常处理</h3><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002220.png" alt="|775|1000"></p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002221.png" alt="|1075|1000"></p><h4 id="3-4-1-⾃定义-BlockExceptionHandler"><a href="#3-4-1-⾃定义-BlockExceptionHandler" class="headerlink" title="3.4.1 ⾃定义 BlockExceptionHandler"></a>3.4.1 ⾃定义 BlockExceptionHandler</h4><p>对 controller <code>/create</code> 添加流控规则。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002222.png" alt="|950|1000"><br>自定义一个异常处理 <code>com/example/order/exception/MyBlockException.java</code>，其中 R 也是自定义的返回数据类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//放到容器中即可生效  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBlockException</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BlockExceptionHandler</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,  </span><br><span class="hljs-params">                       String resourceName, BlockException e)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        httpServletResponse.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);  <br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> httpServletResponse.getWriter();  <br>        <span class="hljs-type">R</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> R.error(<span class="hljs-number">500</span>, resourceName + <span class="hljs-string">&quot; 被Sentinel限制了，原因：&quot;</span> + e.getClass());  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(error); <span class="hljs-comment">//写为json数据  </span><br>        writer.write(json);  <br>        writer.flush();  <br>        writer.close();  <br>    &#125;&#125;<br></code></pre></td></tr></table></figure><p>触发异常后返回自定义的返回数据。</p><h4 id="3-4-2-blockHandler"><a href="#3-4-2-blockHandler" class="headerlink" title="3.4.2 blockHandler"></a>3.4.2 blockHandler</h4><p><font color="#ff0000">对 createOrder 添加流控规则</font>。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002223.png" alt="|1000|1000"><br>@SentinelResource标注在非Controller 层。标注在 servicImpl实现层 <code>OrderServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SentinelResource(value = &quot;createOrder&quot;, blockHandler = &quot;createOrderFallback&quot;)</span><span class="hljs-comment">//设置自己处理异常  </span><br><span class="hljs-meta">@Override</span>  <br><span class="hljs-keyword">public</span> Order <span class="hljs-title function_">createOrder</span><span class="hljs-params">(Long userId, Long productId)</span> &#123;  <br>..。<br>&#125;<br><br><span class="hljs-comment">//兜底回调，注意相同的方法名  </span><br><span class="hljs-keyword">public</span> Order <span class="hljs-title function_">createOrderFallback</span><span class="hljs-params">(Long userId, Long productId, BlockException e)</span> &#123;  <br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();  <br>    order.setId(<span class="hljs-number">0L</span>);  <br>    order.setTotalAmount(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0</span>));  <br>    order.setUserId(userId);  <br>    order.setNickName(<span class="hljs-string">&quot;None&quot;</span>);  <br>    order.setAddress(<span class="hljs-string">&quot;&quot;</span>);  <br>    <span class="hljs-keyword">return</span> order;<span class="hljs-comment">//兜底数据  </span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-3-OpenFeign-兜底回调"><a href="#3-4-3-OpenFeign-兜底回调" class="headerlink" title="3.4.3 OpenFeign-兜底回调"></a>3.4.3 OpenFeign-兜底回调</h4><p>对远程调用添加流控规则。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002224.png" alt="|1000|1000"><br>在 2.6 节所述。</p><h3 id="3-5-规则-流量控制"><a href="#3-5-规则-流量控制" class="headerlink" title="3.5 规则 - 流量控制"></a>3.5 规则 - 流量控制</h3><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002225.png" alt="|775|1000"><br>流控设置的面板：<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002226.png" alt="|1000"></p><h4 id="3-5-1-阈值类型"><a href="#3-5-1-阈值类型" class="headerlink" title="3.5.1 阈值类型"></a>3.5.1 阈值类型</h4><p>QPS：统计每秒请求数<br>并发线程数：统计并发线程数</p><h4 id="3-5-2-流控模式"><a href="#3-5-2-流控模式" class="headerlink" title="3.5.2 流控模式"></a>3.5.2 流控模式</h4><ul><li>直接策略<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002227.png" alt="|1000"></li><li>链路策略<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002228.png" alt="|1000"><br>对于普通的创建订单资源 A 不做限制，但是对于秒杀资源 C 做限制。<br>配置设置：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">sentinel:</span>  <br>  <span class="hljs-attr">web-context-unify:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 关闭上下文统一，分离请求链路</span><br></code></pre></td></tr></table></figure><p>添加 controller 请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/secKill&quot;)</span>  <br><span class="hljs-keyword">public</span> Order <span class="hljs-title function_">secKill</span><span class="hljs-params">(<span class="hljs-meta">@PathParam(&quot;userId&quot;)</span> Long userId,  </span><br><span class="hljs-params">                     <span class="hljs-meta">@PathParam(&quot;productId&quot;)</span> Long productId)</span> &#123;  <br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderService.createOrder(userId, productId);  <br>    order.setId(Long.MAX_VALUE);  <br>    <span class="hljs-keyword">return</span> order;  <br>&#125;<br></code></pre></td></tr></table></figure><p>对 createOrder 资源的两条链路：<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002229.png" alt="|1050|1000"><br>新增链路规则：<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002230.png" alt="|1000"><br>仅对于 <code>/secKill</code> 这条链路限制。</p><ul><li>关联策略<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002231.png" alt="|1000"></li></ul><p><font color="#ff0000">读写相关，写入量大时，优先写。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/writeDB&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">writeDB</span><span class="hljs-params">()</span>&#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;writeDB.....&quot;</span>;  <br>&#125;  <br>  <br><span class="hljs-meta">@GetMapping(&quot;/readDB&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">readDB</span><span class="hljs-params">()</span>&#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;readDB.....&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002232.png" alt="|455|1000"></p><h4 id="3-5-3-流控效果"><a href="#3-5-3-流控效果" class="headerlink" title="3.5.3 流控效果"></a>3.5.3 流控效果</h4><ul><li>快速失败<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002233.png" alt="|1000"><br>超过数量的请求直接失败。注意：除了快速失败，其他流控效果的流控模式（链路策略等）会直接失效。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002234.png" alt="|505|1000"></li><li>Warm Up<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002235.png" alt="|1000"><br>让系统逐步增加可接收的请求。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002236.png" alt="|530|1000"></li><li>匀速排队<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002237.png" alt="|1000"><br>最大等待时间 timeout。</li></ul><h3 id="3-6-规则-熔断降级"><a href="#3-6-规则-熔断降级" class="headerlink" title="3.6 规则 - 熔断降级"></a>3.6 规则 - 熔断降级</h3><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002238.png" alt="|900|1000"><br>熔断降级作为保护自身的手段，通常<font color="#ff0000">在客户端（调用段）进行配置</font>。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002239.png" alt="|575|1000"><br>当配置了熔断策略时，不发送请求给 B，直接执行 fallbak。</p><h4 id="3-6-1-工作原理"><a href="#3-6-1-工作原理" class="headerlink" title="3.6.1 工作原理"></a>3.6.1 工作原理</h4><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002240.png" alt="|875|1000"></p><ul><li>慢调用比例<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002241.png" alt="|630|1000"><br>选择以慢调用比例作为阈值，需要设置允许的 慢调用 RT(即最大的响应时间)，请求的响应时间大于该值则统计为慢调用<br>当单位统计时长(5000ms)内请求数目大于设置的最小请求数目，并且慢调用（大于最大 RT）的比例大于阈值，则接下来的熔断时长内请求会自动被熔断<br>熔断时长后, 熔断器会进入探测恢复状态(HALF-OPEN 状态)，若接下来的一个请求响 应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断</li><li>异常比例<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002242.png" alt="|655|1000"><br>当单位统计时长(statIntervalMs)内请求数目大于设置的最 小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断<br>经过熔断时长后熔断器会进入探测恢复状态(HALF-OPEN 状态)<br>若接下来的一个请求成功完成(没有错误)则结束熔断 否则会再次被熔断<br>异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%</li><li>异常数<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002243.png" alt="|655|1000"><br>当单位统计时长内的异常数目超过阈值之后会自动进行熔断<br>经过熔断时长后熔断器会进入探测恢复状态(HALF-OPEN 状态)，若接下来的一个请求成功完成(没有错误)则结束熔断，否则会再次被熔断。</li></ul><h3 id="3-7-规则-热点参数"><a href="#3-7-规则-热点参数" class="headerlink" title="3.7 规则 - 热点参数"></a>3.7 规则 - 热点参数</h3><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002244.png" alt="|825|1000"><br>需求 1：每个用户秒杀 QPs 不得超过 1（秒杀下单 userld 级别）<br>需求 2：6 号用户是 vvip，不限制 QPS（例外情况）<br>需求 3：666 号是下架商品，不允许访问</p><ul><li>先设置好秒杀限流的兜底数据：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/secKill&quot;)</span>  <br><span class="hljs-meta">@SentinelResource(value = &quot;secKill-order&quot;, blockHandler = &quot;secKillFallback&quot;)</span><span class="hljs-comment">//设置秒杀订单限流  </span><br><span class="hljs-keyword">public</span> Order <span class="hljs-title function_">secKill</span><span class="hljs-params">(<span class="hljs-meta">@PathParam(&quot;userId&quot;)</span> Long userId,  </span><br><span class="hljs-params">                     <span class="hljs-meta">@PathParam(&quot;productId&quot;)</span> Long productId)</span> &#123;  <br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderService.createOrder(userId, productId);  <br>    order.setId(Long.MAX_VALUE);  <br>    <span class="hljs-keyword">return</span> order;  <br>&#125;  <br>  <br><span class="hljs-keyword">public</span> Order <span class="hljs-title function_">secKillFallback</span><span class="hljs-params">(Long userId, Long productId, BlockException e)</span> &#123;  <br>    System.out.println(<span class="hljs-string">&quot;秒杀失败，请稍后再试&quot;</span>);  <br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();  <br>    order.setId(productId);  <br>    order.setUserId(userId);  <br>    order.setAddress(<span class="hljs-string">&quot;Error&quot;</span>);  <br>    <span class="hljs-keyword">return</span> order;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>blockHandler &#x3D; “secKillFallback” 只能处理 BlockException，使用 blockHandler-&gt;fallback,BlockException-&gt;Throwable, 可以处理业务异常，例如 public Order secKill(){}出现 1&#x2F;0 的异常。</p></blockquote><ul><li>设置热点规则<br>限制 userId 每秒只能有一个请求<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002245.png" alt="|503|1000"></li><li>设置特殊 userId 允许每秒多个请求<br>边界页面使用高级设置<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002246.png" alt="|530|1000"> </li><li>特殊商品禁止访问<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002247.png" alt="|530|1000"><br>添加热点规则后再使用高级选项编辑。</li></ul><h2 id="4-Gateway-⽹关"><a href="#4-Gateway-⽹关" class="headerlink" title="4 Gateway - ⽹关"></a>4 Gateway - ⽹关</h2><p><a href="https://spring.io/projects/spring-cloud-gateway">https://spring.io/projects/spring-cloud-gateway</a></p><h3 id="4-1-基础⼊⻔"><a href="#4-1-基础⼊⻔" class="headerlink" title="4.1 基础⼊⻔"></a>4.1 基础⼊⻔</h3><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002248.png" alt="|750|1000"></p><h4 id="4-1-1-基本使用"><a href="#4-1-1-基本使用" class="headerlink" title="4.1.1 基本使用"></a>4.1.1 基本使用</h4><pre><code class="hljs">/api/order/**路由给订单/api/product/**路由给商品测试负载均衡</code></pre><ul><li>新建 gateway module</li><li>引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>修改配置<br><code>gateway/src/main/resources/application.yaml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <br>  <span class="hljs-attr">application:</span>  <br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span>  <br>  <span class="hljs-attr">cloud:</span>  <br>    <span class="hljs-attr">nacos:</span>  <br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span>  <br>  <br><span class="hljs-attr">server:</span>  <br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableDiscoveryClient</span>  <br><span class="hljs-meta">@SpringBootApplication</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GateWayApplication</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        SpringApplication.run(GateWayApplication.class, args);  <br>    &#125;&#125;<br></code></pre></td></tr></table></figure><blockquote><p> 为 service-order、service-prduct 添加 &#x2F;api 基础路径</p></blockquote><ul><li>修改 <code>application. yml</code> 配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <br>  <span class="hljs-attr">profiles:</span>  <br>    <span class="hljs-attr">include:</span> <span class="hljs-string">route</span><br></code></pre></td></tr></table></figure><ul><li>创建 <code>application-route.yaml</code> 配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <br>  <span class="hljs-attr">cloud:</span>  <br>    <span class="hljs-attr">gateway:</span>  <br>      <span class="hljs-attr">routes:</span>  <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">order</span>  <br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://service-order</span>  <br>          <span class="hljs-attr">predicates:</span>  <br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/order/**</span>  <span class="hljs-comment"># 这样开头的路由都会被转发到service-order  </span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">product</span>  <br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://service-product</span>  <br>          <span class="hljs-attr">predicates:</span>  <br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/product/**</span><br></code></pre></td></tr></table></figure><h4 id="4-1-2-原理"><a href="#4-1-2-原理" class="headerlink" title="4.1.2 原理"></a>4.1.2 原理</h4><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002249.png" alt="|775|1000"></p><h3 id="4-2-Predicate-断⾔"><a href="#4-2-Predicate-断⾔" class="headerlink" title="4.2 Predicate - 断⾔"></a>4.2 Predicate - 断⾔</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br><span class="hljs-attr">cloud:</span> <br><span class="hljs-attr">gateway:</span> <br><span class="hljs-attr">routes:</span> <br><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">after_route</span> <br><span class="hljs-attr">uri:</span> <span class="hljs-string">https://example.org</span> <br><span class="hljs-attr">predicates:</span> <br><span class="hljs-bullet">-</span> <span class="hljs-string">After=2017-01-20T17:42:47.789-07:00[America/Denver]</span><br></code></pre></td></tr></table></figure><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002250.png" alt="|650|1000"><br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002251.png" alt="|650|1000"></p><h4 id="4-2-1-自定义路由断言工厂"><a href="#4-2-1-自定义路由断言工厂" class="headerlink" title="4.2.1 自定义路由断言工厂"></a>4.2.1 自定义路由断言工厂</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml">      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">bing-route</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">https://cn.bing.com/</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Path</span><br>              <span class="hljs-attr">args:</span><br>                <span class="hljs-attr">patterns:</span> <span class="hljs-string">/search</span><br><span class="hljs-comment">#            - Vip=user,leifengyang</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Vip</span><br>              <span class="hljs-attr">args:</span><br>                <span class="hljs-attr">param:</span> <span class="hljs-string">user</span> <span class="hljs-comment"># 下面一一对应</span><br>                <span class="hljs-attr">value:</span> <span class="hljs-string">leifengyang</span><br></code></pre></td></tr></table></figure><p>工厂类 <code>VIP</code> 必须与配置类中对应，两个参数会在 <code>Config</code> 类中顺序对应，随后写断言逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VIPRoutePredicateFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRoutePredicateFactory</span>&lt;VIPRoutePredicateFactory.Config&gt; &#123;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">VIPRoutePredicateFactory</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-built_in">super</span>(Config.class);  <br>    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="hljs-title function_">apply</span><span class="hljs-params">(Config config)</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GatewayPredicate</span>() &#123;  <br>            <span class="hljs-meta">@Override</span>  <br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(ServerWebExchange serverWebExchange)</span> &#123;  <br>                <span class="hljs-comment">// localhost/search?q=haha&amp;user=leifengyang  </span><br>                <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> serverWebExchange.getRequest();  <br>  <br>                <span class="hljs-type">String</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> request.getQueryParams().getFirst(config.param);  <br>  <br>                <span class="hljs-keyword">return</span> StringUtils.hasText(first) &amp;&amp; first.equals(config.value);  <br>            &#125;        &#125;;    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">shortcutFieldOrder</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> Arrays.asList(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 可以配置的参数  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-meta">@Validated</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span> &#123;  <br>  <br>        <span class="hljs-meta">@NotEmpty</span>  <br>        <span class="hljs-keyword">private</span> String param;  <br>  <br>  <br>        <span class="hljs-meta">@NotEmpty</span>  <br>        <span class="hljs-keyword">private</span> String value;  <br>  <br>        <span class="hljs-keyword">public</span> <span class="hljs-meta">@NotEmpty</span> String <span class="hljs-title function_">getParam</span><span class="hljs-params">()</span> &#123;  <br>            <span class="hljs-keyword">return</span> param;  <br>        &#125;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParam</span><span class="hljs-params">(<span class="hljs-meta">@NotEmpty</span> String param)</span> &#123;  <br>            <span class="hljs-built_in">this</span>.param = param;  <br>        &#125;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-meta">@NotEmpty</span> String <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;  <br>            <span class="hljs-keyword">return</span> value;  <br>        &#125;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(<span class="hljs-meta">@NotEmpty</span> String value)</span> &#123;  <br>            <span class="hljs-built_in">this</span>.value = value;  <br>        &#125;    &#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-Filter-过滤器"><a href="#4-3-Filter-过滤器" class="headerlink" title="4.3 Filter - 过滤器"></a>4.3 Filter - 过滤器</h3><h4 id="4-3-1-路径重写"><a href="#4-3-1-路径重写" class="headerlink" title="4.3.1 路径重写"></a>4.3.1 路径重写</h4><p>每个微服务都添加基准路径太麻烦。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002252.png" alt="|761|1000"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">order</span>  <br>  <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://service-order</span>  <br>  <span class="hljs-attr">predicates:</span>  <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/order/**</span>  <span class="hljs-comment"># 这样开头的路由都会被转发到service-order  </span><br>  <span class="hljs-attr">filters:</span>  <br>    <span class="hljs-comment"># 请求路径 /api/order/xxx 被正确重写为 /xxx，  </span><br>    <span class="hljs-comment"># 并将后续路径通过命名组 $&#123;segment&#125; 提取并传递给目标服务  </span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">RewritePath=/api/order/(?&lt;segment&gt;.*),</span> <span class="hljs-string">/$&#123;segment&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-3-2-默认-filter"><a href="#4-3-2-默认-filter" class="headerlink" title="4.3.2 默认 filter"></a>4.3.2 默认 filter</h4><p>所有路由添加默认返回头。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">default-filters:</span>  <br>  <span class="hljs-bullet">-</span> <span class="hljs-string">AddResponseHeader=X-Response-Abc,</span> <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><h4 id="4-3-3-全局-filter"><a href="#4-3-3-全局-filter" class="headerlink" title="4.3.3 全局 filter"></a>4.3.3 全局 filter</h4><p>设置每个请求记录相应时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>  <br><span class="hljs-meta">@Slf4j</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RtGlobalFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;  <br>        <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> exchange.getRequest();  <br>        <span class="hljs-type">ServerHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> exchange.getResponse();  <br>  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> request.getURI().toString();  <br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();  <br>        log.info(<span class="hljs-string">&quot;请求【&#123;&#125;】开始：时间：&#123;&#125;&quot;</span>,uri,start);  <br>        <span class="hljs-comment">//========================以上是前置逻辑=========================  </span><br>        Mono&lt;Void&gt; filter = chain.filter(exchange)  <br>                .doFinally((result)-&gt;&#123;  <br>                    <span class="hljs-comment">//=======================以下是后置逻辑=========================  </span><br>                    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();  <br>                    log.info(<span class="hljs-string">&quot;请求【&#123;&#125;】结束：时间：&#123;&#125;，耗时：&#123;&#125;ms&quot;</span>,uri,end,end-start);  <br>                &#125;); <span class="hljs-comment">//放行   10s        return filter;  </span><br>    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>    &#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-4-自定义过滤器工程"><a href="#4-3-4-自定义过滤器工程" class="headerlink" title="4.3.4 自定义过滤器工程"></a>4.3.4 自定义过滤器工程</h4><p>每个请求发出后添加一个自定义的响应头（一次性令牌），但是只希望在订单下使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OnceTokenGatewayFilterFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractNameValueGatewayFilterFactory</span> &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> GatewayFilter <span class="hljs-title function_">apply</span><span class="hljs-params">(NameValueConfig config)</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GatewayFilter</span>() &#123;  <br>            <span class="hljs-meta">@Override</span>  <br>            <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;  <br>                <span class="hljs-comment">//每次响应之前，添加一个一次性令牌，支持 uuid，jwt等各种格式  </span><br>                <span class="hljs-keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(()-&gt;&#123;  <br>                    <span class="hljs-type">ServerHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> exchange.getResponse();  <br>                    <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> response.getHeaders();  <br>                    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> config.getValue();  <br>                    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;uuid&quot;</span>.equalsIgnoreCase(value))&#123;  <br>                        value = UUID.randomUUID().toString();  <br>                    &#125;  <br>                    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;jwt&quot;</span>.equalsIgnoreCase(value))&#123;  <br>                        value = <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ&quot;</span>;  <br>                    &#125;  <br>                    headers.add(config.getName(),value);  <br>                &#125;));            &#125;        &#125;;    &#125;&#125;<br></code></pre></td></tr></table></figure><p>和自定义路由断言工厂类似, 在配置文件添加对应配置，注意头【OnceToken】要相同。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">filters:</span>  <br>   <span class="hljs-string">...</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">OnceToken=X-Response-Token,uuid</span><br></code></pre></td></tr></table></figure><h3 id="4-4-CORS-跨域处理"><a href="#4-4-CORS-跨域处理" class="headerlink" title="4.4 CORS - 跨域处理"></a>4.4 CORS - 跨域处理</h3><p>全局跨域</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <br>  <span class="hljs-attr">cloud:</span>  <br>    <span class="hljs-attr">gateway:</span>  <br>      <span class="hljs-attr">globalcors:</span>  <br>        <span class="hljs-attr">cors-configurations:</span>  <br>          <span class="hljs-string">&#x27;[/**]&#x27;</span><span class="hljs-string">:</span>  <br>            <span class="hljs-attr">allowed-origin-patterns:</span>  <br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*&quot;</span>  <br>            <span class="hljs-attr">allowed-headers:</span>  <br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*&quot;</span>  <br>            <span class="hljs-attr">allowed-methods:</span>  <br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="4-5-面试题"><a href="#4-5-面试题" class="headerlink" title="4.5 面试题"></a>4.5 面试题</h3><p>微服务之间的调用经过网关吗？<br>网关主要用于处理外部请求，作为系统的统一入口，微服务之间使用服务注册与发现机制进行内部通信，所以<font color="#ff0000">微服务之间的调用通常不经过网关</font>。但是通过配置 FeignClient 或 RestTemplate 指定走网关地址（如 <a href="http://gateway-host/api/product/xxx">http://gateway-host/api/product/xxx</a> ），即先跳转到网关，再转发到对应微服务（不建议）。</p><h2 id="5-Seata-分布式事务"><a href="#5-Seata-分布式事务" class="headerlink" title="5 Seata-分布式事务"></a>5 Seata-分布式事务</h2><p><a href="https://seata.apache.org/zh-cn/">https://seata.apache.org/zh-cn/</a><br><a href="http://localhost:7091/">http://localhost:7091</a> 打开客户端，用户名和密码都是 seata。<br>每个微服务配置 <code>file.conf</code>     <code>services/seata-account/src/main/resources/file.conf</code></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">service &#123;  <br>  #transaction service group mapping  <br>  vgroupMapping.default_tx_group = &quot;default&quot;  <br>  #only support when registry.type=file, please don&#x27;t set multiple addresses  <br>  default.grouplist = &quot;127.0.0.1:8091&quot;  <br>  #degrade, current not support  <br>  enableDegrade = false  <br>  #disable seata  <br>  disableGlobalTransaction = false  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-1-环境准备"><a href="#5-1-环境准备" class="headerlink" title="5.1 环境准备"></a>5.1 环境准备</h3><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002253.png" alt="|575|1000"><br>导入课程中的四个包…</p><ul><li>导入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>下载并启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">seata-server.bat<br></code></pre></td></tr></table></figure><h4 id="5-1-1-业务流程"><a href="#5-1-1-业务流程" class="headerlink" title="5.1.1 业务流程"></a>5.1.1 业务流程</h4><p>进行采购需要远程调用扣减库存和创建订单，创建订单又需要远程调用减余额。</p><ul><li>进行采购</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BusinessServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BusinessService</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    StorageFeignClient storageFeignClient;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    OrderFeignClient orderFeignClient;  <br>    <span class="hljs-meta">@GlobalTransactional</span>  <br>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">purchase</span><span class="hljs-params">(String userId, String commodityCode, <span class="hljs-type">int</span> orderCount)</span> &#123;  <br>        <span class="hljs-comment">//1. 扣减库存  </span><br>        storageFeignClient.deduct(commodityCode, orderCount);  <br>  <br>        <span class="hljs-comment">//2. 创建订单  </span><br>        orderFeignClient.create(userId, commodityCode, orderCount);  <br>    &#125;&#125;<br></code></pre></td></tr></table></figure><ul><li>创建订单对应的 <code>OrderFeignClient</code>，发起远程调用-创建订单</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;seata-order&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderFeignClient</span> &#123;  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 创建订单  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> commodityCode  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderCount  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/create&quot;)</span>  <br>    String <span class="hljs-title function_">create</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;userId&quot;)</span> String userId,  </span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(&quot;commodityCode&quot;)</span> String commodityCode,  </span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(&quot;count&quot;)</span> <span class="hljs-type">int</span> orderCount)</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建订单</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/create&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">create</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;userId&quot;)</span> String userId,  </span><br><span class="hljs-params">                     <span class="hljs-meta">@RequestParam(&quot;commodityCode&quot;)</span> String commodityCode,  </span><br><span class="hljs-params">                     <span class="hljs-meta">@RequestParam(&quot;count&quot;)</span> <span class="hljs-type">int</span> orderCount)</span>  <br>&#123;  <br>    <span class="hljs-type">OrderTbl</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> orderService.create(userId, commodityCode, orderCount);  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;order create success = 订单id：【&quot;</span>+tbl.getId()+<span class="hljs-string">&quot;】&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>在创建订单的实现类中又会发起扣减余额的远程调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    OrderTblMapper orderTblMapper;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    AccountFeignClient accountFeignClient;  <br>    <span class="hljs-meta">@Transactional</span>  <br>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> OrderTbl <span class="hljs-title function_">create</span><span class="hljs-params">(String userId, String commodityCode, <span class="hljs-type">int</span> orderCount)</span> &#123;  <br>        <span class="hljs-comment">//1、计算订单价格  </span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">orderMoney</span> <span class="hljs-operator">=</span> calculate(commodityCode, orderCount);  <br>        <span class="hljs-comment">//2、扣减账户余额  </span><br>        accountFeignClient.debit(userId, orderMoney);  <br>        <span class="hljs-comment">//3、保存订单  </span><br>        <span class="hljs-type">OrderTbl</span> <span class="hljs-variable">orderTbl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderTbl</span>();  <br>        orderTbl.setUserId(userId);  <br>        orderTbl.setCommodityCode(commodityCode);  <br>        orderTbl.setCount(orderCount);  <br>        orderTbl.setMoney(orderMoney);  <br>        <span class="hljs-comment">//3、保存订单  </span><br>        orderTblMapper.insert(orderTbl);  <br>        <span class="hljs-keyword">return</span> orderTbl;  <br>    &#125;  <br>    <span class="hljs-comment">// 计算价格  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(String commodityCode, <span class="hljs-type">int</span> orderCount)</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>*orderCount;  <br>    &#125;&#125;<br></code></pre></td></tr></table></figure><p>扣减余额的 Feign 客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;seata-account&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountFeignClient</span> &#123;  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 扣减账户余额  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/debit&quot;)</span>  <br>    String <span class="hljs-title function_">debit</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;userId&quot;)</span> String userId,  </span><br><span class="hljs-params">                        <span class="hljs-meta">@RequestParam(&quot;money&quot;)</span> <span class="hljs-type">int</span> money)</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-分布式服务"><a href="#5-2-分布式服务" class="headerlink" title="5.2 分布式服务"></a>5.2 分布式服务</h3><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002254.png" alt="|1125|1000"><br>只需要在主要的事务入口配置<font color="#ff0000">全局事务</font> <code>@GlobalTransactional</code>，就能控制全局事务，实现事务回滚。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BusinessServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BusinessService</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    StorageFeignClient storageFeignClient;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    OrderFeignClient orderFeignClient;  <br>  <br>    <span class="hljs-meta">@GlobalTransactional</span>  <br>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">purchase</span><span class="hljs-params">(String userId, String commodityCode, <span class="hljs-type">int</span> orderCount)</span> &#123;  <br>        <span class="hljs-comment">//1. 扣减库存  </span><br>        storageFeignClient.deduct(commodityCode, orderCount);  <br>  <br>        <span class="hljs-comment">//2. 创建订单  </span><br>        orderFeignClient.create(userId, commodityCode, orderCount);  <br>    &#125;&#125;<br></code></pre></td></tr></table></figure><p>全局事务流程-<font color="#ff0000">二阶提交协议流程</font><br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002255.png" alt="|1000"><br>注意以下几个要点<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507012002256.png" alt="|875|1000"></p><h3 id="5-3-Seata的四种事务模式"><a href="#5-3-Seata的四种事务模式" class="headerlink" title="5.3 Seata的四种事务模式"></a>5.3 Seata的四种事务模式</h3><p>AT、TCC、SAGA、XA</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h2><p>自己绘制总结图…</p><p align="right">2025.06.22 结束</p>]]></content>
    
    
    <categories>
      
      <category>Java开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哈希表</title>
    <link href="/2025/07/30/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <url>/2025/07/30/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Contents"><a href="#1-Contents" class="headerlink" title="1 Contents"></a>1 Contents</h2><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">设计哈希集合</td><td align="center">设计、数组、哈希表、链表、哈希函数</td></tr><tr><td align="center">设计哈希映射</td><td align="center">设计、数组、哈希表、链表、哈希函数</td></tr><tr><td align="center">存在重复元素</td><td align="center">数组、哈希表、排序</td></tr><tr><td align="center">存在重复元素ii</td><td align="center">数组、哈希表、滑动窗口</td></tr><tr><td align="center">存在重复元素iii</td><td align="center">数组、桶排序、有序集合、排序、滑动窗口</td></tr><tr><td align="center">检查是否所有字符出现次数相同</td><td align="center">哈希表、字符串、计数</td></tr><tr><td align="center">只出现一次的数字</td><td align="center">位运算、数组</td></tr><tr><td align="center">赎金信</td><td align="center">哈希表、字符串、计数</td></tr><tr><td align="center">两个数组的交集</td><td align="center">数组、哈希表、双指针、二分查找、排序</td></tr><tr><td align="center">两个数组的交集ii</td><td align="center">数组、哈希表、双指针、二分查找、排序</td></tr><tr><td align="center">有效的数独</td><td align="center">数组、哈希表、矩阵</td></tr><tr><td align="center">两数之和</td><td align="center">数组、哈希表</td></tr><tr><td align="center">三数之和</td><td align="center">数组、双指针、排序</td></tr><tr><td align="center">四数之和</td><td align="center">数组、双指针、排序</td></tr><tr><td align="center">四数相加ii</td><td align="center">数组、哈希表</td></tr><tr><td align="center">最长连续序列</td><td align="center">并查集、数组、哈希表、排序</td></tr><tr><td align="center">快乐数</td><td align="center">哈希表、数学、双指针</td></tr><tr><td align="center">有效的字母异位词</td><td align="center">哈希表、字符串、排序</td></tr><tr><td align="center">同构字符串</td><td align="center">哈希表、字符串</td></tr><tr><td align="center">数组中重复的数据</td><td align="center">数组、哈希表</td></tr><tr><td align="center">扑克牌中的顺子</td><td align="center">数组、排序</td></tr><tr><td align="center">丢失的数字</td><td align="center">位运算、数组、哈希表、数学、二分查找、排序</td></tr><tr><td align="center">字符串中的第一个唯一字符</td><td align="center">队列、哈希表、字符串、计数</td></tr><tr><td align="center">字母异位词分组</td><td align="center">数组、哈希表、字符串、排序</td></tr><tr><td align="center">两个列表的最小索引总和</td><td align="center">数组、哈希表、字符串</td></tr><tr><td align="center">回旋镖的数量</td><td align="center">数组、哈希表、数学</td></tr></tbody></table><h3 id="1-1-1Q-705-设计哈希集合"><a href="#1-1-1Q-705-设计哈希集合" class="headerlink" title="1.1 1Q.705 设计哈希集合"></a>1.1 1Q.705 设计哈希集合</h3><p>不使用任何内建的哈希表库设计一个哈希集合（HashSet）。</p><p>实现 <code>MyHashSet</code> 类：</p><ul><li><code>void add(key)</code> 向哈希集合中插入值 <code>key</code> 。</li><li><code>bool contains(key)</code> 返回哈希集合中是否存在这个值 <code>key</code> 。</li><li><code>void remove(key)</code> 将给定值 <code>key</code> 从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHashSet</span> &#123;<br>    <span class="hljs-comment">// 采用拉链法,数组的每个元素是链表</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> <span class="hljs-number">769</span>;<br>    <span class="hljs-keyword">private</span> LinkedList[] data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyHashSet</span><span class="hljs-params">()</span> &#123;<br>        data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>[base];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;<br>            data[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> hash(key);<br>        <span class="hljs-comment">// 构造迭代器</span><br>        Iterator&lt;Integer&gt; iterator = data[h].iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> iterator.next();<br>            <span class="hljs-keyword">if</span> (element == key) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        data[h].offerLast(key);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> hash(key);<br>        <span class="hljs-comment">// 构造迭代器</span><br>        Iterator&lt;Integer&gt; iterator = data[h].iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> iterator.next();<br>            <span class="hljs-keyword">if</span> (element == key) &#123;<br>                data[h].remove(element);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> hash(key);<br>        <span class="hljs-comment">// 构造迭代器</span><br>        Iterator&lt;Integer&gt; iterator = data[h].iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> iterator.next();<br>            <span class="hljs-keyword">if</span> (element == key) &#123;<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-keyword">return</span> key % base;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-2Q756-设计哈希映射"><a href="#1-2-2Q756-设计哈希映射" class="headerlink" title="1.2 2Q756.设计哈希映射"></a>1.2 2Q756.设计哈希映射</h3><p>不使用任何内建的哈希表库设计一个哈希映射（HashMap）。</p><p>实现 <code>MyHashMap</code> 类：</p><ul><li><code>MyHashMap()</code> 用空映射初始化对象</li><li><code>void put(int key, int value)</code> 向 HashMap 插入一个键值对 <code>(key, value)</code> 。如果 <code>key</code> 已经存在于映射中，则更新其对应的值 <code>value</code> 。</li><li><code>int get(int key)</code> 返回特定的 <code>key</code> 所映射的 <code>value</code> ；如果映射中不包含 <code>key</code> 的映射，返回 <code>-1</code> 。</li><li><code>void remove(key)</code> 如果映射中存在 <code>key</code> 的映射，则移除 <code>key</code> 和它所对应的 <code>value</code> 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHashMap</span> &#123;<br>    <span class="hljs-comment">// 这里相当于把前一题的Integer类型换成键值对</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span> &#123;<br>        <span class="hljs-comment">// 这里定义一个映射</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> key;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.value = value;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> key;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> key;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>            <span class="hljs-built_in">this</span>.value = value;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> <span class="hljs-number">769</span>;<br>    <span class="hljs-keyword">private</span> LinkedList[] data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyHashMap</span><span class="hljs-params">()</span> &#123;<br>        data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>[base];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; base; i++) &#123;<br>            data[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Pair&gt;();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> key % base;<br>        Iterator&lt;Pair&gt; iterator = data[h].iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">Pair</span> <span class="hljs-variable">pair</span> <span class="hljs-operator">=</span> iterator.next();<br>            <span class="hljs-keyword">if</span> (pair.getKey() == key) &#123;<br>                pair.setValue(value);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        data[h].offerLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>(key, value));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> key % base;<br>        Iterator&lt;Pair&gt; iterator = data[h].iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">Pair</span> <span class="hljs-variable">pair</span> <span class="hljs-operator">=</span> iterator.next();<br>            <span class="hljs-keyword">if</span> (pair.getKey() == key) &#123;<br>                <span class="hljs-keyword">return</span> pair.value;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> key % base;<br>        Iterator&lt;Pair&gt; iterator = data[h].iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">Pair</span> <span class="hljs-variable">pair</span> <span class="hljs-operator">=</span> iterator.next();<br>            <span class="hljs-keyword">if</span> (pair.getKey() == key) &#123;<br>                data[h].remove(pair);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-keyword">return</span> key % base;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-3Q217-存在重复元素"><a href="#1-3-3Q217-存在重复元素" class="headerlink" title="1.3 3Q217.存在重复元素"></a>1.3 3Q217.存在重复元素</h3><p>给你一个整数数组 <code>nums</code> 。如果任一值在数组中出现 <strong>至少两次</strong> ，返回 <code>true</code> ；如果数组中每个元素互不相同，返回 <code>false</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>    <span class="hljs-keyword">for</span> (Integer num : nums) &#123;<br>        <span class="hljs-keyword">if</span> (!set.add(num)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">// 没有添加成功说明有重复元素</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-4Q219-存在重复元素"><a href="#1-4-4Q219-存在重复元素" class="headerlink" title="1.4 4Q219.存在重复元素"></a>1.4 4Q219.存在重复元素</h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，判断数组中是否存在两个 <strong>不同的索引</strong> <code>i</code> 和 <code>j</code> ，满足 <code>nums[i] == nums[j]</code> 且 <code>abs(i - j) &lt;= k</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsNearbyDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;<br>    HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (map.containsKey(nums[i]) &amp;&amp; i - map.get(nums[i]) &lt;= k) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        map.put(nums[i], i);<span class="hljs-comment">// &#123;nums[i],i&#125;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-5Q220-存在重复元素iii（困难题，不会写）"><a href="#1-5-5Q220-存在重复元素iii（困难题，不会写）" class="headerlink" title="1.5 5Q220.存在重复元素iii（困难题，不会写）"></a>1.5 5Q220.存在重复元素iii（困难题，不会写）</h3><p>给你一个整数数组 <code>nums</code> 和两个整数 <code>indexDiff</code> 和 <code>valueDiff</code> 。</p><p>找出满足下述条件的下标对 <code>(i, j)</code>：</p><ul><li><code>i != j</code>,</li><li><code>abs(i - j) &lt;= indexDiff</code></li><li><code>abs(nums[i] - nums[j]) &lt;= valueDiff</code></li></ul><p>如果存在，返回 <code>true</code> *；*否则，返回 <code>false</code> 。</p><blockquote><p>输入：nums &#x3D; [1,2,3,1], indexDiff &#x3D; 3, valueDiff &#x3D; 0<br>输出：true<br>解释：可以找出 (i, j) &#x3D; (0, 3) 。<br>满足下述 3 个条件：<br>i !&#x3D; j –&gt; 0 !&#x3D; 3<br>abs(i - j) &lt;&#x3D; indexDiff –&gt; abs(0 - 3) &lt;&#x3D; 3<br>abs(nums[i] - nums[j]) &lt;&#x3D; valueDiff –&gt; abs(1 - 1) &lt;&#x3D; 0</p></blockquote><h3 id="1-6-6Q1941-检查是否所有字符出现次数相同"><a href="#1-6-6Q1941-检查是否所有字符出现次数相同" class="headerlink" title="1.6 6Q1941.检查是否所有字符出现次数相同"></a>1.6 6Q1941.检查是否所有字符出现次数相同</h3><p>给你一个字符串 <code>s</code> ，如果 <code>s</code> 是一个 <strong>好</strong> 字符串，请你返回 <code>true</code> ，否则请返回 <code>false</code> 。</p><p>如果 <code>s</code> 中出现过的 <strong>所有</strong> 字符的出现次数 <strong>相同</strong> ，那么我们称字符串 <code>s</code> 是 <strong>好</strong> 字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">areOccurrencesEqual</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-type">char</span>[] ch = s.toCharArray();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span>[] num = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : ch) &#123;<br>        <span class="hljs-comment">// 记录出现次数</span><br>        num[c - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (num[i] != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">0</span>) &#123;<br>                cnt = num[i];<span class="hljs-comment">// 记录下次数非0时的次数</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt != num[i]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-7-7Q136-只出现一次的数字"><a href="#1-7-7Q136-只出现一次的数字" class="headerlink" title="1.7 7Q136.只出现一次的数字"></a>1.7 7Q136.只出现一次的数字</h3><p>给你一个 <strong>非空</strong> 整数数组 <code>nums</code> ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p>你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。</p><blockquote><p>这里只允许使用常量空间</p><p>异或解法：异或运算满足交换律，a^ b^ a&#x3D;a^ a^ b&#x3D;b,因此ans相当于nums[0]^ nums[1]^ nums[2]^ nums[3]^nums[4]….. 然后再根据交换律把相等的合并到一块儿进行异或（结果为0），然后再与只出现过一次的元素进行异或，这样最后的结果就是，只出现过一次的元素（0^任意值&#x3D;任意值）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">singleNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> (nums.length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            ans = ans ^ nums[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-8-8Q-383赎金信"><a href="#1-8-8Q-383赎金信" class="headerlink" title="1.8 8Q.383赎金信"></a>1.8 8Q.383赎金信</h3><p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。</p><p>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。</p><p><code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canConstruct</span><span class="hljs-params">(String ransomNote, String magazine)</span> &#123;<br>    <span class="hljs-keyword">if</span> (ransomNote.length() &gt; magazine.length()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-type">int</span>[] cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<span class="hljs-comment">// 记录相应字符出现次数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> ch : magazine.toCharArray()) &#123;  <br>        cnt[ch - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : ransomNote.toCharArray()) &#123;<br>        cnt[c - <span class="hljs-string">&#x27;a&#x27;</span>]--;<br>        <span class="hljs-keyword">if</span> (cnt[c - <span class="hljs-string">&#x27;a&#x27;</span>] &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-9-9Q349-两个数组的交集"><a href="#1-9-9Q349-两个数组的交集" class="headerlink" title="1.9 9Q349.两个数组的交集"></a>1.9 9Q349.两个数组的交集</h3><p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>它们的交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>    Set&lt;Integer&gt; set1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    Set&lt;Integer&gt; set2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    ArrayList&lt;Integer&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Integer integer : nums1) &#123;<br>        set1.add(integer);<span class="hljs-comment">// nums1去重</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (Integer integer : nums2) &#123;<br>        set2.add(integer);<span class="hljs-comment">// nums2去重</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (Integer integer : set2) &#123;<br>        <span class="hljs-keyword">if</span> (!set1.add(integer)) &#123;<br>            arrayList.add(integer);<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arrayList.size()];<br>    <span class="hljs-keyword">for</span> (Integer integer : arrayList) &#123;<br>        ans[index++] = integer;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-10-10Q350-两个数组的交集ii"><a href="#1-10-10Q350-两个数组的交集ii" class="headerlink" title="1.10 10Q350.两个数组的交集ii"></a>1.10 10Q350.两个数组的交集ii</h3><p>给你两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。</p><blockquote><p>输入：nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]<br>输出：[2,2]</p><p>输入：nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]<br>输出：[4,9]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] intersect(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>    <span class="hljs-keyword">if</span> (nums1.length &lt; nums2.length) &#123;<br>        <span class="hljs-keyword">return</span> intersect(nums2, nums1);<span class="hljs-comment">// nums作为长度较大数组</span><br>    &#125;<br>    Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums1) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> map.getOrDefault(num, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>;<br>        map.put(num, cnt);<span class="hljs-comment">// map存放&#123;num，出现次数&#125;</span><br>    &#125;<br>    <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums1.length];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums2) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> map.getOrDefault(num, <span class="hljs-number">0</span>);<span class="hljs-comment">// 获取出现次数</span><br>        <span class="hljs-keyword">if</span> (cnt &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 说明在nums出现过</span><br>            ans[idx++] = num;<br>            cnt--;<span class="hljs-comment">// 出现次数减一</span><br>            <span class="hljs-keyword">if</span> (cnt &gt; <span class="hljs-number">0</span>) &#123;<br>                map.put(num, cnt);<span class="hljs-comment">// 次数还大于0则更新次数</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 小于0则移除</span><br>                map.remove(num);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Arrays.copyOfRange(ans, <span class="hljs-number">0</span>, idx);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-11-11Q36-有效数独"><a href="#1-11-11Q36-有效数独" class="headerlink" title="1.11 11Q36.有效数独"></a>1.11 11Q36.有效数独</h3><p>请你判断一个 <code>9 x 9</code> 的数独是否有效。只需要 <strong>根据以下规则</strong> ，验证已经填入的数字是否有效即可。</p><ol><li>数字 <code>1-9</code> 在每一行只能出现一次。</li><li>数字 <code>1-9</code> 在每一列只能出现一次。</li><li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。（请参考示例图）</li></ol><blockquote><p>输入：board &#x3D;<br>[[“5”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”]<br>,[“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”]<br>,[“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”]<br>,[“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”]<br>,[“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”]<br>,[“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”]<br>,[“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”]<br>,[“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”]<br>,[“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]<br>输出：true</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValidSudoku</span><span class="hljs-params">(<span class="hljs-type">char</span>[][] board)</span> &#123;<br>    <span class="hljs-comment">// 以下数组最后以维代表这个数字</span><br>    <span class="hljs-type">int</span>[][] row = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">9</span>][<span class="hljs-number">9</span>];<span class="hljs-comment">// 行内数字出现次数</span><br>    <span class="hljs-type">int</span>[][] column = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">9</span>][<span class="hljs-number">9</span>];<span class="hljs-comment">// 列内数字出现次数</span><br>    <span class="hljs-type">int</span>[][][] subbox = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>][<span class="hljs-number">9</span>];<span class="hljs-comment">// 九宫格内数字出现次数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; j++) &#123;<br>            <span class="hljs-comment">// 遍历数组</span><br>            <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> board[i][j];<br>            <span class="hljs-keyword">if</span> (ch != <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>                <span class="hljs-comment">// 存在数字</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> ch - <span class="hljs-string">&#x27;1&#x27;</span>;<br>                row[i][idx]++;<span class="hljs-comment">// 行内数字次数+1</span><br>                column[j][idx]++;<span class="hljs-comment">// 列内数字次数+1</span><br>                subbox[i / <span class="hljs-number">3</span>][j / <span class="hljs-number">3</span>][idx]++;<span class="hljs-comment">// 九宫格内数字次数+1</span><br>                <span class="hljs-keyword">if</span> (row[i][idx] &gt; <span class="hljs-number">1</span> || column[j][idx] &gt; <span class="hljs-number">1</span> || subbox[i / <span class="hljs-number">3</span>][j / <span class="hljs-number">3</span>][idx] &gt; <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-12-12Q1-两数相加"><a href="#1-12-12Q1-两数相加" class="headerlink" title="1.12 12Q1.两数相加"></a>1.12 12Q1.两数相加</h3><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>  *<span class="hljs-comment">// 使用Map，记录下已经遍历的值和下标--常用的方式*</span><br>  Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Integer&gt;();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>     <span class="hljs-keyword">if</span> (map.containsKey(target - nums[i])) &#123;*<span class="hljs-comment">// 如果集合中包含有符合的数*</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123; map.get(target - nums[i]), i &#125;;*<span class="hljs-comment">// 返回符合的数的下标和该数的下标,不必担心下标顺序的问题*</span><br>     &#125;<br>     map.put(nums[i], i);*<span class="hljs-comment">// 如果没找到对应的数，则将该数及下标存起来。*</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-13-13Q15-三数之和"><a href="#1-13-13Q15-三数之和" class="headerlink" title="1.13 13Q15.三数之和"></a>1.13 13Q15.三数之和</h3><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p><p>你返回所有和为 <code>0</code> 且不重复的三元组。</p><p>**注意：**答案中不可以包含重复的三元组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-comment">// 双指针算法，排序之和分别指向两端</span><br>    List&lt;List&lt;Integer&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">if</span> (nums == <span class="hljs-literal">null</span> || nums.length &lt; <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    Arrays.sort(nums);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">break</span>;<span class="hljs-comment">// 从小往大遍历，小的数大于0，这说明没有答案了</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">continue</span>;<span class="hljs-comment">// 去重，相同的数不需要比较</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>, r = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-comment">// l&lt;r则继续遍历</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> nums[i] + nums[l] + nums[r];<br>            <span class="hljs-keyword">if</span> (sum == <span class="hljs-number">0</span>) &#123;<br>                ans.add(Arrays.asList(nums[i], nums[l], nums[r]));<span class="hljs-comment">// 符合条件加入到结果链表</span><br>                <span class="hljs-comment">// 在将左指针和右指针移动的时候，先对左右指针的值，进行判断</span><br>                <span class="hljs-comment">// 这里还需要去重</span><br>                <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; nums[l] == nums[l + <span class="hljs-number">1</span>]) &#123;<br>                    l++;<br>                &#125;<br>                <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; nums[r] == nums[r - <span class="hljs-number">1</span>]) &#123;<br>                    r--;<br>                &#125;<br>                <span class="hljs-comment">// 移动指针</span><br>                l++;<br>                r--;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &lt; <span class="hljs-number">0</span>) &#123;<br>                l++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &gt; <span class="hljs-number">0</span>) &#123;<br>                r--;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-14-14Q18-四数之和"><a href="#1-14-14Q18-四数之和" class="headerlink" title="1.14 14Q18.四数之和"></a>1.14 14Q18.四数之和</h3><h3 id="1-15-15Q454-四数之和ii"><a href="#1-15-15Q454-四数之和ii" class="headerlink" title="1.15 15Q454.四数之和ii"></a>1.15 15Q454.四数之和ii</h3><h3 id="1-16-16Q128-最长连续序列"><a href="#1-16-16Q128-最长连续序列" class="headerlink" title="1.16 16Q128.最长连续序列"></a>1.16 16Q128.最长连续序列</h3><p>给定一个未排序的整数数组 <code>nums</code> ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p><p>请你设计并实现时间复杂度为 <code>O(n)</code> 的算法解决此问题。</p><p><strong>使用集合和排序的方法解决</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用集合的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestConsecutive</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-keyword">if</span> (nums == <span class="hljs-literal">null</span> || nums.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Integer integer : nums) &#123;<br>        set.add(integer);<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (Integer num : set) &#123;<br>        <span class="hljs-keyword">if</span> (!set.contains(num - <span class="hljs-number">1</span>)) &#123;<br>            <span class="hljs-comment">// 不包含更小的连续的数,不是的话需要继续遍历</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">curNum</span> <span class="hljs-operator">=</span> num;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">curLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (set.contains(curNum + <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-comment">// 包含连续的数</span><br>                curNum++;<br>                curLen++;<br>            &#125;<br>            maxLen = Math.max(maxLen, curLen);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxLen;<br>&#125;<br><span class="hljs-comment">//这里使用直接排序的方法解决</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestConsecutive</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-keyword">if</span> (nums == <span class="hljs-literal">null</span> || nums.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Arrays.sort(nums);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">curLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, maxLen = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] - nums[i - <span class="hljs-number">1</span>] == <span class="hljs-number">1</span>) &#123;<br>                curLen++;<br>                maxLen = Math.max(maxLen, curLen);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i] == nums[i - <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-comment">// 当时数字相等时显然是可以跳过的</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 不连续</span><br>                curLen = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxLen;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-17-17Q202-快乐数"><a href="#1-17-17Q202-快乐数" class="headerlink" title="1.17 17Q202.快乐数"></a>1.17 17Q202.快乐数</h3><p>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。</p><p><strong>「快乐数」</strong> 定义为：</p><ul><li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li><li>然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。</li><li>如果这个过程 <strong>结果为</strong> 1，那么这个数就是快乐数。</li></ul><p>如果 <code>n</code> 是 <em>快乐数</em> 就返回 <code>true</code> ；不是，则返回 <code>false</code> 。</p><p>[题解点这里](<a href="https://leetcode.cn/problems/happy-number/solutions/224894/kuai-le-shu-by-leetcode-solution/">202. 快乐数 - 力扣（LeetCode）</a>)</p><p>题解使用三种方法：<strong>用哈希集合检测循环（本次使用）</strong>、<strong>快慢指针法</strong>、<strong>数学</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNextNum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-comment">// 返回这个数的每个位置上的数字的平方和</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> n % <span class="hljs-number">10</span>;<span class="hljs-comment">// 取数</span><br>        n = n / <span class="hljs-number">10</span>;<br>        sum += num * num;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHappy</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    <span class="hljs-keyword">while</span> (n != <span class="hljs-number">1</span> &amp;&amp; !set.contains(n)) &#123;<br>        <span class="hljs-comment">// 如果进入循环则说明不是快乐数</span><br>        set.add(n);<br>        n = getNextNum(n);<br>    &#125;<br>    <span class="hljs-keyword">return</span> n == <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-18-18Q242-有效的字母异位词"><a href="#1-18-18Q242-有效的字母异位词" class="headerlink" title="1.18 18Q242.有效的字母异位词"></a>1.18 18Q242.有效的字母异位词</h3><p>给定两个字符串 <code>*s*</code> 和 <code>*t*</code> ，编写一个函数来判断 <code>*t*</code> 是否是 <code>*s*</code> 的字母异位词。</p><p>**注意：**若 <code>*s*</code> 和 <code>*t*</code> 中每个字符出现的次数都相同，则称 <code>*s*</code> 和 <code>*t*</code> 互为字母异位词。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//官方解 runtime beats 42.38 %，memory usage beats 89.09 %</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAnagram</span><span class="hljs-params">(String s, String t)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s.length() != t.length()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-type">int</span>[] cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        cnt[s.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        cnt[t.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>]--;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : cnt) &#123;<br>        <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//我的解 runtime beats 100 %，memory usage beats 28.96 %</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAnagram</span><span class="hljs-params">(String s, String t)</span> &#123;<br>    <span class="hljs-type">int</span>[] cntS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br>    <span class="hljs-type">int</span>[] cntT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br>    <span class="hljs-type">char</span>[] ch = s.toCharArray();<br>    <span class="hljs-type">char</span>[] chT = t.toCharArray();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : ch) &#123;<br>        cntS[c - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : chT) &#123;<br>        cntT[c - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (cntS[i] != cntT[i]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-19-19Q205-同构字符串"><a href="#1-19-19Q205-同构字符串" class="headerlink" title="1.19 19Q205.同构字符串"></a>1.19 19Q205.同构字符串</h3><p>给定两个字符串 <code>s</code> 和 <code>t</code> ，判断它们是否是同构的。</p><p>如果 <code>s</code> 中的字符可以按某种映射关系替换得到 <code>t</code> ，那么这两个字符串是同构的。</p><p>每个出现的字符都应当映射到另一个字符，同时不改变字符的顺序。不同字符不能映射到同一个字符上，相同字符只能映射到同一个字符上，字符可以映射到自己本身。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isIsomorphic</span><span class="hljs-params">(String s, String t)</span> &#123;<br>    <span class="hljs-comment">// 维护两个集合，一个是s映射到t，一个是t映射到s</span><br>    Map&lt;Character, Character&gt; s2t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    Map&lt;Character, Character&gt; t2s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> s.charAt(i), y = t.charAt(i);<br>        <span class="hljs-keyword">if</span> ((s2t.containsKey(x) &amp;&amp; s2t.get(x) != y) || t2s.containsKey(y) &amp;&amp; t2s.get(y) != x) &#123;<br>            <span class="hljs-comment">// s的字符在集合中但对应的不是t中的字符，返回false（相反也是一样的）</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        s2t.put(x, y);<br>        t2s.put(y, x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-20-20Q442-数组中重复的数据"><a href="#1-20-20Q442-数组中重复的数据" class="headerlink" title="1.20 20Q442.数组中重复的数据"></a>1.20 20Q442.数组中重复的数据</h3><p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> ，其中 <code>nums</code> 的所有整数都在范围 <code>[1, n]</code> 内，且每个整数出现 <strong>一次</strong> 或 <strong>两次</strong> 。请你找出所有出现 <strong>两次</strong> 的整数，并以数组形式返回。</p><p>你必须设计并实现一个时间复杂度为 <code>O(n)</code> 且仅使用常量额外空间的算法解决此问题。</p><blockquote><p>显然这里使用一个集合是很容易解决的，但是题目要求仅使用常量额外空间。注意到其中 <code>nums</code> 的所有整数都在范围 <code>[1, n]</code> 内，且每个整数出现 <strong>一次</strong> 或 <strong>两次</strong>，那么可以尝试将数组中的数i放到数组下标i-1的位置。</p><ul><li>如果 i 恰好出现了一次，那么将 i 放在数组中下标为 i−1 的位置即可；</li><li>如果 i 出现了两次，那么我们希望其中的一个 i 放在数组下标中为 i−1 的位置，另一个 i 放置在任意「不冲突」的位置 j。也就是说，数 j+1 没有在数组中出现过。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">findDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">while</span> (nums[i] != nums[nums[i] - <span class="hljs-number">1</span>]) &#123;<br>            swap(nums, i, nums[i] - <span class="hljs-number">1</span>);<span class="hljs-comment">// 不在对应位置则交换</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] - <span class="hljs-number">1</span> != i) &#123;<br>            list.add(nums[i]);<span class="hljs-comment">// 此时不在对应位置则说明是重复的数字</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> nums[i];<br>    nums[i] = nums[j];<br>    nums[j] = temp;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-21-21剑指-Offer-61-扑克牌中的顺子"><a href="#1-21-21剑指-Offer-61-扑克牌中的顺子" class="headerlink" title="1.21 21剑指 Offer 61.扑克牌中的顺子"></a>1.21 21剑指 Offer 61.扑克牌中的顺子</h3><p>从<strong>若干副扑克牌</strong>中随机抽 <code>5</code> 张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。</p><blockquote><p>最大牌 - 最小牌 &lt; 5 则可构成顺子</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isStraight</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">14</span>, max = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (Integer num : nums) &#123;<br>        <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        max = Math.max(num, max);<br>        min = Math.min(num, min);<br>        <span class="hljs-keyword">if</span> (set.contains(num)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">// 若有重复，提前返回 false</span><br>        &#125;<br>        set.add(num);<br>    &#125;<br>    <span class="hljs-keyword">return</span> max - min &lt; <span class="hljs-number">5</span>;<span class="hljs-comment">// 最大牌 - 最小牌 &lt; 5 则可构成顺子</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-22-22Q268-丢失的数字"><a href="#1-22-22Q268-丢失的数字" class="headerlink" title="1.22 22Q268.丢失的数字"></a>1.22 22Q268.丢失的数字</h3><p>给定一个包含 <code>[0, n]</code> 中 <code>n</code> 个数的数组 <code>nums</code> ，找出 <code>[0, n]</code> 这个范围内没有出现在数组中的那个数。</p><p><strong>此题有许多方法</strong></p><p>[题解点这里](<a href="https://leetcode.cn/problems/missing-number/solutions/1085105/diu-shi-de-shu-zi-by-leetcode-solution-naow/">268. 丢失的数字 - 力扣（LeetCode）</a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">missingNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    Arrays.sort(nums);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (i != nums[i]) &#123;<br>            <span class="hljs-comment">// 不在对应位置上</span><br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums.length;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-23-23剑指-Offer-03-数组中重复的数字"><a href="#1-23-23剑指-Offer-03-数组中重复的数字" class="headerlink" title="1.23 23剑指 Offer 03. 数组中重复的数字"></a>1.23 23剑指 Offer 03. 数组中重复的数字</h3><p>找出数组中重复的数字。<br>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Integer num : nums) &#123;<br>        <span class="hljs-keyword">if</span> (!set.add(num)) &#123;<br>            <span class="hljs-keyword">return</span> num;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-24-24Q451-根据字符出现频率排序"><a href="#1-24-24Q451-根据字符出现频率排序" class="headerlink" title="1.24 24Q451.根据字符出现频率排序"></a>1.24 24Q451.根据字符出现频率排序</h3><p>给定一个字符串 <code>s</code> ，根据字符出现的 <strong>频率</strong> 对其进行 <strong>降序排序</strong> 。一个字符出现的 <strong>频率</strong> 是它出现在字符串中的次数。</p><p>返回 <em>已排序的字符串</em> 。如果有多个答案，返回其中任何一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">frequencySort</span><span class="hljs-params">(String s)</span> &#123;<br>    Map&lt;Character, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> s.length();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(i);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> map.getOrDefault(c, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>;<br>        map.put(c, cnt);<span class="hljs-comment">// 更新频次</span><br>    &#125;<br>    List&lt;Character&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Character&gt;(map.keySet());<br>    Collections.sort(list, (a, b) -&gt; map.get(b) - map.get(a));<span class="hljs-comment">// 根据字符频次排序</span><br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    <span class="hljs-keyword">for</span> (Character c : list) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> map.get(c);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cnt; i++) &#123;<br>            sb.append(c);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>重要</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Character&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Character&gt;(map.keySet()); <br>Collections.sort(list, (a, b) -&gt; map.get(b) - map.get(a));<span class="hljs-comment">// 根据字符频次排序</span><br></code></pre></td></tr></table></figure><h3 id="1-25-Q387-字符串中的第一个唯一字符"><a href="#1-25-Q387-字符串中的第一个唯一字符" class="headerlink" title="1.25 Q387.字符串中的第一个唯一字符"></a>1.25 Q387.字符串中的第一个唯一字符</h3><p>给定一个字符串 <code>s</code> ，找到 <em>它的第一个不重复的字符，并返回它的索引</em> 。如果不存在，则返回 <code>-1</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">firstUniqChar</span><span class="hljs-params">(String s)</span> &#123;<br>    Map&lt;Character, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> s.charAt(i);<br>        map.put(ch, map.getOrDefault(ch, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<span class="hljs-comment">// map记录次数</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (map.get(s.charAt(i)) == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//----------------------------------------------上面用hash表慢</span><br><span class="hljs-comment">//这里使用数组记录快很多</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">firstUniqChar</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        arr[s.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[s.charAt(i)-<span class="hljs-string">&#x27;a&#x27;</span>] == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-26-Q49-字母异位词分组"><a href="#1-26-Q49-字母异位词分组" class="headerlink" title="1.26 Q49.字母异位词分组"></a>1.26 Q49.字母异位词分组</h3><p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p><p><strong>字母异位词</strong> 是由重新排列源单词的所有字母得到的一个新单词。</p><blockquote><p>输入: strs &#x3D; [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”]<br>输出: [[“bat”],[“nat”,”tan”],[“ate”,”eat”,”tea”]]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">groupAnagrams</span><span class="hljs-params">(String[] strs)</span> &#123;<br>    <span class="hljs-comment">// 使用哈希表存储，key=字符从小到大排序之后的串，value=字母异位词</span><br>    Map&lt;String, List&lt;String&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (String str : strs) &#123;<br>        <span class="hljs-type">char</span>[] arr = str.toCharArray();<br>        Arrays.sort(arr);<span class="hljs-comment">// 排序之和看是否是字母异位词</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(arr);<br>        List&lt;String&gt; list = map.getOrDefault(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<span class="hljs-comment">// 能找到则返回key对应的value，否则返回空</span><br>        list.add(str);<span class="hljs-comment">// 将字符串本身加入list</span><br>        map.put(key, list);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;(map.values());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-27-27Q599-两个列表的最小索引总和"><a href="#1-27-27Q599-两个列表的最小索引总和" class="headerlink" title="1.27 27Q599.两个列表的最小索引总和"></a>1.27 27Q599.两个列表的最小索引总和</h3><p>假设 Andy 和 Doris 想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。</p><p>你需要帮助他们用<strong>最少的索引和</strong>找出他们<strong>共同喜爱的餐厅</strong>。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设答案总是存在。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String[] findRestaurant(String[] list1, String[] list2) &#123;<br>    Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list1.length; i++) &#123;<br>        map.put(list1[i], i);<span class="hljs-comment">// 记录下餐厅对应索引</span><br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">indexSum</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>    List&lt;String&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list2.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (i &gt; indexSum) &#123;<br>            <span class="hljs-keyword">break</span>;<span class="hljs-comment">// 当前索引已经大于最小索引，可以直接跳出循环</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (map.containsKey(list2[i])) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> map.get(list2[i]);<br>            <span class="hljs-keyword">if</span> (i + j &lt; indexSum) &#123;<br>                <span class="hljs-comment">// 当前小索引和小于最小索引和时</span><br>                ans.clear();<br>                ans.add(list2[i]);<br>                indexSum = i + j;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i + j == indexSum) &#123;<br>                <span class="hljs-comment">// 当前小索引和等于最小索引和时</span><br>                ans.add(list2[i]);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> ans.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[ans.size()]);<span class="hljs-comment">// 需要返回整个list</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-28-28Q447-回旋镖的数量"><a href="#1-28-28Q447-回旋镖的数量" class="headerlink" title="1.28 28Q447.回旋镖的数量"></a>1.28 28Q447.回旋镖的数量</h3><p>给定平面上 <code>n</code> 对 <strong>互不相同</strong> 的点 <code>points</code> ，其中 <code>points[i] = [xi, yi]</code> 。<strong>回旋镖</strong> 是由点 <code>(i, j, k)</code> 表示的元组 ，其中 <code>i</code> 和 <code>j</code> 之间的距离和 <code>i</code> 和 <code>k</code> 之间的欧式距离相等（<strong>需要考虑元组的顺序</strong>）。</p><p>返回平面上所有回旋镖的数量。</p><blockquote><p>输入：points &#x3D; [[0,0],[1,0],[2,0]]<br>输出：2<br>解释：两个回旋镖为 [[1,0],[0,0],[2,0]] 和 [[1,0],[2,0],[0,0]]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numberOfBoomerangs</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] points)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; points.length; i++) &#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<span class="hljs-comment">// key=距离，value=数量</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; points.length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (i == j) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-comment">// 计算每个点与其他点之间的距离</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> points[i][<span class="hljs-number">0</span>] - points[j][<span class="hljs-number">0</span>], y = points[i][<span class="hljs-number">1</span>] - points[j][<span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> x * x + y * y;<br>            <span class="hljs-comment">// map分别存放第i个点与其他点距离相等的数量</span><br>            map.put(dis, map.getOrDefault(dis, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 计算完之后统计距离相同的元组数量</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> dist : map.keySet()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> map.get(dist);<br>            ans += cnt * (cnt - <span class="hljs-number">1</span>);<span class="hljs-comment">// 因为需要考虑到顺序不同也是一个元组的问题</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树</title>
    <link href="/2025/07/30/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2025/07/30/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Contents"><a href="#1-Contents" class="headerlink" title="1 Contents"></a>1 Contents</h2><p><strong>二叉树的遍历题目</strong></p><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">二叉树的前序遍历</td><td align="center">栈、树、深度优先搜索、二叉树</td></tr><tr><td align="center">二叉树的中序遍历</td><td align="center">栈、树、深度优先搜索、二叉树</td></tr><tr><td align="center">二叉树的后序遍历</td><td align="center">栈、树、深度优先搜索、二叉树</td></tr><tr><td align="center">二叉树的层序遍历</td><td align="center">栈、树、深度优先搜索、二叉树</td></tr><tr><td align="center">二叉树的锯齿形层序遍历</td><td align="center">树、广度优先搜索、二叉树</td></tr><tr><td align="center">二叉树的最大深度</td><td align="center">树、深度优先搜索、广度优先搜索、二叉树</td></tr><tr><td align="center">二叉树的最小深度</td><td align="center">树、深度优先搜索、广度优先搜索、二叉树</td></tr><tr><td align="center">对称二叉树</td><td align="center">树、深度优先搜索、广度优先搜索、二叉树</td></tr><tr><td align="center">路径总和</td><td align="center">树、深度优先搜索、广度优先搜索、二叉树</td></tr><tr><td align="center">路径总和 II</td><td align="center">树、深度优先搜索、回溯、二叉树</td></tr><tr><td align="center">二叉树的最近公共祖先</td><td align="center">树、深度优先搜索、二叉树</td></tr><tr><td align="center">相同的树</td><td align="center">树、深度优先搜索、二叉树</td></tr><tr><td align="center">平衡二叉树</td><td align="center">树、深度优先搜索、二叉树</td></tr><tr><td align="center">翻转二叉树</td><td align="center">树、深度优先搜索、二叉树</td></tr><tr><td align="center">二叉搜索树的最小绝对差</td><td align="center">树、深度优先搜索、二叉树</td></tr><tr><td align="center">两数之和 IV - 输入二叉搜索树</td><td align="center">树、深度优先搜索、二叉树</td></tr><tr><td align="center">二叉树中第二小的节点</td><td align="center">树、深度优先搜索、二叉树</td></tr><tr><td align="center">二叉搜索树中的搜索</td><td align="center">树、深度优先搜索、二叉树</td></tr><tr><td align="center">二叉搜索树节点最小距离</td><td align="center">树、深度优先搜索、二叉树</td></tr><tr><td align="center">递增顺序搜索树</td><td align="center">树、深度优先搜索、二叉搜索树、二叉树</td></tr><tr><td align="center">二叉搜索树的最近公共祖先</td><td align="center">树、深度优先搜索、二叉搜索树、二叉树</td></tr><tr><td align="center">将有序数组转换为二叉搜索树</td><td align="center">树、二叉搜索树、数组、分治、二叉树</td></tr></tbody></table><p><strong>线段树题目</strong></p><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="1-1-1二叉树的遍历-先序遍历、中序遍历、后序遍历、层序遍历"><a href="#1-1-1二叉树的遍历-先序遍历、中序遍历、后序遍历、层序遍历" class="headerlink" title="1.1 1二叉树的遍历-先序遍历、中序遍历、后序遍历、层序遍历"></a>1.1 1二叉树的遍历-先序遍历、中序遍历、后序遍历、层序遍历</h3><p>可以用迭代的方式实现递归函数，两种方式是等价的，区别在于递归的时候隐式地维护了一个栈，而我们在迭代的时候需要显式地将这个栈模拟出来</p><blockquote><p>前序遍历-递归与迭代</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; res)</span> &#123;<br>    <span class="hljs-comment">//根左右</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    res.add(root.val);<br>    preOrder(root.left, res);<br>    preOrder(root.right, res);<br>&#125;<br>---------------------------------------------------------------------<br><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">// 使用栈模拟递归</span><br>    List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) &#123;<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        stack.add(root);<span class="hljs-comment">// 根节点压入栈中</span><br>        <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> stack.pop();<br>            <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span>) &#123;<br>                list.add(node.val);<br>                <span class="hljs-comment">// 这里需要先把右子树先压入栈中（因为需要先弹出左子树）</span><br>                stack.push(node.right);<br>                stack.push(node.left);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>中序遍历-递归与迭代</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inOrder</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; res)</span> &#123;<br>    <span class="hljs-comment">//左根右</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    inOrder(root.left, res);<br>    res.add(root.val);<br>    inOrder(root.right, res);<br>&#125;<br>---------------------------------------------------------------------<br><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">// 使用栈模拟递归</span><br>    List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) &#123;<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;TreeNode&gt;();<br>        <span class="hljs-keyword">while</span> (!stack.isEmpty() || root != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">// 同时需要找到最左边的节点</span><br>            <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">// 一直找最左边的节点并把节点压入栈中</span><br>                stack.push(root);<br>                root = root.left;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 找到最左边的节点</span><br>                root = stack.pop();<span class="hljs-comment">// 弹出最左的节点</span><br>                list.add(root.val);<br>                root = root.right;<span class="hljs-comment">// 最左的节点可能有右子节点，也可能没有</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>后序遍历-递归与迭代</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrder</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; res)</span> &#123;<br>    <span class="hljs-comment">//左右根</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    postOrder(root.left, res);<br>    postOrder(root.right, res);<br>    res.add(root.val);<br>&#125;<br>---------------------------------------------------------------------<br><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">// 左右根</span><br>    List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">// 记录是否被打印</span><br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) &#123;<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;TreeNode&gt;();<br>        <span class="hljs-keyword">while</span> (!stack.isEmpty() || root != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">// 同时需要找到最左边的节点</span><br>            <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">// 一直找最左边的节点并把节点压入栈中</span><br>                stack.push(root);<br>                root = root.left;<br>            &#125;<br>            root = stack.pop();<span class="hljs-comment">// 弹栈</span><br>            <span class="hljs-keyword">if</span> (root.right == <span class="hljs-literal">null</span> || root.right == prev) &#123;<span class="hljs-comment">// 右子节点为空或已经加入list</span><br>                list.add(root.val);<br>                prev = root;<span class="hljs-comment">// 记录右子节点已经加入list</span><br>                root = <span class="hljs-literal">null</span>;<span class="hljs-comment">// 赋值为null，防止进入下次循环</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 有右子节点或右子节点未加入list，则将该节点入栈并指向该右子节点</span><br>                stack.push(root);<br>                root = root.right;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>层序遍历-递归与迭代</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-comment">// 可以发现，满二叉树节点的下标都是固定的（根节点的序号为i，则左子树序号为2*i，右子树为2*i+1）</span><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();<br>        &#125;<br>        ArrayList&lt;List&lt;Integer&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();<br>        <span class="hljs-keyword">return</span> dfs(root, <span class="hljs-number">1</span>, list);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> i, ArrayList&lt;List&lt;Integer&gt;&gt; list)</span> &#123;<br>        <span class="hljs-keyword">if</span> (list.size() &lt; i) &#123;<br>            <span class="hljs-comment">// 当list大小不能放下新list时，需要使用add扩容</span><br>            list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;());<br>        &#125;<br>        list.get(i - <span class="hljs-number">1</span>).add(root.val);<span class="hljs-comment">// 放入当前节点的值</span><br>        <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) &#123;<br>            dfs(root.left, i + <span class="hljs-number">1</span>, list);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) &#123;<br>            dfs(root.right, i + <span class="hljs-number">1</span>, list);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br>---------------------------------------------------------------------<br><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();<br>    &#125;<br>    <span class="hljs-comment">// 使用迭代实现层序遍历需要使用队列</span><br>    ArrayList&lt;List&lt;Integer&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();<br>    Queue&lt;TreeNode&gt; q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    q.add(root);<br>    <span class="hljs-keyword">while</span> (!q.isEmpty()) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> q.size();<span class="hljs-comment">// 获取当前层的节点数（当前队列长度=前层的节点数）</span><br>        ArrayList&lt;Integer&gt; temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<span class="hljs-comment">// 这里也是一样的必须使用size变量</span><br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> q.remove();<span class="hljs-comment">// 取出队列节点</span><br>            temp.add(node.val);<br>            <span class="hljs-keyword">if</span> (node.left != <span class="hljs-literal">null</span>) &#123;<br>                q.add(node.left);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (node.right != <span class="hljs-literal">null</span>) &#123;<br>                q.add(node.right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 将此层的节点放入list</span><br>        list.add(temp);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-2Q103-二叉树的锯齿形层序遍历"><a href="#1-2-2Q103-二叉树的锯齿形层序遍历" class="headerlink" title="1.2 2Q103.二叉树的锯齿形层序遍历"></a>1.2 2Q103.二叉树的锯齿形层序遍历</h3><p>给你二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>锯齿形层序遍历</strong> 。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301125578.png" alt="|297"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[3,9,20,null,null,15,7]</span><br>输出：<span class="hljs-comment">[<span class="hljs-comment">[3]</span>,<span class="hljs-comment">[20,9]</span>,<span class="hljs-comment">[15,7]</span>]</span><br></code></pre></td></tr></table></figure><blockquote><p>规定二叉树的根节点为第 0 层，如果当前层数是偶数，<strong>从左至右</strong>输出当前层的节点值，否则，<strong>从右至左</strong>输出当前层的节点值。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">zigzagLevelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    List&lt;List&lt;Integer&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    Queue&lt;TreeNode&gt; nodeQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>    nodeQueue.offer(root);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isOrderLeft</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">// 是否是从左边开始</span><br>    <span class="hljs-keyword">while</span> (!nodeQueue.isEmpty()) &#123;<br>        Deque&lt;Integer&gt; levelList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<span class="hljs-comment">// 记录每层结点</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> nodeQueue.size();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            <span class="hljs-comment">// 遍历当前层的结点实现锯齿形层序遍历</span><br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">curNode</span> <span class="hljs-operator">=</span> nodeQueue.poll();<br>            <span class="hljs-keyword">if</span> (isOrderLeft) &#123;<br>                levelList.offerLast(curNode.val);<span class="hljs-comment">// 奇数层则从右往左入队</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                levelList.offerFirst(curNode.val);<span class="hljs-comment">// 偶数层则从左往右入队</span><br>            &#125;<br>            <span class="hljs-comment">// 加入子结点</span><br>            <span class="hljs-keyword">if</span> (curNode.left != <span class="hljs-literal">null</span>) &#123;<br>                nodeQueue.offer(curNode.left);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (curNode.right != <span class="hljs-literal">null</span>) &#123;<br>                nodeQueue.offer(curNode.right);<br>            &#125;<br>        &#125;<br>        ans.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;(levelList));<br>        isOrderLeft = !isOrderLeft;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-3Q107-二叉树的层序遍历-II"><a href="#1-3-3Q107-二叉树的层序遍历-II" class="headerlink" title="1.3 3Q107.二叉树的层序遍历 II"></a>1.3 3Q107.二叉树的层序遍历 II</h3><p>给你二叉树的根节点 <code>root</code> ，返回其节点值 <strong>自底向上的层序遍历</strong> 。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301125578.png" alt="|297"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[3,9,20,null,null,15,7]</span><br>输出：<span class="hljs-comment">[<span class="hljs-comment">[15,7]</span>,<span class="hljs-comment">[9,20]</span>,<span class="hljs-comment">[3]</span>]</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrderBottom</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">// 先层序遍历，之后再倒转</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();<br>    &#125;<br>    ArrayList&lt;List&lt;Integer&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();<br>    <span class="hljs-comment">// 使用迭代实现层序遍历需要使用队列</span><br>    Queue&lt;TreeNode&gt; q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    q.add(root);<br>    <span class="hljs-keyword">while</span> (!q.isEmpty()) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> q.size();<span class="hljs-comment">// 获取当前层的节点数（当前队列长度=前层的节点数）</span><br>        ArrayList&lt;Integer&gt; temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<span class="hljs-comment">// 这里也是一样的必须使用size变量</span><br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> q.remove();<span class="hljs-comment">// 取出队列节点</span><br>            temp.add(node.val);<br>            <span class="hljs-comment">// 将所有子结点放入队列</span><br>            <span class="hljs-keyword">if</span> (node.left != <span class="hljs-literal">null</span>) &#123;<br>                q.add(node.left);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (node.right != <span class="hljs-literal">null</span>) &#123;<br>                q.add(node.right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 将此层的节点放入list</span><br>        list.add(temp);<br>    &#125;<br>    <span class="hljs-comment">// 反转结果列表</span><br>    Collections.reverse(list);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-4Q104-二叉树的最大深度"><a href="#1-4-4Q104-二叉树的最大深度" class="headerlink" title="1.4 4Q104.二叉树的最大深度"></a>1.4 4Q104.二叉树的最大深度</h3><p>给定一个二叉树 <code>root</code> ，返回其最大深度。</p><p>二叉树的 <strong>最大深度</strong> 是指从根节点到最远叶子节点的最长路径上的节点数。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg" alt="img"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">输入：root <span class="hljs-punctuation">=</span> [<span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">9</span><span class="hljs-punctuation">,</span><span class="hljs-number">20</span><span class="hljs-punctuation">,</span><span class="hljs-literal">null</span><span class="hljs-punctuation">,</span><span class="hljs-literal">null</span><span class="hljs-punctuation">,</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span>]<br>输出：<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 使用深度优先搜索，找到左子树和右子树的最大深度l和r，则二叉树的最大深度为max(l，r)+1</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">lheight</span> <span class="hljs-operator">=</span> maxDepth(root.left);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rheight</span> <span class="hljs-operator">=</span> maxDepth(root.right);<br>        <span class="hljs-keyword">return</span> Math.max(lheight, rheight) + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-5Q111-二叉树的最小深度"><a href="#1-5-5Q111-二叉树的最小深度" class="headerlink" title="1.5 5Q111.二叉树的最小深度"></a>1.5 5Q111.二叉树的最小深度</h3><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p>**说明：**叶子节点是指没有子节点的节点。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg" alt="img" style="zoom:67%;" /><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">输入：root <span class="hljs-punctuation">=</span> [<span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">9</span><span class="hljs-punctuation">,</span><span class="hljs-number">20</span><span class="hljs-punctuation">,</span><span class="hljs-literal">null</span><span class="hljs-punctuation">,</span><span class="hljs-literal">null</span><span class="hljs-punctuation">,</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span>]<br>输出：<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">// 广度优先（队列） 队列+while+for循环的模板</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    Queue&lt;TreeNode&gt; liTreeNodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<span class="hljs-comment">// 定义队列</span><br>    liTreeNodes.offer(root);<span class="hljs-comment">// 把root放入队列</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">level</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!liTreeNodes.isEmpty()) &#123;<span class="hljs-comment">// 队列非空</span><br>        level++;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> liTreeNodes.size();<span class="hljs-comment">// 这里不能把liTreeNodes.size()放到循环条件中，因为在每次for循环中大小会变化</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cnt; i++) &#123;<br>            <span class="hljs-comment">// 遍历队列</span><br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> liTreeNodes.poll();<span class="hljs-comment">// 取出一个节点</span><br>            <span class="hljs-keyword">if</span> (node.left == <span class="hljs-literal">null</span> &amp;&amp; node.right == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> level;<span class="hljs-comment">// 为叶子节点时直接返回</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (node.left != <span class="hljs-literal">null</span>) &#123;<br>                liTreeNodes.offer(node.left);<span class="hljs-comment">// 放入左节点</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (node.right != <span class="hljs-literal">null</span>) &#123;<br>                liTreeNodes.offer(node.right);<span class="hljs-comment">// 放入右节点</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> level;<br>&#125;<br>------------------------------------------------------------------------------------------------------------<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">// 深度优先（递归）</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 叶子节点返回1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 左节点不为空,取左节点的深度与当前最小深度的较小值</span><br>        min = Math.min(minDepth(root.left), min);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 右节点不为空，取右节点的深度与当前最小深度的较小值</span><br>        min = Math.min(minDepth(root.right), min);<br>    &#125;<br>    <span class="hljs-keyword">return</span> min + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-6Q101-对称二叉树"><a href="#1-6-6Q101-对称二叉树" class="headerlink" title="1.6 6Q101.对称二叉树"></a>1.6 6Q101.对称二叉树</h3><p>给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg" alt="img" style="zoom:67%;" /><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery">输入<span class="hljs-built_in">：root</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>]<br>输出<span class="hljs-built_in">：true</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//递归实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSymmetric</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dfs(root.left, root.right);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode left, TreeNode right)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 终止条件</span><br><span class="hljs-comment">         * 1.左右两个结点都为空</span><br><span class="hljs-comment">         * 2.两个结点中有一个为空</span><br><span class="hljs-comment">         * 3.结点值不相等</span><br><span class="hljs-comment">         */</span><br>    <span class="hljs-keyword">if</span> (left == <span class="hljs-literal">null</span> &amp;&amp; right == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (left == <span class="hljs-literal">null</span> || right == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (left.val != right.val) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//再递归的比较 左节点的左孩子 和 右节点的右孩子</span><br>    <span class="hljs-comment">//以及比较  左节点的右孩子 和 右节点的左孩子</span><br>    <span class="hljs-keyword">return</span> dfs(left.left, right.right) &amp;&amp; dfs(left.right, right.left);<br>&#125;<br>------------------------------------------------------------------------------------------------------------<br><br></code></pre></td></tr></table></figure><h3 id="1-7-7Q112-路径总和"><a href="#1-7-7Q112-路径总和" class="headerlink" title="1.7 7Q112.路径总和"></a>1.7 7Q112.路径总和</h3><p>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> 。判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>叶子节点</strong> 是指没有子节点的节点。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg" alt="img" style="zoom:67%;" /><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">输入：root = [<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">11</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">1</span>], targetSum = <span class="hljs-number">22</span><br>输出：<span class="hljs-literal">true</span><br>解释：等于目标和的根节点到叶节点路径如上图所示。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasPathSum</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> targetSum)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> root.val == targetSum;<span class="hljs-comment">// 遍历到叶子结点时查看是否等于目标数</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> hasPathSum(root.left, targetSum - root.val) || hasPathSum(root.right, targetSum - root.val);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-8-8Q113-路径总和-II"><a href="#1-8-8Q113-路径总和-II" class="headerlink" title="1.8 8Q113.路径总和 II"></a>1.8 8Q113.路径总和 II</h3><p>给你二叉树的根节点 <code>root</code> 和一个整数目标和 <code>targetSum</code> ，找出所有 <strong>从根节点到叶子节点</strong> 路径总和等于给定目标和的路径。</p><p><strong>叶子节点</strong> 是指没有子节点的节点。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsumii1.jpg" alt="img" style="zoom:67%;" /><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：root = [<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">11</span>,null,<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,null,null,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>], targetSum = <span class="hljs-number">22</span><br>输出：<span class="hljs-string">[[5,4,11,2],[5,8,4,5]]</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;List&lt;Integer&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Deque&lt;Integer&gt; path = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br><br><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">pathSum</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> targetSum)</span> &#123;<br>    dfs(root, targetSum);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> targetSum)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 将当前结点存入path并减去权值</span><br>    path.offerLast(root.val);<br>    targetSum -= root.val;<br>    <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span> &amp;&amp; targetSum == <span class="hljs-number">0</span>) &#123;<br>        ans.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(path));<span class="hljs-comment">// 符合条件则加入path</span><br>    &#125;<br>    dfs(root.left, targetSum);<br>    dfs(root.right, targetSum);<br>    path.pollLast();<span class="hljs-comment">// 回退当前结点</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-9-9Q236-二叉树的最近公共祖先"><a href="#1-9-9Q236-二叉树的最近公共祖先" class="headerlink" title="1.9 9Q236.二叉树的最近公共祖先"></a>1.9 9Q236.二叉树的最近公共祖先</h3><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p><a href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" alt="img"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：root = <span class="hljs-selector-attr">[3,5,1,6,2,0,8,null,null,7,4]</span>, <span class="hljs-selector-tag">p</span> = <span class="hljs-number">5</span>, <span class="hljs-selector-tag">q</span> = <span class="hljs-number">1</span><br>输出：<span class="hljs-number">3</span><br>解释：节点 <span class="hljs-number">5</span> 和节点 <span class="hljs-number">1</span> 的最近公共祖先是节点 <span class="hljs-number">3</span> 。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">lowestCommonAncestor</span><span class="hljs-params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == p || root == q || root == <span class="hljs-literal">null</span>)<br>        <span class="hljs-comment">// 如果当前结点是指定节点/节点为空，则返回</span><br>        <span class="hljs-keyword">return</span> root;<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> lowestCommonAncestor(root.left, p, q);<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">rigth</span> <span class="hljs-operator">=</span> lowestCommonAncestor(root.right, p, q);<br>    <span class="hljs-comment">// 如果left和right均不为空，则说明当前结点root就是最近公共祖先</span><br>    <span class="hljs-comment">// 如果left为空，right不为空，则说明目标节点是通过right返回的，则返回right节点</span><br>    <span class="hljs-comment">// 如果right为空，left不为空，则说明目标节点是通过left返回的，则返回left节点</span><br>    <span class="hljs-keyword">if</span> (left != <span class="hljs-literal">null</span> &amp;&amp; rigth != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (left == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> rigth;<br>    &#125;<br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-10-10Q100-相同的树"><a href="#1-10-10Q100-相同的树" class="headerlink" title="1.10 10Q100.相同的树"></a>1.10 10Q100.相同的树</h3><p>给你两棵二叉树的根节点 <code>p</code> 和 <code>q</code> ，编写一个函数来检验这两棵树是否相同。</p><p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg" alt="img" style="zoom:67%;" /><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：<span class="hljs-selector-tag">p</span> = <span class="hljs-selector-attr">[1,2,3]</span>, <span class="hljs-selector-tag">q</span> = <span class="hljs-selector-attr">[1,2,3]</span><br>输出：true<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSameTree</span><span class="hljs-params">(TreeNode p, TreeNode q)</span> &#123;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">null</span> &amp;&amp; q == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">null</span> || q == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p.val == q.val) &#123;<br>        <span class="hljs-keyword">return</span> isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);<br>    &#125; <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-11-11Q110-平衡二叉树"><a href="#1-11-11Q110-平衡二叉树" class="headerlink" title="1.11 11Q110.平衡二叉树"></a>1.11 11Q110.平衡二叉树</h3><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><blockquote><p>一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过 1 。</p></blockquote><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg" alt="img" style="zoom:67%;" /><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">输入：root = [<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">20</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>]<br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> Math.abs(getHeight(root.left) - getHeight(root.right)) &lt;= <span class="hljs-number">1</span> &amp;&amp; isBalanced(root.left)<br>            &amp;&amp; isBalanced(root.right);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 返回节点高度</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Math.max(getHeight(root.left), getHeight(root.right)) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-12-12Q226-翻转二叉树"><a href="#1-12-12Q226-翻转二叉树" class="headerlink" title="1.12 12Q226.翻转二叉树"></a>1.12 12Q226.翻转二叉树</h3><p>给你一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg" alt="img" style="zoom:67%;" /><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：root = <span class="hljs-string">[4,2,7,1,3,6,9]</span><br>输出：<span class="hljs-string">[4,7,2,9,6,3,1]</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">invertTree</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">//也是类似于前序遍历</span><br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> root.left;<br>    root.left = root.right;<br>    root.right = tmp;<br>    invertTree(root.left);<br>    invertTree(root.right);<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-13-13Q530-二叉搜索树的最小绝对差"><a href="#1-13-13Q530-二叉搜索树的最小绝对差" class="headerlink" title="1.13 13Q530.二叉搜索树的最小绝对差"></a>1.13 13Q530.二叉搜索树的最小绝对差</h3><p>给你一个二叉搜索树的根节点 <code>root</code> ，返回 <strong>树中任意两不同节点值之间的最小差值</strong> 。</p><p>差值是一个正数，其数值等于两值之差的绝对值。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2021/02/05/bst1.jpg" alt="img" style="zoom:67%;" /><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：root = <span class="hljs-string">[4,2,6,1,3]</span><br>输出：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 树中任意两不同节点值之间的最小差值</span><br><span class="hljs-comment">* 中序遍历，再记录相邻两个节点值的差值</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-variable">diff</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, minDiff = Integer.MAX_VALUE;<br>List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMinimumDifference</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    dfs(root);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size() - <span class="hljs-number">1</span>; i++) &#123;<br>        diff = list.get(i + <span class="hljs-number">1</span>) - list.get(i);<br>        <span class="hljs-keyword">if</span> (diff &lt; minDiff) &#123;<br>            minDiff = diff;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> minDiff;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    dfs(node.left);<br>    list.add(node.val);<br>    dfs(node.right);<br>&#125;<br>------------------------------------------------------------------------------------------------------------<br><span class="hljs-comment">//明显可以不使用数组记录，只要记录中序遍历的上一个值即可(虽然没提高多少)</span><br><span class="hljs-type">int</span> pre, ans;<span class="hljs-comment">// 分别记录上一个遍历的值和两不同节点值之间的最小差值</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMinimumDifference</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    ans = Integer.MAX_VALUE;<br>    pre = -<span class="hljs-number">1</span>;<br>    dfs(root);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    dfs(node.left);<br>    <span class="hljs-keyword">if</span> (pre == -<span class="hljs-number">1</span>) &#123;<br>        pre = node.val;<span class="hljs-comment">// 此时说明前一个节点还没有被遍历，即此时是第一个节点</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 求较小的差</span><br>        ans = Math.min(ans, node.val - pre);<br>        pre = node.val;<br>    &#125;<br>    dfs(node.right);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-14-14Q653-两数之和-IV-输入二叉搜索树"><a href="#1-14-14Q653-两数之和-IV-输入二叉搜索树" class="headerlink" title="1.14 14Q653.两数之和 IV - 输入二叉搜索树"></a>1.14 14Q653.两数之和 IV - 输入二叉搜索树</h3><p>给定一个二叉搜索树 <code>root</code> 和一个目标结果 <code>k</code>，如果二叉搜索树中存在两个元素且它们的和等于给定的目标结果，则返回 <code>true</code>。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2020/09/21/sum_tree_1.jpg" alt="img" style="zoom:67%;" /><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">输入: root = [<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">7</span>], k = <span class="hljs-number">9</span><br>输出: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 对于一个值为x的节点，需要在树中找到是否存在值为k-x的节点</span><br><span class="hljs-comment">*/</span><br>Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">findTarget</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (set.contains(k - root.val)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    set.add(root.val);<br>    <span class="hljs-keyword">return</span> findTarget(root.left, k) || findTarget(root.right, k);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-15-15Q671-二叉树中第二小的节点"><a href="#1-15-15Q671-二叉树中第二小的节点" class="headerlink" title="1.15 15Q671.二叉树中第二小的节点"></a>1.15 15Q671.二叉树中第二小的节点</h3><p>给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为 <code>2</code> 或 <code>0</code>。如果一个节点有两个子节点的话，那么该节点的值等于两个子节点中较小的一个。</p><p>更正式地说，即 <code>root.val = min(root.left.val, root.right.val)</code> 总成立。</p><p>给出这样的一个二叉树，你需要输出所有节点中的 <strong>第二小的值</strong> 。</p><p>如果第二小的值不存在的话，输出 -1 。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2020/10/15/smbt1.jpg" alt="img" style="zoom:67%;" /><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">输入：root <span class="hljs-punctuation">=</span> [<span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-literal">null</span><span class="hljs-punctuation">,</span><span class="hljs-literal">null</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span>]<br>输出：<span class="hljs-number">5</span><br>解释：最小的值是 <span class="hljs-number">2</span> ，第二小的值是 <span class="hljs-number">5</span> 。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 根节点是最小的值，然后需要找到仅大于根节点的值</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> rootV;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findSecondMinimumValue</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    rootV = root.val;<br>    dfs(root);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ans != -<span class="hljs-number">1</span> &amp;&amp; root.val &gt;= ans) &#123;<br>        <span class="hljs-keyword">return</span>;<span class="hljs-comment">// 若已经找到一个严格大于根节点且当前节点大于等于ans的值直接返回</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (root.val &gt; rootV) &#123;<br>        ans = root.val;<span class="hljs-comment">// 需要严格大于根节点</span><br>    &#125;<br>    dfs(root.left);<br>    dfs(root.right);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-16-16Q700-二叉搜索树中的搜索"><a href="#1-16-16Q700-二叉搜索树中的搜索" class="headerlink" title="1.16 16Q700.二叉搜索树中的搜索"></a>1.16 16Q700.二叉搜索树中的搜索</h3><p>给定二叉搜索树（BST）的根节点 <code>root</code> 和一个整数值 <code>val</code>。</p><p>你需要在 BST 中找到节点值等于 <code>val</code> 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 <code>null</code> 。</p><p><strong>示例 1:</strong></p><img src="https://assets.leetcode.com/uploads/2021/01/12/tree1.jpg" alt="img" style="zoom:67%;" /><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[4,2,7,1,3]</span>, val = 2<br>输出：<span class="hljs-comment">[2,1,3]</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">searchBST</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (root.val == val) &#123;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>    <span class="hljs-keyword">return</span> searchBST(val &lt; root.val ? root.left : root.right, val);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-17-17Q783-二叉搜索树节点最小距离"><a href="#1-17-17Q783-二叉搜索树节点最小距离" class="headerlink" title="1.17 17Q783.二叉搜索树节点最小距离"></a>1.17 17Q783.二叉搜索树节点最小距离</h3><p>给你一个二叉搜索树的根节点 <code>root</code> ，返回 <strong>树中任意两不同节点值之间的最小差值</strong> 。</p><p>差值是一个正数，其数值等于两值之差的绝对值。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2021/02/05/bst1.jpg" alt="img" style="zoom:67%;" /><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：root = <span class="hljs-string">[4,2,6,1,3]</span><br>输出：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 注意不是相邻节点,需要记录前驱</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-variable">diff</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br><span class="hljs-type">int</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minDiffInBST</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    dfs(root);<br>    <span class="hljs-keyword">return</span> diff;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    dfs(root.left);<br>    <span class="hljs-keyword">if</span> (pre == -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 此时说明是没有前驱的节点</span><br>        pre = root.val;<span class="hljs-comment">// 记录前驱</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        diff = Math.min(root.val - pre, diff);<br>        pre = root.val;<br>    &#125;<br>    dfs(root.right);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-18-18Q897-递增顺序搜索树"><a href="#1-18-18Q897-递增顺序搜索树" class="headerlink" title="1.18 18Q897.递增顺序搜索树"></a>1.18 18Q897.递增顺序搜索树</h3><p>给你一棵二叉搜索树的 <code>root</code> ，请你 <strong>按中序遍历</strong> 将其重新排列为一棵递增顺序搜索树，使树中最左边的节点成为树的根节点，并且每个节点没有左子节点，只有一个右子节点。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2020/11/17/ex1.jpg" alt="img" style="zoom: 50%;" /><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">输入：root = [<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>]<br>输出：[<span class="hljs-number">1</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">3</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">4</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">5</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">6</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">7</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">8</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">increasingBST</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    dfs(root, res);<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(-<span class="hljs-number">1</span>);<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> dummyNode;<br>    <span class="hljs-keyword">for</span> (Integer num : res) &#123;<br>        <span class="hljs-comment">// 将中序遍历的结果加到右子树</span><br>        o.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(num);<br>        o = o.right;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummyNode.right;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; res)</span> &#123;<br>    <span class="hljs-comment">// 将中序遍历结果存起来</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    dfs(root.left, res);<br>    res.add(root.val);<br>    dfs(root.right, res);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-19-19Q235-二叉搜索树的最近公共祖先"><a href="#1-19-19Q235-二叉搜索树的最近公共祖先" class="headerlink" title="1.19 19Q235.二叉搜索树的最近公共祖先"></a>1.19 19Q235.二叉搜索树的最近公共祖先</h3><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p><a href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p><p>例如，给定如下二叉搜索树: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5]</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png" alt="img"></p><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8</span><br><span class="hljs-section">输出: 6 </span><br><span class="hljs-section">解释: 节点 2 和节点 8 的最近公共祖先是 6。</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">lowestCommonAncestor</span><span class="hljs-params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">ancestor</span> <span class="hljs-operator">=</span> root;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (p.val &lt; ancestor.val &amp;&amp; q.val &lt; ancestor.val) &#123;<br>            ancestor = ancestor.left;<span class="hljs-comment">// 两个节点值都小于当前祖先，说明最近公共祖先在当前祖先左节点</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p.val &gt; ancestor.val &amp;&amp; q.val &gt; ancestor.val) &#123;<br>            ancestor = ancestor.right;<span class="hljs-comment">// 两个节点值都大于当前祖先，说明最近公共祖先在当前祖先右节点</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>;<span class="hljs-comment">// 所有节点的值都是唯一的，所以满足最近公共祖先在两个节点之间</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ancestor;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-20-20Q108-将有序数组转换为二叉搜索树"><a href="#1-20-20Q108-将有序数组转换为二叉搜索树" class="headerlink" title="1.20 20Q108.将有序数组转换为二叉搜索树"></a>1.20 20Q108.将有序数组转换为二叉搜索树</h3><p>给你一个整数数组 <code>nums</code> ，其中元素已经按 <strong>升序</strong> 排列，请你将其转换为一棵 <strong>高度平衡</strong> 二叉搜索树。</p><p><strong>高度平衡</strong> 二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg" alt="img" style="zoom:67%;" /><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：nums = [<span class="hljs-string">-10</span>,<span class="hljs-string">-3</span>,0,5,9]<br>输出：[0,<span class="hljs-string">-3</span>,9,<span class="hljs-string">-10</span>,null,5]<br>解释：[0,<span class="hljs-string">-10</span>,5,null,<span class="hljs-string">-3</span>,null,9] 也将被视为正确答案：<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">sortedArrayToBST</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 二分查找的判定树是一棵平衡二叉树</span><br><span class="hljs-comment">     * 很显然选择中间的数作为根节点是满足条件的</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">return</span> build(nums, <span class="hljs-number">0</span>, nums.length - <span class="hljs-number">1</span>);<br><br>&#125;<br><br><span class="hljs-keyword">private</span> TreeNode <span class="hljs-title function_">build</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>    <span class="hljs-keyword">if</span> (left &gt; right) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (right + left) / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(nums[mid]);<span class="hljs-comment">// 建立根节点</span><br>    root.left = build(nums, left, mid - <span class="hljs-number">1</span>);<br>    root.right = build(nums, mid + <span class="hljs-number">1</span>, right);<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图</title>
    <link href="/2025/07/30/%E5%9B%BE/"/>
    <url>/2025/07/30/%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Contents"><a href="#1-Contents" class="headerlink" title="1 Contents"></a>1 Contents</h2><table><thead><tr><th align="center">题号</th><th align="center">标题</th><th align="center">标签</th><th align="center">难度</th></tr></thead><tbody><tr><td align="center">0589</td><td align="center"><a href="https://leetcode.cn/problems/n-ary-tree-preorder-traversal/">N 叉树的前序遍历</a></td><td align="center">栈、树、深度优先搜索</td><td align="center">简单</td></tr><tr><td align="center">0590</td><td align="center"><a href="https://leetcode.cn/problems/n-ary-tree-postorder-traversal/">N 叉树的后序遍历</a></td><td align="center">栈、树、深度优先搜索</td><td align="center">简单</td></tr><tr><td align="center">0572</td><td align="center"><a href="https://leetcode.cn/problems/subtree-of-another-tree/">另一棵树的子树</a></td><td align="center">树、深度优先搜索、二叉树、字符串匹配、哈希函数</td><td align="center">简单</td></tr><tr><td align="center">0797</td><td align="center"><a href="https://leetcode.cn/problems/all-paths-from-source-to-target/">所有可能的路径</a></td><td align="center">深度优先搜索、广度优先搜索、图、回溯</td><td align="center">中等</td></tr><tr><td align="center">0200</td><td align="center"><a href="https://leetcode.cn/problems/number-of-islands/">岛屿数量</a></td><td align="center">深度优先搜索、广度优先搜索、并查集、数组、矩阵</td><td align="center">中等</td></tr><tr><td align="center">0695</td><td align="center"><a href="https://leetcode.cn/problems/max-area-of-island/">岛屿的最大面积</a></td><td align="center">深度优先搜索、广度优先搜索、并查集、数组、矩阵</td><td align="center">中等</td></tr><tr><td align="center">0463</td><td align="center">[岛屿的周长](<a href="https://leetcode.cn/problems/island-perimeter/description/">463. 岛屿的周长 - 力扣（LeetCode）</a>)</td><td align="center">深度优先搜索、广度优先搜索、并查集、数组、矩阵</td><td align="center">简单</td></tr><tr><td align="center">0133</td><td align="center"><a href="https://leetcode.cn/problems/clone-graph/">克隆图</a></td><td align="center">深度优先搜索、广度优先搜索、图、哈希表</td><td align="center">中等</td></tr><tr><td align="center">0494</td><td align="center"><a href="https://leetcode.cn/problems/target-sum/">目标和</a></td><td align="center">数组、动态规划、回溯</td><td align="center">中等</td></tr><tr><td align="center">0199</td><td align="center"><a href="https://leetcode.cn/problems/binary-tree-right-side-view/">二叉树的右视图</a></td><td align="center">树、深度优先搜索、广度优先搜索、二叉树</td><td align="center">中等</td></tr><tr><td align="center">0662</td><td align="center"><a href="https://leetcode.cn/problems/maximum-width-of-binary-tree/">二叉树最大宽度</a></td><td align="center">树、深度优先搜索、广度优先搜索、二叉树</td><td align="center">中等</td></tr><tr><td align="center">0958</td><td align="center"><a href="https://leetcode.cn/problems/check-completeness-of-a-binary-tree/">二叉树的完全性检验</a></td><td align="center">树、广度优先搜索、二叉树</td><td align="center">中等</td></tr><tr><td align="center">0841</td><td align="center"><a href="https://leetcode.cn/problems/keys-and-rooms/">钥匙和房间</a></td><td align="center">深度优先搜索、广度优先搜索、图</td><td align="center">中等</td></tr><tr><td align="center">0129</td><td align="center"><a href="https://leetcode.cn/problems/sum-root-to-leaf-numbers/">求根节点到叶节点数字之和</a></td><td align="center">树、深度优先搜索、二叉树</td><td align="center">中等</td></tr><tr><td align="center">0684</td><td align="center"><a href="https://leetcode.cn/problems/redundant-connection/">冗余连接</a></td><td align="center">深度优先搜索、广度优先搜索、并查集、图</td><td align="center">中等</td></tr></tbody></table><h3 id="1-1-1Q589-N叉树的前序遍历"><a href="#1-1-1Q589-N叉树的前序遍历" class="headerlink" title="1.1 1Q589.N叉树的前序遍历"></a>1.1 1Q589.N叉树的前序遍历</h3><p>给定一个 n 叉树的根节点 <code>root</code> ，返回 <em>其节点值的 <strong>前序遍历</strong></em> 。</p><p>n 叉树 在输入中按层序遍历进行序列化表示，每组子节点由空值 <code>null</code> 分隔（请参见示例）。<br><strong>示例 1：</strong><br><img src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png" alt="img" style="zoom: 60%;" /></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">输入：root <span class="hljs-punctuation">=</span> [<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-literal">null</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-literal">null</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span>]<br>输出：[<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">preorder</span><span class="hljs-params">(Node root)</span> &#123;<br>    List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    dfs(root, ans);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(Node root, List&lt;Integer&gt; ans)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    ans.add(root.val);<br>    <span class="hljs-comment">// 仅有这点和二叉树不同，这里需要循环</span><br>    <span class="hljs-keyword">for</span> (Node ch : root.children) &#123;<br>        dfs(ch, ans);<br>    &#125;<br>&#125;<br>-----------------------------------------------------------------------------------------------------------<br><span class="hljs-comment">//下面使用迭代进行遍历</span><br><br></code></pre></td></tr></table></figure><h3 id="1-2-2Q590-N-叉树的后序遍历"><a href="#1-2-2Q590-N-叉树的后序遍历" class="headerlink" title="1.2 2Q590.N 叉树的后序遍历"></a>1.2 2Q590.N 叉树的后序遍历</h3><p>给定一个 n 叉树的根节点 <code>root</code> ，返回 <em>其节点值的 <strong>后序遍历</strong></em> 。</p><p>n 叉树 在输入中按层序遍历进行序列化表示，每组子节点由空值 <code>null</code> 分隔（请参见示例）。</p><p><strong>示例 1：</strong><br><img src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png" alt="img" style="zoom:60%;" /></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">输入：root <span class="hljs-punctuation">=</span> [<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-literal">null</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-literal">null</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span>]<br>输出：[<span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">postorder</span><span class="hljs-params">(Node root)</span> &#123;<br>    List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    dfs(root, ans);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(Node root, List&lt;Integer&gt; ans)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 仅有这点和二叉树不同，这里需要循环</span><br>    <span class="hljs-keyword">for</span> (Node ch : root.children) &#123;<br>        dfs(ch, ans);<br>    &#125;<br>    ans.add(root.val);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-3Q572-另一棵树的子树"><a href="#1-3-3Q572-另一棵树的子树" class="headerlink" title="1.3 3Q572.另一棵树的子树"></a>1.3 3Q572.另一棵树的子树</h3><p>给你两棵二叉树 <code>root</code> 和 <code>subRoot</code> 。检验 <code>root</code> 中是否包含和 <code>subRoot</code> 具有相同结构和节点值的子树。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>二叉树 <code>tree</code> 的一棵子树包括 <code>tree</code> 的某个节点和这个节点的所有后代节点。<code>tree</code> 也可以看做它自身的一棵子树。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2021/04/28/subtree1-tree.jpg" alt="img" style="zoom:67%;" /><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[3,4,5,1,2]</span>, subRoot = <span class="hljs-comment">[4,1,2]</span><br>输出：true<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSubtree</span><span class="hljs-params">(TreeNode root, TreeNode subRoot)</span> &#123;<br>    <span class="hljs-keyword">return</span> dfs(root, subRoot);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode r, TreeNode s)</span> &#123;<br>    <span class="hljs-keyword">if</span> (r == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> check(r, s) || dfs(r.left, s) || dfs(r.right, s);<span class="hljs-comment">// 递归调用</span><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(TreeNode r, TreeNode s)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 检查是否相等</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (r == <span class="hljs-literal">null</span> &amp;&amp; s == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (r == <span class="hljs-literal">null</span> || s == <span class="hljs-literal">null</span> || r.val != s.val) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> check(r.left, s.left) &amp;&amp; check(r.right, s.right);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-4Q-797-所有可能的路径"><a href="#1-4-4Q-797-所有可能的路径" class="headerlink" title="1.4 4Q.797.所有可能的路径"></a>1.4 4Q.797.所有可能的路径</h3><p>给你一个有 <code>n</code> 个节点的 <strong>有向无环图（DAG）</strong>，请你找出所有从节点 <code>0</code> 到节点 <code>n-1</code> 的路径并输出（<strong>不要求按特定顺序</strong>）</p><p> <code>graph[i]</code> 是一个从节点 <code>i</code> 可以访问的所有节点的列表（即从节点 <code>i</code> 到节点 <code>graph[i][j]</code>存在一条有向边）。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg" alt="img" style="zoom: 80%;" /><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：graph = <span class="hljs-string">[[1,2],[3],[3],[]]</span><br>输出：<span class="hljs-string">[[0,1,3],[0,2,3]]</span><br>解释：有两条路径 <span class="hljs-number">0</span> -&gt; <span class="hljs-number">1</span> -&gt; <span class="hljs-number">3</span> 和 <span class="hljs-number">0</span> -&gt; <span class="hljs-number">2</span> -&gt; <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 使用深度优先搜索的方式求出所有路径</span><br><span class="hljs-comment">*/</span><br>List&lt;List&lt;Integer&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Deque&lt;Integer&gt; path = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<span class="hljs-comment">// 深度优先搜索路径</span><br><br><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">allPathsSourceTarget</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] graph)</span> &#123;<br>    path.offerLast(<span class="hljs-number">0</span>);<span class="hljs-comment">// 从0节点开始</span><br>    dfs(graph, <span class="hljs-number">0</span>, graph.length - <span class="hljs-number">1</span>);<span class="hljs-comment">// 分别记录当前节点和目的节点</span><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] graph, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (x == n) &#123;<br>        ans.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(path));<span class="hljs-comment">// 当前节点等于终点，说明已经找到路径，到达终点</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y : graph[x]) &#123;<br>        <span class="hljs-comment">// 遍历与x相连的所有节点</span><br>        path.offerLast(y);<br>        dfs(graph, y, n);<br>        path.pollLast();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-5Q200-岛屿数量"><a href="#1-5-5Q200-岛屿数量" class="headerlink" title="1.5 5Q200.岛屿数量"></a>1.5 5Q200.岛屿数量</h3><p>给你一个由 <code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向和&#x2F;或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><p><strong>示例 1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：grid = [<br>  [<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>],<br>  [<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>],<br>  [<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>],<br>  [<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>]<br>]<br>输出：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numIslands</span><span class="hljs-params">(<span class="hljs-type">char</span>[][] grid)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; grid.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; grid[i].length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                dfs(grid, i, j);<br>                cnt++;<span class="hljs-comment">// 岛屿数量加1</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">char</span>[][] grid, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || j &lt; <span class="hljs-number">0</span> || i &gt;= grid.length || j &gt;= grid[i].length || grid[i][j] == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>        <span class="hljs-comment">// 越界或遍历到海洋时退出</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 将遍历过的区域改成海洋，防止重复</span><br>    grid[i][j] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-comment">//上下左右遍历</span><br>    dfs(grid, i + <span class="hljs-number">1</span>, j);<br>    dfs(grid, i - <span class="hljs-number">1</span>, j);<br>    dfs(grid, i, j + <span class="hljs-number">1</span>);<br>    dfs(grid, i, j - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-6Q695-岛屿的最大面积"><a href="#1-6-6Q695-岛屿的最大面积" class="headerlink" title="1.6 6Q695.岛屿的最大面积"></a>1.6 6Q695.岛屿的最大面积</h3><p>给你一个大小为 <code>m x n</code> 的二进制矩阵 <code>grid</code> 。</p><p><strong>岛屿</strong> 是由一些相邻的 <code>1</code> (代表土地) 构成的组合，这里的「相邻」要求两个 <code>1</code> 必须在 <strong>水平或者竖直的四个方向上</strong> 相邻。你可以假设 <code>grid</code> 的四个边缘都被 <code>0</code>（代表水）包围着。</p><p>岛屿的面积是岛上值为 <code>1</code> 的单元格的数目。</p><p>计算并返回 <code>grid</code> 中最大的岛屿面积。如果没有岛屿，则返回面积为 <code>0</code> 。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2021/05/01/maxarea1-grid.jpg" alt="img" style="zoom:67%;" /><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：grid = [[<span class="hljs-number">0,0,1,0</span>,<span class="hljs-number">0,0,0,1</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0,0,0,1</span>,<span class="hljs-number">1,1,0,0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0,1,1,0</span>,<span class="hljs-number">1,0,0,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0,1,0,0</span>,<span class="hljs-number">1,1,0,0</span>,<span class="hljs-number">1,0,1,0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0,1,0,0</span>,<span class="hljs-number">1,1,0,0</span>,<span class="hljs-number">1,1,1,0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0,0,1,0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0,0,0,1</span>,<span class="hljs-number">1,1,0,0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0,0,0,1</span>,<span class="hljs-number">1,0,0,0</span>,<span class="hljs-number">0</span>]]<br>输出：<span class="hljs-number">6</span><br>解释：答案不应该是 <span class="hljs-number">11</span> ，因为岛屿只能包含水平或垂直这四个方向上的 <span class="hljs-number">1</span> 。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxAreaOfIsland</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] grid)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxArea</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; grid.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; grid[i].length; j++) &#123;<br>            maxArea = Math.max(maxArea, dfs(grid, i, j));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxArea;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] grid, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">area</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || j &lt; <span class="hljs-number">0</span> || i &gt;= grid.length || j &gt;= grid[i].length || grid[i][j] != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// 此时越界或是海洋</span><br>    &#125;<br>    grid[i][j] = <span class="hljs-number">0</span>;<span class="hljs-comment">// 记录已经遍历过</span><br>    <span class="hljs-type">int</span>[] di = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span> &#125;;<br>    <span class="hljs-type">int</span>[] dj = &#123; <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++) &#123;<br>        area += dfs(grid, i + di[k], j + dj[k]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> area;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-7-7Q463-岛屿的周长"><a href="#1-7-7Q463-岛屿的周长" class="headerlink" title="1.7 7Q463.岛屿的周长"></a>1.7 7Q463.岛屿的周长</h3><p>给定一个 <code>row x col</code> 的二维网格地图 <code>grid</code> ，其中：<code>grid[i][j] = 1</code> 表示陆地， <code>grid[i][j] = 0</code> 表示水域。</p><p>网格中的格子 <strong>水平和垂直</strong> 方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。</p><p>岛屿中没有“湖”（“湖” 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/island.png" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：grid = <span class="hljs-comment">[<span class="hljs-comment">[0,1,0,0]</span>,<span class="hljs-comment">[1,1,1,0]</span>,<span class="hljs-comment">[0,1,0,0]</span>,<span class="hljs-comment">[1,1,0,0]</span>]</span><br>输出：16<br>解释：它的周长是上面图片中的 16 个黄色的边<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">islandPerimeter</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] grid)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">perimeter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; grid.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; grid[i].length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-number">1</span>) &#123;<br>                perimeter += dfs(grid, i, j);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> perimeter;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] grid, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || j &lt; <span class="hljs-number">0</span> || i &gt;= grid.length || j &gt;= grid[i].length || grid[i][j] == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">// 此时越界或是海洋则周长加一</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// 已经遍历过</span><br>    &#125;<br>    grid[i][j] = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span>[] di = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span> &#125;;<br>    <span class="hljs-type">int</span>[] dj = &#123; <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++) &#123;<br>        n += dfs(grid, i + di[k], j + dj[k]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-8-8Q133-克隆图"><a href="#1-8-8Q133-克隆图" class="headerlink" title="1.8 8Q133.克隆图"></a>1.8 8Q133.克隆图</h3><p>给你无向 <strong><a href="https://baike.baidu.com/item/%E8%BF%9E%E9%80%9A%E5%9B%BE/6460995?fr=aladdin">连通</a></strong> 图中一个节点的引用，请你返回该图的 <a href="https://baike.baidu.com/item/%E6%B7%B1%E6%8B%B7%E8%B4%9D/22785317?fr=aladdin"><strong>深拷贝</strong></a>（克隆）。</p><p>图中的每个节点都包含它的值 <code>val</code>（<code>int</code>） 和其邻居的列表（<code>list[Node]</code>）。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    public <span class="hljs-keyword">int</span> val;<br>    public List&lt;Node&gt; neighbors;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试用例格式：</strong></p><p>简单起见，每个节点的值都和它的索引相同。例如，第一个节点值为 1（<code>val = 1</code>），第二个节点值为 2（<code>val = 2</code>），以此类推。该图在测试用例中使用邻接列表表示。</p><p><strong>邻接列表</strong> 是用于表示有限图的无序列表的集合。每个列表都描述了图中节点的邻居集。</p><p>给定节点将始终是图中的第一个节点（值为 1）。你必须将 <strong>给定节点的拷贝</strong> 作为对克隆图的引用返回。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/01/133_clone_graph_question.png" alt="img" style="zoom: 33%;" /><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：adjList = [[2,4],[1,3],[2,4],[1,3]]<br>输出：[[2,4],[1,3],[2,4],[1,3]]<br>解释：<br>图中有<span class="hljs-number"> 4 </span>个节点。<br>节点<span class="hljs-number"> 1 </span>的值是 1，它有两个邻居：节点<span class="hljs-number"> 2 </span>和<span class="hljs-number"> 4 </span>。<br>节点<span class="hljs-number"> 2 </span>的值是 2，它有两个邻居：节点<span class="hljs-number"> 1 </span>和<span class="hljs-number"> 3 </span>。<br>节点<span class="hljs-number"> 3 </span>的值是 3，它有两个邻居：节点<span class="hljs-number"> 2 </span>和<span class="hljs-number"> 4 </span>。<br>节点<span class="hljs-number"> 4 </span>的值是 4，它有两个邻居：节点<span class="hljs-number"> 1 </span>和<span class="hljs-number"> 3 </span>。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Node <span class="hljs-title function_">cloneGraph</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    HashMap&lt;Node, Node&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<span class="hljs-comment">// 哈希表中的 key 是原始图中的节点，value 是克隆图中的对应节点。</span><br>    LinkedList&lt;Node&gt; q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Node&gt;();<br>    q.add(node);<br>    visited.put(node, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(node.val, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;()));<span class="hljs-comment">// 当前node和克隆的node</span><br>    <span class="hljs-keyword">while</span> (!q.isEmpty()) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> q.remove();<span class="hljs-comment">// 移除的是原节点</span><br>        <span class="hljs-keyword">for</span> (Node neiborNode : n.neighbors) &#123;<br>            <span class="hljs-comment">// 遍历当前节点的每一个邻居</span><br>            <span class="hljs-keyword">if</span> (!visited.containsKey(neiborNode)) &#123;<br>                <span class="hljs-comment">// 还没有遍历过 ，则克隆并存放在哈希表中</span><br>                visited.put(neiborNode, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(neiborNode.val, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;()));<br>                q.add(neiborNode);<br>            &#125;<br>            <span class="hljs-comment">// 更新当前节点的邻居列表</span><br>            visited.get(n).neighbors.add(visited.get(neiborNode));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> visited.get(node);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-9-9Q494-目标和"><a href="#1-9-9Q494-目标和" class="headerlink" title="1.9 9Q494.目标和"></a>1.9 9Q494.目标和</h3><p>给你一个非负整数数组 <code>nums</code> 和一个整数 <code>target</code> 。</p><p>向数组中的每个整数前添加 <code>&#39;+&#39;</code> 或 <code>&#39;-&#39;</code> ，然后串联起所有整数，可以构造一个 <strong>表达式</strong> ：</p><ul><li>例如，<code>nums = [2, 1]</code> ，可以在 <code>2</code> 之前添加 <code>&#39;+&#39;</code> ，在 <code>1</code> 之前添加 <code>&#39;-&#39;</code> ，然后串联起来得到表达式 <code>&quot;+2-1&quot;</code> 。</li></ul><p>返回可以通过上述方法构造的、运算结果等于 <code>target</code> 的不同 <strong>表达式</strong> 的数目。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [1,1,1,1,1], target = 3<br>输出：5<br>解释：一共有<span class="hljs-number"> 5 </span>种方法让最终目标和为<span class="hljs-number"> 3 </span>。<br>-1 +<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 -<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 +<span class="hljs-number"> 1 </span>-<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 +<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>-<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 +<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>-<span class="hljs-number"> 1 </span>= 3<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 采用回溯法</span><br><span class="hljs-comment">* 可以使用回溯的方法遍历所有的表达式，回溯过程中维护一个计数器 count，</span><br><span class="hljs-comment">* 当遇到一种表达式的结果等于目标数 target\textit&#123;target&#125;target 时，</span><br><span class="hljs-comment">* 将 ount 的值加 1。遍历完所有的表达式之后，即可得到结果等于目标数 target</span><br><span class="hljs-comment">* 的表达式的数目。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findTargetSumWays</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>    backtrace(nums, target, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtrace</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> sum)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index == nums.length) &#123;<br>        <span class="hljs-keyword">if</span> (sum == target) &#123;<br>            cnt++;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        backtrace(nums, target, index + <span class="hljs-number">1</span>, sum - nums[index]);<br>        backtrace(nums, target, index + <span class="hljs-number">1</span>, sum + nums[index]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-10-10Q199-二叉树的右视图"><a href="#1-10-10Q199-二叉树的右视图" class="headerlink" title="1.10 10Q199.二叉树的右视图"></a>1.10 10Q199.二叉树的右视图</h3><p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p><p><strong>示例 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/14/tree.jpg" alt="img"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">输入<span class="hljs-punctuation">:</span> [<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-literal">null</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-literal">null</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span>]<br>输出<span class="hljs-punctuation">:</span> [<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 每一层的最右节点</span><br><span class="hljs-comment">* 按照 「根结点 -&gt; 右子树 -&gt; 左子树」 的顺序访问，就可以保证每层都是最先访问最右边的节点的。</span><br><span class="hljs-comment">* 因为每一层只有一个最右节点，所以当前深度（根节点为0）==节点数时则将其加入右视图</span><br><span class="hljs-comment">*/</span><br>List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">rightSideView</span><span class="hljs-params">(TreeNode root)</span> &#123;<br><br>    dfs(root, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> depth)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (depth == ans.size()) &#123;<br>        ans.add(root.val);<br>    &#125;<br>    depth++;<br>    dfs(root.right, depth);<br>    dfs(root.left, depth);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-11-11Q662-二叉树的最大宽度"><a href="#1-11-11Q662-二叉树的最大宽度" class="headerlink" title="1.11 11Q662.二叉树的最大宽度"></a>1.11 11Q662.二叉树的最大宽度</h3><p>给你一棵二叉树的根节点 <code>root</code> ，返回树的 <strong>最大宽度</strong> 。</p><p>树的 <strong>最大宽度</strong> 是所有层中最大的 <strong>宽度</strong> 。</p><p>每一层的 <strong>宽度</strong> 被定义为该层最左和最右的非空节点（即，两个端点）之间的长度。将这个二叉树视作与满二叉树结构相同，两端点间会出现一些延伸到这一层的 <code>null</code> 节点，这些 <code>null</code> 节点也计入长度。</p><p>题目数据保证答案将会在 <strong>32 位</strong> 带符号整数范围内。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2021/05/03/width1-tree.jpg" alt="img" style="zoom:80%;" /><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">输入：root <span class="hljs-punctuation">=</span> [<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-literal">null</span><span class="hljs-punctuation">,</span><span class="hljs-number">9</span>]<br>输出：<span class="hljs-number">4</span><br>解释：最大宽度出现在树的第 <span class="hljs-number">3</span> 层，宽度为 <span class="hljs-number">4</span> <span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-literal">null</span><span class="hljs-punctuation">,</span><span class="hljs-number">9</span><span class="hljs-punctuation">)</span> 。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<span class="hljs-comment">// &lt;深度，节点编号&gt;</span><br><span class="hljs-type">int</span> ans;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">widthOfBinaryTree</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    dfs(root, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">// 节点编号和深度</span><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> u, <span class="hljs-type">int</span> depth)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!map.containsKey(depth)) &#123;<br>        map.put(depth, u);<span class="hljs-comment">// 到达一个新的深度，新的深度最先遍历的一定是最左节点，也是当前层最小编号</span><br>    &#125;<br>    ans = Math.max(ans, u - map.get(depth) + <span class="hljs-number">1</span>);<span class="hljs-comment">// u - map.get(depth) + 1:计算当前宽度</span><br>    u = u - map.get(depth) + <span class="hljs-number">1</span>;<span class="hljs-comment">// 这里是为了防止溢出，重新编号</span><br>    dfs(root.left, u &lt;&lt; <span class="hljs-number">1</span>, depth + <span class="hljs-number">1</span>);<br>    dfs(root.right, u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, depth + <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-12-12Q958-二叉树的完全性检验"><a href="#1-12-12Q958-二叉树的完全性检验" class="headerlink" title="1.12 12Q958.二叉树的完全性检验"></a>1.12 12Q958.二叉树的完全性检验</h3><p>给你一棵二叉树的根节点 <code>root</code> ，请你判断这棵树是否是一棵 <strong>完全二叉树</strong> 。</p><p>在一棵 <strong><a href="https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin">完全二叉树</a></strong> 中，除了最后一层外，所有层都被完全填满，并且最后一层中的所有节点都尽可能靠左。最后一层（第 <code>h</code> 层）中可以包含 <code>1</code> 到 <code>2h</code> 个节点。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/complete-binary-tree-1.png" alt="img"></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">输入：root = [1,2,3,4,5,6]</span><br><span class="language-xml">输出：true</span><br><span class="language-xml">解释：最后一层前的每一层都是满的（即，节点值为 </span><span class="hljs-template-variable">&#123;1&#125;</span><span class="language-xml"> 和 </span><span class="hljs-template-variable">&#123;2,3&#125;</span><span class="language-xml"> 的两层），且最后一层中的所有节点（</span><span class="hljs-template-variable">&#123;4,5,6&#125;</span><span class="language-xml">）尽可能靠左。</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCompleteTree</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-comment">// 采用层序遍历</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">// 是否存在空节点,true表示存在空节点</span><br>    Deque&lt;TreeNode&gt; q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    q.add(root);<br>    <span class="hljs-keyword">while</span> (!q.isEmpty()) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> q.size();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> q.pollFirst();<br>            <span class="hljs-keyword">if</span> (o.left != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 有左孩子</span><br>                <span class="hljs-keyword">if</span> (flag)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">// 之前遍历到空节点,直接返回false</span><br>                q.add(o.left);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                flag = <span class="hljs-literal">true</span>;<span class="hljs-comment">// 标记遍历到空节点</span><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (o.right != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 有右孩子</span><br>                <span class="hljs-keyword">if</span> (flag)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">// 之前遍历到空节点,直接返回false</span><br>                q.add(o.right);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-13-13Q841-钥匙和房间"><a href="#1-13-13Q841-钥匙和房间" class="headerlink" title="1.13 13Q841.钥匙和房间"></a>1.13 13Q841.钥匙和房间</h3><p>有 <code>n</code> 个房间，房间按从 <code>0</code> 到 <code>n - 1</code> 编号。最初，除 <code>0</code> 号房间外的其余所有房间都被锁住。你的目标是进入所有的房间。然而，你不能在没有获得钥匙的时候进入锁住的房间。</p><p>当你进入一个房间，你可能会在里面找到一套不同的钥匙，每把钥匙上都有对应的房间号，即表示钥匙可以打开的房间。你可以拿上所有钥匙去解锁其他房间。</p><p>给你一个数组 <code>rooms</code> 其中 <code>rooms[i]</code> 是你进入 <code>i</code> 号房间可以获得的钥匙集合。如果能进入 <strong>所有</strong> 房间返回 <code>true</code>，否则返回 <code>false</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：rooms = <span class="hljs-string">[[1],[2],[3],[]]</span><br>输出：<span class="hljs-literal">true</span><br>解释：<br>我们从 <span class="hljs-number">0</span> 号房间开始，拿到钥匙 <span class="hljs-number">1</span>。<br>之后我们去 <span class="hljs-number">1</span> 号房间，拿到钥匙 <span class="hljs-number">2</span>。<br>然后我们去 <span class="hljs-number">2</span> 号房间，拿到钥匙 <span class="hljs-number">3</span>。<br>最后我们去了 <span class="hljs-number">3</span> 号房间。<br>由于我们能够进入每个房间，我们返回 <span class="hljs-literal">true</span>。<br></code></pre></td></tr></table></figure><blockquote><p>深度优先遍历即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> num;<span class="hljs-comment">// 记录能打开的房间数</span><br><span class="hljs-type">boolean</span>[] vis;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canVisitAllRooms</span><span class="hljs-params">(List&lt;List&lt;Integer&gt;&gt; rooms)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> rooms.size();<br>    num = <span class="hljs-number">0</span>;<br>    vis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[size];<br>    dfs(rooms, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; vis.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(List&lt;List&lt;Integer&gt;&gt; rooms, <span class="hljs-type">int</span> i)</span> &#123;<br>    vis[i] = <span class="hljs-literal">true</span>;<span class="hljs-comment">// 标记该房间为打开</span><br>    num++;<span class="hljs-comment">// 能打开的房间数加一</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n : rooms.get(i)) &#123;<br>        <span class="hljs-keyword">if</span> (!vis[n]) &#123;<br>            dfs(rooms, n);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-14-14Q-129求根节点到叶节点数字之和"><a href="#1-14-14Q-129求根节点到叶节点数字之和" class="headerlink" title="1.14 14Q.129求根节点到叶节点数字之和"></a>1.14 14Q.129求根节点到叶节点数字之和</h3><p>给你一个二叉树的根节点 <code>root</code> ，树中每个节点都存放有一个 <code>0</code> 到 <code>9</code> 之间的数字。</p><p>每条从根节点到叶节点的路径都代表一个数字：</p><ul><li>例如，从根节点到叶节点的路径 <code>1 -&gt; 2 -&gt; 3</code> 表示数字 <code>123</code> 。</li></ul><p>计算从根节点到叶节点生成的 <strong>所有数字之和</strong> 。</p><p><strong>叶节点</strong> 是指没有子节点的节点。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/num1tree.jpg" alt="img"></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入：root = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>输出：<span class="hljs-number">25</span><br>解释：<br>从根到叶子节点路径 <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span> 代表数字 <span class="hljs-number">12</span><br>从根到叶子节点路径 <span class="hljs-number">1</span>-&gt;<span class="hljs-number">3</span> 代表数字 <span class="hljs-number">13</span><br>因此，数字总和 = <span class="hljs-number">12</span> + <span class="hljs-number">13</span> = <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumNumbers</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">return</span> dfs(root, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> preSum)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> preSum * <span class="hljs-number">10</span> + root.val;<br>    <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> sum;<span class="hljs-comment">// 已经到达叶节点</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> dfs(root.left, sum) + dfs(root.right, sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-15-14Q323-冗余连接"><a href="#1-15-14Q323-冗余连接" class="headerlink" title="1.15 14Q323.冗余连接"></a>1.15 14Q323.冗余连接</h3><p>树可以看成是一个连通且 <strong>无环</strong> 的 <strong>无向</strong> 图。</p><p>给定往一棵 <code>n</code> 个节点 (节点值 <code>1～n</code>) 的树中添加一条边后的图。添加的边的两个顶点包含在 <code>1</code> 到 <code>n</code> 中间，且这条附加的边不属于树中已存在的边。图的信息记录于长度为 <code>n</code> 的二维数组 <code>edges</code> ，<code>edges[i] = [ai, bi]</code> 表示图中在 <code>ai</code> 和 <code>bi</code> 之间存在一条边。</p><p>请找出一条可以删去的边，删除后可使得剩余部分是一个有着 <code>n</code> 个节点的树。如果有多个答案，则返回数组 <code>edges</code> 中最后出现的那个。</p><p><strong>示例 1：</strong></p><p><img src="https://pic.leetcode-cn.com/1626676174-hOEVUL-image.png" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入: edges = <span class="hljs-comment">[<span class="hljs-comment">[1,2]</span>, <span class="hljs-comment">[1,3]</span>, <span class="hljs-comment">[2,3]</span>]</span><br>输出: <span class="hljs-comment">[2,3]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串</title>
    <link href="/2025/07/30/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2025/07/30/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Contents"><a href="#1-Contents" class="headerlink" title="1 Contents"></a>1 Contents</h2><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">验证回文串</td><td align="center">双指针、字符串</td></tr><tr><td align="center">最长回文子串</td><td align="center">字符串、动态规划</td></tr><tr><td align="center">无重复字符的最长子串</td><td align="center">哈希表、字符串、滑动窗口</td></tr><tr><td align="center">反转字符串</td><td align="center">双指针、字符串</td></tr><tr><td align="center">反转字符串中的单词 III</td><td align="center">双指针、字符串</td></tr><tr><td align="center">字母异位词分组</td><td align="center">数组、哈希表、字符串、排序</td></tr><tr><td align="center">字符串相加</td><td align="center">数学、字符串、模拟</td></tr><tr><td align="center">反转字符串中的单词</td><td align="center">双指针、字符串</td></tr><tr><td align="center">字符串相乘</td><td align="center">数学、字符串、模拟</td></tr><tr><td align="center">最长公共前缀</td><td align="center">字典树、字符串</td></tr></tbody></table><p><strong>单模式串匹配题目</strong></p><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">找出字符串中第一个匹配项的下标</td><td align="center">双指针、字符串、字符串匹配</td></tr><tr><td align="center">重复的子字符串</td><td align="center">字符串、字符串匹配</td></tr><tr><td align="center">重复叠加字符串匹配</td><td align="center">字符串、字符串匹配</td></tr><tr><td align="center">最大重复子字符串</td><td align="center">字符串、字符串匹配</td></tr><tr><td align="center">旋转字符串</td><td align="center">字符串、字符串匹配</td></tr><tr><td align="center">数组中的字符串匹配</td><td align="center">数组、字符串、字符串匹配</td></tr></tbody></table><h3 id="1-1-1Q125-验证回文串"><a href="#1-1-1Q125-验证回文串" class="headerlink" title="1.1 1Q125.验证回文串"></a>1.1 1Q125.验证回文串</h3><p>如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个 <strong>回文串</strong> 。<br>字母和数字都属于字母数字字符。<br>给你一个字符串 <code>s</code>，如果它是 <strong>回文串</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-comment">//使用首尾指针判断</span><br>    <span class="hljs-type">char</span>[] ch = s.toLowerCase().toCharArray();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = s.length()-<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        <span class="hljs-keyword">while</span> (!isValid(ch[i]) &amp;&amp; i &lt; j) &#123;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (!isValid(ch[j]) &amp;&amp; i &lt; j) &#123;<br>            j--;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ch[i] != ch[j]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        i++;<br>        j--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;<br>    <span class="hljs-keyword">return</span> (c &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) || (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-3Q3-无重复字符的最长子串-滑动窗口"><a href="#1-2-3Q3-无重复字符的最长子串-滑动窗口" class="headerlink" title="1.2 3Q3.无重复字符的最长子串(滑动窗口)"></a>1.2 3Q3.无重复字符的最长子串(滑动窗口)</h3><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301139324.png" alt="|775|1000"></p><blockquote><p>1、首先，判断当前字符是否包含在map中，如果不包含，将该字符添加到map（字符，字符在数组下标）, 此时没有出现重复的字符，左指针不需要变化。此时不重复子串的长度为：i-left+1，与原来的maxLen比较，取最大值；</p><p>2、如果当前字符 ch 包含在 map中，此时有2类情况： </p><p>​1）当前字符包含在当前有效的子段中，如：abca，当我们遍历到第二个a，当前有效最长子段是 abc，我们又遍历到a， 那么此时更新 left 为 map.get(a)+1&#x3D;1，当前有效子段更新为 bca；</p><p>​ 2）当前字符不包含在当前最长有效子段中，如：abba，我们先添加a,b进map，此时left&#x3D;0，我们再添加b，发现map中包含b， 而且b包含在最长有效子段中，就是1）的情况，我们更新 left&#x3D;map.get(b)+1&#x3D;2，此时子段更新为 b，而且map中仍然包含a，map.get(a)&#x3D;0； 随后，我们遍历到a，发现a包含在map中，且map.get(a)&#x3D;0，如果我们像1）一样处理，就会发现 left&#x3D;map.get(a)+1&#x3D;1，实际上，left此时 应该不变，left始终为2，子段变成 ba才对。</p><p>为了处理以上2类情况，我们每次更新left，left&#x3D;Math.max(left , map.get(ch)+1). 另外，更新left后，不管原来的 s.charAt(i) 是否在最长子段中，我们都要将 s.charAt(i) 的位置更新为当前的i， 因此此时新的 s.charAt(i) 已经进入到 当前最长的子段中！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s.length() == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// left是子串的起始位置</span><br>    Map&lt;Character, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (map.containsKey(s.charAt(i))) &#123;<br>            left = Math.max(left, map.get(s.charAt(i)) + <span class="hljs-number">1</span>);<br>        &#125;<br>        map.put(s.charAt(i), i);<br>        maxLen = Math.max(maxLen, i - left + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxLen;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-4Q344-反转字符串"><a href="#1-3-4Q344-反转字符串" class="headerlink" title="1.3 4Q344.反转字符串"></a>1.3 4Q344.反转字符串</h3><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须**<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a>修改输入数组**、使用 O(1) 的额外空间解决这一问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseString</span><span class="hljs-params">(<span class="hljs-type">char</span>[] s)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = s.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> s[j];<br>        s[j] = s[i];<br>        s[i] = ch;<br>        i++;<br>        j--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-5Q557-反转字符串中的单词-III"><a href="#1-4-5Q557-反转字符串中的单词-III" class="headerlink" title="1.4 5Q557.反转字符串中的单词 III"></a>1.4 5Q557.反转字符串中的单词 III</h3><p>给定一个字符串 <code>s</code> ，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。</p><p><strong>字母反转</strong></p><blockquote><p>对于java而言，String是不可变字符数组，所以无法避免空间的开销</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseWords</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> s.length();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; len) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-keyword">while</span> (i &lt; len &amp;&amp; s.charAt(i) != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            i++;<span class="hljs-comment">// 记录单词，start是单词起始位置，i是结束位置</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> start; j &lt; i; j++) &#123;<br>            ans.append(s.charAt(start + i - <span class="hljs-number">1</span> - j));<br>        &#125;<br>        <span class="hljs-keyword">while</span> (i &lt; len &amp;&amp; s.charAt(i) == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            i++;<br>            ans.append(<span class="hljs-string">&#x27; &#x27;</span>);<span class="hljs-comment">// 添加空格</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-6Q49-字母异位词分组"><a href="#1-5-6Q49-字母异位词分组" class="headerlink" title="1.5 6Q49.字母异位词分组"></a>1.5 6Q49.字母异位词分组</h3><p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p><p><strong>字母异位词</strong> 是由重新排列源单词的所有字母得到的一个新单词。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">groupAnagrams</span><span class="hljs-params">(String[] strs)</span> &#123;<br>    <span class="hljs-comment">// 使用哈希表存储，key=字符从小到大排序之后的串，value=字母异位词</span><br>    Map&lt;String, List&lt;String&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (String str : strs) &#123;<br>        <span class="hljs-type">char</span>[] arr = str.toCharArray();<br>        Arrays.sort(arr);<span class="hljs-comment">// 排序之和看是否是字母异位词</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(arr);<br>        List&lt;String&gt; list = map.getOrDefault(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<span class="hljs-comment">// 能找到则返回key对应的value，否则返回空</span><br>        list.add(str);<span class="hljs-comment">// 将字符串本身加入list</span><br>        map.put(key, list);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;(map.values());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-7Q415-字符串相加"><a href="#1-6-7Q415-字符串相加" class="headerlink" title="1.6 7Q415.字符串相加"></a>1.6 7Q415.字符串相加</h3><p>给定两个字符串形式的非负整数 <code>num1</code> 和<code>num2</code> ，计算它们的和并同样以字符串形式返回。</p><p>你不能使用任何內建的用于处理大整数的库（比如 <code>BigInteger</code>）， 也不能直接将输入的字符串转换为整数形式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addStrings</span><span class="hljs-params">(String num1, String num2)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> num1.length() - <span class="hljs-number">1</span>, j = num2.length() - <span class="hljs-number">1</span>;<span class="hljs-comment">// i、j分别记录位次</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// add记录进位</span><br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> || j &gt;= <span class="hljs-number">0</span> || add != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> i &gt;= <span class="hljs-number">0</span> ? num1.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-number">0</span>;<span class="hljs-comment">// 取对应位次上的数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> j &gt;= <span class="hljs-number">0</span> ? num2.charAt(j) - <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-number">0</span>;<span class="hljs-comment">// 取对应位次上的数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> x + y + add;<br>        ans.append(result % <span class="hljs-number">10</span>);<span class="hljs-comment">// 取个位上的数，十位上的数是进位</span><br>        add = result / <span class="hljs-number">10</span>;<br>        i--;<br>        j--;<br>    &#125;<br>    ans.reverse();<span class="hljs-comment">// 结果需要反转</span><br>    <span class="hljs-keyword">return</span> ans.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-7-8Q151-反转字符串中的单词"><a href="#1-7-8Q151-反转字符串中的单词" class="headerlink" title="1.7 8Q151.反转字符串中的单词"></a>1.7 8Q151.反转字符串中的单词</h3><p>给你一个字符串 <code>s</code> ，请你反转字符串中 <strong>单词</strong> 的顺序。</p><p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p><p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong> 之间用单个空格连接的结果字符串。</p><p>**注意：**输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p><p><strong>单词反转</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseWords</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s.length() == <span class="hljs-number">0</span> || s.length() == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> s.length();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> len - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">while</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; s.charAt(i) == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            i--;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">finish</span> <span class="hljs-operator">=</span> i;<span class="hljs-comment">// 记录单词，finish是单词结束位置</span><br>        <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; s.charAt(i) != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            i--;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>;<span class="hljs-comment">// 记录单词，start是单词开始位置</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> start; j &lt;= finish; j++) &#123;<br>            ans.append(s.charAt(j));<br>        &#125; <span class="hljs-comment">// 此时已添加完一个单词</span><br><br>        ans.append(<span class="hljs-string">&#x27; &#x27;</span>);<span class="hljs-comment">// 添加空格</span><br><br>    &#125;<br>    <span class="hljs-keyword">return</span> ans.toString().trim();<span class="hljs-comment">// 注意去掉末尾空格</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-8-9Q43-字符串相乘"><a href="#1-8-9Q43-字符串相乘" class="headerlink" title="1.8 9Q43.字符串相乘"></a>1.8 9Q43.字符串相乘</h3><p>给定两个以字符串形式表示的非负整数 <code>num1</code> 和 <code>num2</code>，返回 <code>num1</code> 和 <code>num2</code> 的乘积，它们的乘积也表示为字符串形式。</p><p>**注意：**不能使用任何内置的 BigInteger 库或直接将输入转换为整数。</p><blockquote><p>需要使用数组存储乘积，int类型会越界。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">multiply</span><span class="hljs-params">(String num1, String num2)</span> &#123;<br>    <span class="hljs-keyword">if</span> (num1.equals(<span class="hljs-string">&quot;0&quot;</span>) || num2.equals(<span class="hljs-string">&quot;0&quot;</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> num1.length(), n = num2.length();<br>    <span class="hljs-type">int</span>[] ansArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m + n];<span class="hljs-comment">// 结果长度最长为m+n，最短为m+n-1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> m - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-comment">// 首先将各个位数的乘积赋值给对应位数的数组项</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> num1.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> n - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> num2.charAt(j) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            ansArr[i + j + <span class="hljs-number">1</span>] += x * y;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> m + n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-comment">// 传入进位</span><br>        ansArr[i - <span class="hljs-number">1</span>] += ansArr[i] / <span class="hljs-number">10</span>;<br>        ansArr[i] %= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> ansArr[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<span class="hljs-comment">// 最高位是否为0，为0则从第一位开始，否则第零位开始</span><br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    <span class="hljs-keyword">while</span> (index &lt; m + n) &#123;<br>        ans.append(ansArr[index]);<br>        index++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-9-14Q41-最长公共前缀"><a href="#1-9-14Q41-最长公共前缀" class="headerlink" title="1.9 14Q41.最长公共前缀"></a>1.9 14Q41.最长公共前缀</h3><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">longestCommonPrefix</span><span class="hljs-params">(String[] strs)</span> &#123;<br>    <span class="hljs-keyword">if</span> (strs == <span class="hljs-literal">null</span> || strs.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">prefix</span> <span class="hljs-operator">=</span> strs[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; strs.length; i++) &#123;<br>        <span class="hljs-comment">// 计算公共前缀</span><br>        prefix = longestCommonPrefix(prefix, strs[i]);<br>        <span class="hljs-keyword">if</span> (prefix.length() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> prefix;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">longestCommonPrefix</span><span class="hljs-params">(String str1, String str2)</span> &#123;<br>    <span class="hljs-comment">// 返回两个字符串的最长公共前缀</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> Math.min(str1.length(), str2.length());<br>    <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (idx &lt; len &amp;&amp; str1.charAt(idx) == str2.charAt(idx)) &#123;<br>        idx++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> str1.substring(<span class="hljs-number">0</span>, idx);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-10-15Q25-找出字符串中第一个匹配项的下标"><a href="#1-10-15Q25-找出字符串中第一个匹配项的下标" class="headerlink" title="1.10 15Q25.找出字符串中第一个匹配项的下标"></a>1.10 15Q25.找出字符串中第一个匹配项的下标</h3><p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串的第一个匹配项的下标（下标从 0 开始）。如果 <code>needle</code> 不是 <code>haystack</code> 的一部分，则返回 <code>-1</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> haystack.indexOf(needle);<span class="hljs-comment">//调用函数直接返回</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strStr</span><span class="hljs-params">(String haystack, String needle)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> haystack.length(), m = needle.length();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i + m &lt;= n; i++) &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>            <span class="hljs-comment">// 比较是否相同</span><br>            <span class="hljs-keyword">if</span> (haystack.charAt(i + j) != needle.charAt(j)) &#123;<br>                <span class="hljs-comment">//haystack[i+j]与needle[j]是否相同</span><br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-11-16Q456-重复的子字符串"><a href="#1-11-16Q456-重复的子字符串" class="headerlink" title="1.11 16Q456.重复的子字符串"></a>1.11 16Q456.重复的子字符串</h3><blockquote><p>给定一个非空的字符串 <code>s</code> ，检查是否可以通过由它的一个子串重复多次构成。</p><p>如果一个长度为 nnn 的字符串 sss 可以由它的一个长度为 n′ 的子串 s′ 重复多次构成，那么：</p><ul><li>n 一定是 n′的倍数；</li><li>s′一定是 sss 的前缀；</li><li>对于任意的 i∈[n′,n),有 s[i]&#x3D;s[i−n′]。</li></ul><p>也就是说，s 中长度为 n′的前缀就是 s ，并且在这之后的每一个位置上的字符 s[i]，都需要与它之前的第 n′<br>个字符 s[i−n′] 相同。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">repeatedSubstringPattern</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> s.length();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i * <span class="hljs-number">2</span> &lt;= len; i++) &#123;<span class="hljs-comment">// 子串长度至少要小于字符串长度/2</span><br>        <span class="hljs-keyword">if</span> (len % i == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 首先需要满足字符串长度是子串的整倍数</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i; j &lt; len; j++) &#123;<br>                <span class="hljs-keyword">if</span> (s.charAt(j) != s.charAt(j - i)) &#123;<br>                    <span class="hljs-comment">/*判断是否是子串的重复</span><br><span class="hljs-comment">                    * s.charAt(j)是当前字符，s.charAt(j - i)则是可能重复的字符</span><br><span class="hljs-comment">                    */</span><br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-12-17Q686-重复叠加字符串匹配"><a href="#1-12-17Q686-重复叠加字符串匹配" class="headerlink" title="1.12 17Q686.重复叠加字符串匹配"></a>1.12 17Q686.重复叠加字符串匹配</h3><p>给定两个字符串 <code>a</code> 和 <code>b</code>，寻找重复叠加字符串 <code>a</code> 的最小次数，使得字符串 <code>b</code> 成为叠加后的字符串 <code>a</code> 的子串，如果不存在则返回 <code>-1</code>。</p><p>**注意：**字符串 <code>&quot;abc&quot;</code> 重复叠加 0 次是 <code>&quot;&quot;</code>，重复叠加 1 次是 <code>&quot;abc&quot;</code>，重复叠加 2 次是 <code>&quot;abcabc&quot;</code>。</p><blockquote><p>输入：a &#x3D; “abcd”, b &#x3D; “cdabcdab”<br>输出：3<br>解释：a 重复叠加三遍后为 “abcdabcdabcd”, 此时 b 是其子串。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">repeatedStringMatch</span><span class="hljs-params">(String a, String b)</span> &#123;<br>    <span class="hljs-comment">// 像a = &quot;abcd&quot;, b = &quot;cdabcdab&quot;这种首尾分开的还需要加上一个a的长度</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> a.length() + b.length();<br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (sb.length() &lt; max) &#123;<br>        sb.append(a);<br>        ans++;<br>        <span class="hljs-keyword">if</span> (sb.indexOf(b) != -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>至少将 a 复制长度 大于等于 b 的长度，才有可能匹配。比如： <code>a = &quot;abcd&quot;, b = &quot;abcdabcd&quot;</code> ，这时候只需要最少的复制次数2次，<code>max = b.length()</code>。若，a &#x3D; “abcd”, b &#x3D; “cdabcdab”，这个时候就需要复制3次，即在最少的次数上+1， <code>max = a.length() + b.length()</code> 。所以，至少需要将 a 复制长度 大于等于 b 的长度。当然可以设置为更长啊 <code>max = n * a.length() + b.length()</code> ，只要满足if条件就会提前退出</p></blockquote><h3 id="1-13-18Q1668-最大重复子字符串"><a href="#1-13-18Q1668-最大重复子字符串" class="headerlink" title="1.13 18Q1668.最大重复子字符串"></a>1.13 18Q1668.最大重复子字符串</h3><p>给你一个字符串 <code>sequence</code> ，如果字符串 <code>word</code> 连续重复 <code>k</code> 次形成的字符串是 <code>sequence</code> 的一个子字符串，那么单词 <code>word</code> 的 <strong>重复值为 <code>k</code></strong> 。单词 <code>word</code> 的 <strong>最****大重复值</strong> 是单词 <code>word</code> 在 <code>sequence</code> 中最大的重复值。如果 <code>word</code> 不是 <code>sequence</code> 的子串，那么重复值 <code>k</code> 为 <code>0</code> 。</p><p>给你一个字符串 <code>sequence</code> 和 <code>word</code> ，请你返回 <strong>最大重复值 <code>k</code></strong> 。</p><blockquote><p>输入：sequence &#x3D; “ababc”, word &#x3D; “ab”<br>输出：2<br>解释：”abab” 是 “ababc” 的子字符串。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxRepeating</span><span class="hljs-params">(String sequence, String word)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sequence.length() / word.length(); i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">if</span> (sequence.contains(word.repeat(i))) &#123;<br>            <span class="hljs-comment">//如果sequence包含word重复i次，则直接</span><br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-14-19Q796-旋转字符串"><a href="#1-14-19Q796-旋转字符串" class="headerlink" title="1.14 19Q796.旋转字符串"></a>1.14 19Q796.旋转字符串</h3><p>给定两个字符串, <code>s</code> 和 <code>goal</code>。如果在若干次旋转操作之后，<code>s</code> 能变成 <code>goal</code> ，那么返回 <code>true</code> 。</p><p><code>s</code> 的 <strong>旋转操作</strong> 就是将 <code>s</code> 最左边的字符移动到最右边。 </p><ul><li>例如, 若 <code>s = &#39;abcde&#39;</code>，在旋转一次之后结果就是<code>&#39;bcdea&#39;</code> 。</li></ul><blockquote><p>输入: s &#x3D; “abcde”, goal &#x3D; “cdeab”<br>输出: true</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//只要将s重复后看是否包含goal即可</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">rotateString</span><span class="hljs-params">(String s, String goal)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s.length() != goal.length()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (s + s).contains(goal);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-15-20Q1408-数组中的字符串匹配"><a href="#1-15-20Q1408-数组中的字符串匹配" class="headerlink" title="1.15 20Q1408.数组中的字符串匹配"></a>1.15 20Q1408.数组中的字符串匹配</h3><p>给你一个字符串数组 <code>words</code> ，数组中的每个字符串都可以看作是一个单词。请你按 <strong>任意</strong> 顺序返回 <code>words</code> 中是其他单词的子字符串的所有单词。</p><p>如果你可以删除 <code>words[j]</code> 最左侧和&#x2F;或最右侧的若干字符得到 <code>words[i]</code> ，那么字符串 <code>words[i]</code> 就是 <code>words[j]</code> 的一个子字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：words = [<span class="hljs-string">&quot;mass&quot;</span>,<span class="hljs-string">&quot;as&quot;</span>,<span class="hljs-string">&quot;hero&quot;</span>,<span class="hljs-string">&quot;superhero&quot;</span>]<br>输出：[<span class="hljs-string">&quot;as&quot;</span>,<span class="hljs-string">&quot;hero&quot;</span>]<br>解释：<span class="hljs-string">&quot;as&quot;</span> 是 <span class="hljs-string">&quot;mass&quot;</span> 的子字符串，<span class="hljs-string">&quot;hero&quot;</span> 是 <span class="hljs-string">&quot;superhero&quot;</span> 的子字符串。<br>[<span class="hljs-string">&quot;hero&quot;</span>,<span class="hljs-string">&quot;as&quot;</span>] 也是有效的答案。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">stringMatching</span><span class="hljs-params">(String[] words)</span> &#123;<br>    List&lt;String&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; words.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; words.length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (i != j &amp;&amp; words[j].contains(words[i])) &#123;<br>                <span class="hljs-comment">//其他字符串是否包含word[i],包含则直接记录word[i]</span><br>                ans.add(words[i]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>tips</strong>:还有字典树、AC自动机和后缀数组，这里展示不作要求。。。。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈</title>
    <link href="/2025/07/30/%E6%A0%88/"/>
    <url>/2025/07/30/%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Contents"><a href="#1-Contents" class="headerlink" title="1 Contents"></a>1 Contents</h2><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">删除字符串中的所有相邻重复项</td><td align="center">栈、字符串</td></tr><tr><td align="center">有效的括号</td><td align="center">栈、字符串</td></tr><tr><td align="center">用栈实现队列</td><td align="center">栈、队列</td></tr><tr><td align="center">用两个栈实现队列</td><td align="center">栈、队列</td></tr><tr><td align="center">从尾到头打印链表</td><td align="center">栈、递归、链表、双指针</td></tr><tr><td align="center">最小栈</td><td align="center">栈、设计</td></tr><tr><td align="center">基本计算器ii</td><td align="center">栈、数学、字符串</td></tr><tr><td align="center">每日温度</td><td align="center">栈、数组、<strong>单调栈</strong></td></tr><tr><td align="center">逆波兰表达式求值</td><td align="center">数组、数学</td></tr><tr><td align="center">字符串解码</td><td align="center">栈、递归&#x2F;辅助栈、字符串</td></tr><tr><td align="center">验证栈序列</td><td align="center">栈、数组、模拟</td></tr><tr><td align="center">简化路径</td><td align="center">字符串</td></tr></tbody></table><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">下一个更大元素i</td><td align="center">栈、数组、哈希表、单调栈</td></tr><tr><td align="center">下一个更大元素ii</td><td align="center">栈、数组、单调栈</td></tr><tr><td align="center">股票价格跨度</td><td align="center">设计、数据流、单调栈</td></tr><tr><td align="center">去除重复字母</td><td align="center">贪心、字符串、单调栈</td></tr></tbody></table><h3 id="1-1-1Q1047-删除字符串中的所有相邻重复项"><a href="#1-1-1Q1047-删除字符串中的所有相邻重复项" class="headerlink" title="1.1 1Q1047.删除字符串中的所有相邻重复项"></a>1.1 1Q1047.删除字符串中的所有相邻重复项</h3><p>给出由小写字母组成的字符串 <code>S</code>，<strong>重复项删除操作</strong>会选择两个相邻且相同的字母，并删除它们。<br>在 S 上反复执行重复项删除操作，直到无法继续删除。<br>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(String S)</span> &#123;<br>    <span class="hljs-type">char</span>[] s = S.toCharArray();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">// 定义栈底指针</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; S.length(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (top == -<span class="hljs-number">1</span> || s[top] != s[i]) &#123;<br>            s[++top] = s[i];<span class="hljs-comment">// 栈为空或入栈元素与栈顶元素不相等时元素入栈</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 此时应该删除重复项</span><br>            top--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> String.valueOf(s, <span class="hljs-number">0</span>, top + <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-2Q20-有效的括号"><a href="#1-2-2Q20-有效的括号" class="headerlink" title="1.2 2Q20.有效的括号"></a>1.2 2Q20.有效的括号</h3><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。<br>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> HashMap&lt;Character, Character&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Character, Character&gt;() &#123;<br>        &#123;<br>            put(<span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>);<br>            put(<span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>);<br>            put(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;)&#x27;</span>);<br>            put(<span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>);<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">if</span> (s.length() &gt; <span class="hljs-number">0</span> &amp;&amp; !map.containsKey(s.charAt(<span class="hljs-number">0</span>))) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 多加了一个【&#x27;?&#x27;: &#x27;?&#x27;】的键值对，用于【字符串第一个元素是右括号】的情况，防止removeLast时为空</span><br>        LinkedList&lt;Character&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Character&gt;() &#123;<br>            &#123;<br>                add(<span class="hljs-string">&#x27;?&#x27;</span>);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">for</span> (Character c : s.toCharArray()) &#123;<br>            <span class="hljs-keyword">if</span> (map.containsKey(c)) &#123;<br>                stack.addLast(c);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (map.get(stack.removeLast()) != c) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack.size() == <span class="hljs-number">1</span>;<span class="hljs-comment">//当有效时应该是stack.size() == 0，没有把问号弹出</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-3Q232-用栈实现队列"><a href="#1-3-3Q232-用栈实现队列" class="headerlink" title="1.3 3Q232.用栈实现队列"></a>1.3 3Q232.用栈实现队列</h3><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyQueue</span> &#123;<br>    <span class="hljs-comment">// 使用两个栈实现先入先出队列</span><br>    Stack&lt;Integer&gt; inStack;<br>    Stack&lt;Integer&gt; outStack;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyQueue</span><span class="hljs-params">()</span> &#123;<br>        inStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();<br>        outStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        inStack.push(x);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (outStack.isEmpty()) &#123;<br>            inStackToOutStack();<br>        &#125;<br>        <span class="hljs-keyword">return</span> outStack.pop();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (outStack.isEmpty()) &#123;<br>            inStackToOutStack();<br>        &#125;<br>        <span class="hljs-keyword">return</span> outStack.peek();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">empty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> inStack.isEmpty() &amp;&amp; outStack.isEmpty();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inStackToOutStack</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (!inStack.isEmpty()) &#123;<br>            <span class="hljs-comment">// inStack栈底元素移动到outStack栈顶</span><br>            outStack.push(inStack.pop());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-4剑指-Offer-09-用两个栈实现队列"><a href="#1-4-4剑指-Offer-09-用两个栈实现队列" class="headerlink" title="1.4 4剑指 Offer 09  用两个栈实现队列"></a>1.4 4剑指 Offer 09  用两个栈实现队列</h3><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 <code>appendTail</code> 和 <code>deleteHead</code> ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，<code>deleteHead</code> 操作返回 -1 )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CQueue</span> &#123;<br>    <span class="hljs-comment">// 使用两个栈实现先入先出队列</span><br>    Stack&lt;Integer&gt; inStack;<br>    Stack&lt;Integer&gt; outStack;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CQueue</span><span class="hljs-params">()</span> &#123;<br>        inStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();<br>        outStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendTail</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        inStack.push(value);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteHead</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(outStack.isEmpty())&#123;<br>            <span class="hljs-keyword">if</span>(inStack.isEmpty()) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            inStackToOutStack();<br>        &#125;<br>        <span class="hljs-keyword">return</span> outStack.pop();<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inStackToOutStack</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (!inStack.isEmpty()) &#123;<br>            <span class="hljs-comment">// inStack栈底元素移动到outStack栈顶</span><br>            outStack.push(inStack.pop());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-5Q155-最小栈"><a href="#1-5-5Q155-最小栈" class="headerlink" title="1.5 5Q155. 最小栈"></a>1.5 5Q155. 最小栈</h3><p>设计一个支持 <code>push</code> ，<code>pop</code> ，<code>top</code> 操作，并能在常数时间内检索到最小元素的栈。<br>实现 <code>MinStack</code> 类:</p><ul><li><code>MinStack()</code> 初始化堆栈对象。</li><li><code>void push(int val)</code> 将元素val推入堆栈。</li><li><code>void pop()</code> 删除堆栈顶部的元素。</li><li><code>int top()</code> 获取堆栈顶部的元素。</li><li><code>int getMin()</code> 获取堆栈中的最小元素。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MinStack</span> &#123;<br>    LinkedList&lt;Integer&gt; stack;<br>    LinkedList&lt;Integer&gt; minStack;<span class="hljs-comment">// 使用一个栈来存储最小值</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MinStack</span><span class="hljs-params">()</span> &#123;<br>        stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<br>        minStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<br>        minStack.push(Integer.MAX_VALUE);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        stack.push(val);<br>        minStack.push(Math.min(minStack.peek(), val));<span class="hljs-comment">// 与当前最小值比较</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        stack.pop();<br>        minStack.pop();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">top</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> stack.peek();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMin</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> minStack.peek();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-6Q227-基本计算器-II"><a href="#1-6-6Q227-基本计算器-II" class="headerlink" title="1.6 6Q227.基本计算器 II"></a>1.6 6Q227.基本计算器 II</h3><p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值。<br>整数除法仅保留整数部分。<br>你可以假设给定的表达式总是有效的。所有中间结果将在 <code>[-231, 231 - 1]</code> 的范围内。<br>**注意：**不允许使用任何将字符串作为数学表达式计算的内置函数，比如 <code>eval()</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-comment">// 由于乘除优先于加减计算，因此不妨考虑先进行所有乘除运算，并将这些乘除运算后的整数值放回原表达式的相应位置，</span><br>    Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> <span class="hljs-variable">preSign</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;+&#x27;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (Character.isDigit(s.charAt(i))) &#123;<span class="hljs-comment">// 如果是数字需要记录</span><br>            num = num * <span class="hljs-number">10</span> + (s.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>);<span class="hljs-comment">// 转换成数字</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (!Character.isDigit(s.charAt(i)) &amp;&amp; s.charAt(i) != <span class="hljs-string">&#x27; &#x27;</span> || i == n - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 不是数字、空格，或者已经是最后一个字符</span><br>            <span class="hljs-keyword">switch</span> (preSign) &#123;<br>                    <span class="hljs-comment">// 如果是+或者-则先将数字存入</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                    stack.push(num);<br>                    <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-comment">// 是*/则直接运算</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                    stack.push(-num);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                    stack.push(stack.pop() * num);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-comment">// 这里说明是最后一个字符</span><br>                    stack.push(stack.pop() / num);<br>            &#125;<br>            preSign = s.charAt(i);<br>            num = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>        <span class="hljs-comment">// 现在只有+运算（减法已经变成负数）</span><br>        ans += stack.pop();<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-7-7Q739-每日温度"><a href="#1-7-7Q739-每日温度" class="headerlink" title="1.7 7Q739.每日温度"></a>1.7 7Q739.每日温度</h3><p><a href="https://oi-wiki.org/ds/monotonous-stack/">单调栈 - OI Wiki (oi-wiki.org)</a></p><p>给定一个整数数组 <code>temperatures</code> ，表示每天的温度，返回一个数组 <code>answer</code> ，其中 <code>answer[i]</code> 是指对于第 <code>i</code> 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 <code>0</code> 来代替。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这里的单调栈是温度递减对应的天数</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] dailyTemperatures(<span class="hljs-type">int</span>[] temperatures) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> temperatures.length;<br>    <span class="hljs-type">int</span>[] answer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>    Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; temperatures.length; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temperature</span> <span class="hljs-operator">=</span> temperatures[i];<br>        <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; temperature &gt; temperatures[stack.peek()]) &#123;<br>            <span class="hljs-comment">// 当前温度大于单调栈存对应的栈顶温度</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> stack.pop();<span class="hljs-comment">// 弹出对应天数</span><br>            answer[day] = i - day;<span class="hljs-comment">//</span><br>        &#125;<br>        <span class="hljs-comment">// 当栈为空或者当前温度小于栈顶天数对应温度</span><br>        stack.push(i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> answer;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-8-8Q150-逆波兰表达式求值"><a href="#1-8-8Q150-逆波兰表达式求值" class="headerlink" title="1.8 8Q150.逆波兰表达式求值"></a>1.8 8Q150.逆波兰表达式求值</h3><p>给你一个字符串数组 <code>tokens</code> ，表示一个根据 <a href="https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437">逆波兰表示法</a> (后缀表达式、王道考研P89)表示的算术表达式。<br>请你计算该表达式。返回一个表示表达式值的整数。</p><blockquote><p>输入：tokens &#x3D; [“2”,”1”,”+”,”3”,”*”]<br>输出：9<br>解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) &#x3D; 9</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">evalRPN</span><span class="hljs-params">(String[] tokens)</span> &#123;<br>        Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tokens.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (isNumber(tokens[i])) &#123;<br>                <span class="hljs-comment">// 是数字则入栈</span><br>                stack.push(Integer.parseInt(tokens[i]));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 非数字则弹栈计算</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> stack.pop();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> stack.pop();<br>                <span class="hljs-keyword">switch</span> (tokens[i]) &#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>                        stack.push(x + y);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:<br>                        stack.push(x - y);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>                        stack.push(x * y);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>                        stack.push(x / y);<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack.pop();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNumber</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-keyword">return</span> !(<span class="hljs-string">&quot;+&quot;</span>.equals(token) || <span class="hljs-string">&quot;-&quot;</span>.equals(token) || <span class="hljs-string">&quot;*&quot;</span>.equals(token) || <span class="hljs-string">&quot;/&quot;</span>.equals(token));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-9-9Q394-字符串解码"><a href="#1-9-9Q394-字符串解码" class="headerlink" title="1.9 9Q394.字符串解码"></a>1.9 9Q394.字符串解码</h3><p>给定一个经过编码的字符串，返回它解码后的字符串。<br>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的 <code>encoded_string</code> 正好重复 <code>k</code> 次。注意 <code>k</code> 保证为正整数。<br>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。<br>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 <code>k</code> ，例如不会出现像 <code>3a</code> 或 <code>2[4]</code> 的输入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">decodeString</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">multi</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// 记录倍数</span><br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    Stack&lt;Integer&gt; multiStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<span class="hljs-comment">// 记录倍数</span><br>    Stack&lt;StringBuilder&gt; restack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<span class="hljs-comment">//记录一个[]的结果</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray()) &#123;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>            multiStack.push(multi);<br>            restack.push(res);<br>            multi = <span class="hljs-number">0</span>;<span class="hljs-comment">// 压栈之后归零</span><br>            res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<span class="hljs-comment">//置为空，需要记录一个新[]的内容</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;]&#x27;</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">cur_multi</span> <span class="hljs-operator">=</span> multiStack.pop();<span class="hljs-comment">// 记录最近的倍数</span><br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cur_multi; i++) &#123;<br>                <span class="hljs-comment">// 倍数拼接</span><br>                temp.append(res);<br>            &#125;<br>            <span class="hljs-comment">// 外层括号拼接</span><br>            res = restack.pop().append(temp);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>            multi = c - <span class="hljs-string">&#x27;0&#x27;</span> + multi * <span class="hljs-number">10</span>;<span class="hljs-comment">// 这里需要考虑到多位数</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 是字母则拼接</span><br>            res.append(c);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-10-10Q946-验证栈序列"><a href="#1-10-10Q946-验证栈序列" class="headerlink" title="1.10 10Q946.验证栈序列"></a>1.10 10Q946.验证栈序列</h3><p>给定 <code>pushed</code> 和 <code>popped</code> 两个序列，每个序列中的 <strong>值都不重复</strong>，只有当它们可能是在最初空栈上进行的推入 push 和弹出 pop 操作序列的结果时，返回 <code>true</code>；否则，返回 <code>false</code> 。</p><blockquote><p>输入：pushed &#x3D; [1,2,3,4,5], popped &#x3D; [4,5,3,2,1]<br>输出：true<br>解释：我们可以按以下顺序执行：<br>push(1), push(2), push(3), push(4), pop() -&gt; 4,<br>push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">validateStackSequences</span><span class="hljs-params">(<span class="hljs-type">int</span>[] pushed, <span class="hljs-type">int</span>[] popped)</span> &#123;<br>    Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; pushed.length; i++) &#123;<br>        stack.push(pushed[i]);<br>        <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() == popped[j]) &#123;<br>            stack.pop();<span class="hljs-comment">// 当栈顶元素等于pop数组的元素</span><br>            j++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> stack.isEmpty();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-11-11Q71-简化路径"><a href="#1-11-11Q71-简化路径" class="headerlink" title="1.11 11Q71.简化路径"></a>1.11 11Q71.简化路径</h3><p>给你一个字符串 <code>path</code> ，表示指向某一文件或目录的 Unix 风格 <strong>绝对路径</strong> （以 <code>&#39;/&#39;</code> 开头），请你将其转化为更加简洁的规范路径。<br>在 Unix 风格的文件系统中，一个点（<code>.</code>）表示当前目录本身；此外，两个点 （<code>..</code>） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，<code>&#39;//&#39;</code>）都被视为单个斜杠 <code>&#39;/&#39;</code> 。 对于此问题，任何其他格式的点（例如，<code>&#39;...&#39;</code>）均被视为文件&#x2F;目录名称。</p><p>—相当于规范化目录</p><blockquote><p>输入：path &#x3D; “&#x2F;home&#x2F;“<br>输出：”&#x2F;home”<br>解释：注意，最后一个目录名后面没有斜杠。 </p><p>输入：path &#x3D; “&#x2F;home&#x2F;&#x2F;foo&#x2F;“<br>输出：”&#x2F;home&#x2F;foo”<br>解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。</p></blockquote><p>1、先把路径根据<code>&quot;/&quot;</code>分割成字符串数组，建立个栈备用（最好用个可以从栈底遍历的，比如<code>LinkedlList</code>）；</p><p>2、遍历数组，遇到空串或者<code>&quot;.&quot;</code>直接跳过；遇到<code>&quot;..&quot;</code>表示的是上一级别的路径，也就是把栈中的最后一个路径移除（注意假如栈空就直接跳过），其他的字符串直接入栈（这里包括其他数量的<code>&quot;.&quot;</code>）；</p><p>3、假如栈空，直接返回默认空路径<code>&quot;/&quot;</code>，其他的情况把每个路径标记前边加个<code>&quot;/&quot;</code>之后串起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">simplifyPath</span><span class="hljs-params">(String path)</span> &#123;<br>    Stack&lt;String&gt; paths = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;String&gt;();<br>    String[] p = path.split(<span class="hljs-string">&quot;/&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; p.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (p[i].equals(<span class="hljs-string">&quot;.&quot;</span>) || p[i].length() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;<span class="hljs-comment">// 空串和当前路径“/”直接跳过</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p[i].equals(<span class="hljs-string">&quot;..&quot;</span>)) &#123;<br>            <span class="hljs-keyword">if</span> (!paths.isEmpty()) &#123;<br>                paths.pop();<span class="hljs-comment">// 上一级路径“..”弹栈</span><br>            &#125;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            paths.push(p[i]);<span class="hljs-comment">// 此时说明是目录名</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paths.size(); i++) &#123;<br>        ans.append(<span class="hljs-string">&quot;/&quot;</span>).append(paths.get(i));<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans.length() == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;/&quot;</span> : ans.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-12-12Q496-下一个更大元素i"><a href="#1-12-12Q496-下一个更大元素i" class="headerlink" title="1.12 12Q496.下一个更大元素i"></a>1.12 12Q496.下一个更大元素i</h3><p><code>nums1</code> 中数字 <code>x</code> 的 <strong>下一个更大元素</strong> 是指 <code>x</code> 在 <code>nums2</code> 中对应位置 <strong>右侧</strong> 的 <strong>第一个</strong> 比 <code>x</code> 大的元素。<br>给你两个 <strong>没有重复元素</strong> 的数组 <code>nums1</code> 和 <code>nums2</code> ，下标从 <strong>0</strong> 开始计数，其中<code>nums1</code> 是 <code>nums2</code> 的子集。<br>对于每个 <code>0 &lt;= i &lt; nums1.length</code> ，找出满足 <code>nums1[i] == nums2[j]</code> 的下标 <code>j</code> ，并且在 <code>nums2</code> 确定 <code>nums2[j]</code> 的 <strong>下一个更大元素</strong> 。如果不存在下一个更大元素，那么本次查询的答案是 <code>-1</code> 。<br>返回一个长度为 <code>nums1.length</code> 的数组 <code>ans</code> 作为答案，满足 <code>ans[i]</code> 是如上所述的 <strong>下一个更大元素</strong> 。</p><ol><li>先遍历大数组nums2，首先将第一个元素入栈；</li><li>继续遍历，当前元素小于栈顶元素时，继续将它入栈；当前元素大于栈顶元素时，栈顶元素出栈，此时应将该出栈的元素与当前元素形成key-value键值对，存入HashMap中,当前元素入栈；</li><li>当遍历完nums2后，得到nums2中元素所对应的下一个更大元素的hash表；</li><li>遍历nums1的元素在hashMap中去查找‘下一个更大元素’，当找不到时则为-1。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301136724.png" alt="|587|1000"></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] nextGreaterElement(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums1.length;<br>    <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[len];<br>    Deque&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>    HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Integer&gt;();<br>    <span class="hljs-keyword">for</span> (Integer num : nums2) &#123;<br>        <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() &lt; num) &#123;<br>            map.put(stack.pop(), num);<span class="hljs-comment">// 当前元素大于栈顶元素，</span><br>            <span class="hljs-comment">// 说明弹栈元素的右侧第一个大的元素不是当前元素</span><br>        &#125;<br>        stack.push(num);<span class="hljs-comment">// 当前元素num小于栈顶元素/栈为空，说明当前元素左边的元素下一个更大的值可能是当前元素</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums1.length; i++) &#123;<br>        ans[i] = map.getOrDefault(nums1[i], -<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>最后stack&#x3D;{2,4}，map&#x3D;{（1,3），（3,4）}</p></blockquote><h3 id="1-13-13Q503-下一个更大元素ii"><a href="#1-13-13Q503-下一个更大元素ii" class="headerlink" title="1.13 13Q503.下一个更大元素ii"></a>1.13 13Q503.下一个更大元素ii</h3><p>给定一个循环数组 <code>nums</code> （ <code>nums[nums.length - 1]</code> 的下一个元素是 <code>nums[0]</code> ），返回 <em><code>nums</code> 中每个元素的 <strong>下一个更大元素</strong></em> 。</p><p>数字 <code>x</code> 的 <strong>下一个更大的元素</strong> 是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 <code>-1</code> 。</p><blockquote><p>输入: nums &#x3D; [1,2,1]<br>输出: [2,-1,2]<br>解释: 第一个 1 的下一个更大的数是 2；<br>数字 2 找不到下一个更大的数；<br>第二个 1 的下一个最大的数需要循环搜索，结果也是 2。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] nextGreaterElements(<span class="hljs-type">int</span>[] nums) &#123;<br>    <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>    Arrays.fill(ans, -<span class="hljs-number">1</span>);<br>    Deque&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;Integer&gt;();<span class="hljs-comment">// 栈里存放的是数组下标</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-comment">// 相当于需要遍历两次</span><br>        <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; nums[i % nums.length] &gt; nums[stack.peek()]) &#123;<span class="hljs-comment">// 栈顶下标数组值小于当前数组值</span><br>            <span class="hljs-comment">// 对应下标弹栈并赋值</span><br>            ans[stack.pop()] = nums[i % nums.length];<br>        &#125;<br>        stack.push(i % nums.length);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-14-14Q901-股票价格跨度"><a href="#1-14-14Q901-股票价格跨度" class="headerlink" title="1.14 14Q901.股票价格跨度"></a>1.14 14Q901.股票价格跨度</h3><p>设计一个算法收集某些股票的每日报价，并返回该股票当日价格的 <strong>跨度</strong> 。</p><p>当日股票价格的 <strong>跨度</strong> 被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。</p><ul><li>例如，如果未来 7 天股票的价格是 <code>[100,80,60,70,60,75,85]</code>，那么股票跨度将是 <code>[1,1,1,2,1,4,6]</code> 。</li></ul><p>实现 <code>StockSpanner</code> 类：</p><ul><li><code>StockSpanner()</code> 初始化类对象。</li><li><code>int next(int price)</code> 给出今天的股价 <code>price</code> ，返回该股票当日价格的 <strong>跨度</strong> 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StockSpanner</span> &#123;<br>    <span class="hljs-comment">// 递减单调栈</span><br>    Deque&lt;<span class="hljs-type">int</span>[]&gt; stack;<br>    <span class="hljs-type">int</span> index;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StockSpanner</span><span class="hljs-params">()</span> &#123;<br>        stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>        stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123; -<span class="hljs-number">1</span>, Integer.MAX_VALUE &#125;);<br>        index = -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">next</span><span class="hljs-params">(<span class="hljs-type">int</span> price)</span> &#123;<br>        index++;<span class="hljs-comment">// 天数+1</span><br>        <span class="hljs-keyword">while</span> (stack.peek()[<span class="hljs-number">1</span>] &lt;= price) &#123;<br>            stack.pop();<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> index - stack.peek()[<span class="hljs-number">0</span>];<span class="hljs-comment">// 计算天数</span><br>        stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123; index, price &#125;);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-15-15Q316-去除重复字母"><a href="#1-15-15Q316-去除重复字母" class="headerlink" title="1.15 15Q316.去除重复字母"></a>1.15 15Q316.去除重复字母</h3><p>给你一个字符串 <code>s</code> ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 <strong>返回结果的字典序最小</strong>（要求不能打乱其他字符的相对位置）。</p><blockquote><p>输入：s &#x3D; “bcabc”<br>输出：”abc”</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">removeDuplicateLetters</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-type">boolean</span>[] vis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[<span class="hljs-number">26</span>];<span class="hljs-comment">// 记录是否已在栈内</span><br>    <span class="hljs-type">int</span>[] num = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        num[s.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>]++;<span class="hljs-comment">// 记录字符数量</span><br>    &#125;<br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> s.charAt(i);<br>        <span class="hljs-keyword">if</span> (!vis[ch - <span class="hljs-string">&#x27;a&#x27;</span>]) &#123;<br>            <span class="hljs-comment">// 未在栈内</span><br>            <span class="hljs-keyword">while</span> (sb.length() &gt; <span class="hljs-number">0</span> &amp;&amp; sb.charAt(sb.length() - <span class="hljs-number">1</span>) &gt; ch) &#123;<br>                <span class="hljs-comment">// 当栈顶字母大于当前字母且未入栈</span><br>                <span class="hljs-keyword">if</span> (num[sb.charAt(sb.length() - <span class="hljs-number">1</span>) - <span class="hljs-string">&#x27;a&#x27;</span>] &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// 说明之后还有栈顶字母，则弹栈（记录为未在栈内）</span><br>                    vis[sb.charAt(sb.length() - <span class="hljs-number">1</span>) - <span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-literal">false</span>;<br>                    sb.deleteCharAt(sb.length() - <span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 之后没有该字母</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 记录已在栈内且入栈</span><br>            vis[ch - <span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-literal">true</span>;<br>            sb.append(ch);<br>        &#125;<br>        num[ch - <span class="hljs-string">&#x27;a&#x27;</span>]--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在考虑字符 s[i]时，如果它已经存在于栈中，则不能加入字符 s[i]。为此，需要记录每个字符是否出现在栈中。</p><p>在弹出栈顶字符时，如果字符串在后面的位置上再也没有这一字符，则不能弹出栈顶字符。为此，需要记录每个字符的剩余数量，当这个值为 0 时，就不能弹出栈顶字符了。</p><p>寻找下一个更大&#x2F;小的这种题目，必选单调栈</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>队列</title>
    <link href="/2025/07/30/%E9%98%9F%E5%88%97/"/>
    <url>/2025/07/30/%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Contents"><a href="#1-Contents" class="headerlink" title="1 Contents"></a>1 Contents</h2><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">设计循环队列</td><td align="center">设计、队列、数组、链表</td></tr><tr><td align="center">用队列实现栈</td><td align="center">栈、设计、队列</td></tr></tbody></table><p><strong>优先队列</strong></p><p><strong>PriorityQueue（优先队列）</strong> 采用的是堆排序，<br>实际上是一个堆（不指定Comparator时默认为最小堆）<br>队列既可以根据元素的自然顺序来排序，也可以根据 Comparator来设置排序规则。<br>队列的头是按指定排序方式的<strong>最小元素</strong>(入队则重新排序)。如果多个元素都是最小值，则头是其中一个元素。<br>新建对象的时候可以指定一个初始容量，其容量会自动增加。</p><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">数据流中的第 K 大元素</td><td align="center">树、设计、二叉搜索树、二叉树、数据流、堆（优先队列）</td></tr><tr><td align="center">前 K 个高频元素</td><td align="center">数组、哈希表、分治、桶排序、计数、快速选择、排序、堆（优先队列）</td></tr><tr><td align="center">根据字符出现频率排序</td><td align="center">哈希表、字符串、桶排序、计数、排序、堆（优先队列）</td></tr><tr><td align="center">最接近原点的 K 个点</td><td align="center">几何、数组、数学、分治、快速选择、排序、堆（优先队列）</td></tr><tr><td align="center">划分数组为连续数字的集合</td><td align="center">贪心、数组、哈希表、排序</td></tr></tbody></table><h3 id="1-1-1Q622-设计循环队列"><a href="#1-1-1Q622-设计循环队列" class="headerlink" title="1.1 1Q622.设计循环队列"></a>1.1 1Q622.设计循环队列</h3><p>​设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。<br>循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。<br>你的实现应该支持如下操作：</p><ul><li><p><code>MyCircularQueue(k)</code>: 构造器，设置队列长度为 k 。</p></li><li><p><code>Front</code>: 从队首获取元素。如果队列为空，返回 -1 。</p></li><li><p><code>Rear</code>: 获取队尾元素。如果队列为空，返回 -1 。</p></li><li><p><code>enQueue(value)</code>: 向循环队列插入一个元素。如果成功插入则返回真。</p></li><li><p><code>deQueue()</code>: 从循环队列中删除一个元素。如果成功删除则返回真。</p></li><li><p><code>isEmpty()</code>: 检查循环队列是否为空。</p></li><li><p><code>isFull()</code>: 检查循环队列是否已满。</p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/imags/202407261118858.png" style="zoom:67%;" /></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCircularQueue</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> front;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rear;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] elements;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCircularQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> &#123;<br>        size = k + <span class="hljs-number">1</span>;<span class="hljs-comment">// 牺牲一个存储单元来区分是否队满</span><br>        elements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        rear = front = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">enQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 入队并队尾指针后移</span><br>            elements[rear] = value;<br>            rear = (rear + <span class="hljs-number">1</span>) % size;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 队首指针后移</span><br>            front = (front + <span class="hljs-number">1</span>) % size;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Front</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> elements[front];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Rear</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 注意这里不能直接返回 element[rear-1],rear=0时越界</span><br>            <span class="hljs-keyword">return</span> elements[((rear - <span class="hljs-number">1</span>) + size) % size];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> rear == front;<span class="hljs-comment">// 队首指针等于队尾指针时为空</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (rear + <span class="hljs-number">1</span>) % size == front;<span class="hljs-comment">// 牺牲一个存储单元判断队满</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-2Q225-用队列实现栈"><a href="#1-2-2Q225-用队列实现栈" class="headerlink" title="1.2 2Q225.用队列实现栈"></a>1.2 2Q225.用队列实现栈</h3><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）。</p><p>实现 <code>MyStack</code> 类：</p><ul><li><code>void push(int x)</code> 将元素 x 压入栈顶。</li><li><code>int pop()</code> 移除并返回栈顶元素。</li><li><code>int top()</code> 返回栈顶元素。</li><li><code>boolean empty()</code> 如果栈是空的，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li></ul><blockquote><p>难点在于入队的操作：需要将数据放入queue2，然后将queue1的数据全部出队放入queue2，此时此时queue2存着所有正确顺序的数据，</p><p>则需要将queueu2与queue1交换</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStack</span> &#123;<br>    Queue&lt;Integer&gt; queue1;<br>    Queue&lt;Integer&gt; queue2;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyStack</span><span class="hljs-params">()</span> &#123;<br>        queue1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<span class="hljs-comment">// 存数据</span><br>        queue2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<span class="hljs-comment">// 辅助队列</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        queue2.offer(x);<br>        <span class="hljs-keyword">while</span> (!queue1.isEmpty()) &#123;<br>            <span class="hljs-comment">// 此时queue2存着所有正确顺序的数据</span><br>            queue2.offer(queue1.poll());<br>        &#125;<br>        <span class="hljs-comment">// 交换queue1和queue2</span><br>        Queue&lt;Integer&gt; temp = queue1;<br>        queue1 = queue2;<br>        queue2 = temp;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> queue1.poll();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">top</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> queue1.peek();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">empty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> queue1.isEmpty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-3Q703-数据流中的第-K-大元素"><a href="#1-3-3Q703-数据流中的第-K-大元素" class="headerlink" title="1.3 3Q703.数据流中的第 K 大元素"></a>1.3 3Q703.数据流中的第 K 大元素</h3><p>设计一个找到数据流中第 <code>k</code> 大元素的类（class）。注意是排序后的第 <code>k</code> 大元素，不是第 <code>k</code> 个不同的元素。<br>请实现 <code>KthLargest</code> 类：</p><ul><li><code>KthLargest(int k, int[] nums)</code> 使用整数 <code>k</code> 和整数流 <code>nums</code> 初始化对象。</li><li><code>int add(int val)</code> 将 <code>val</code> 插入数据流 <code>nums</code> 后，返回当前数据流中第 <code>k</code> 大的元素。</li></ul><p>使用一个大小为 k 的优先队列来存储前 k 大的元素，其中优先队列的队头为队列中最小的元素，也就是第 k 大的元素。</p><blockquote><p>在单次插入的操作中，我们首先将元素 val 加入到优先队列中。如果此时优先队列的大小大于 k，我们需要将优先队列的队头元素弹出，以保证优先队列的大小为 k。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">KthLargest</span> &#123;<br>    PriorityQueue&lt;Integer&gt; pq;<br>    <span class="hljs-type">int</span> k;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">KthLargest</span><span class="hljs-params">(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-built_in">this</span>.k = k;<br>        pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : nums) &#123;<br>            pq.offer(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        pq.offer(val);<br>        <span class="hljs-keyword">while</span> (pq.size() &gt; k) &#123;<br>            pq.poll();<br>        &#125;<br>        <span class="hljs-keyword">return</span> pq.peek();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-4Q374-前-K-个高频元素"><a href="#1-4-4Q374-前-K-个高频元素" class="headerlink" title="1.4 4Q374.前 K 个高频元素"></a>1.4 4Q374.前 K 个高频元素</h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回其中出现频率前 <code>k</code> 高的元素。你可以按 <strong>任意顺序</strong> 返回答案。</p><blockquote><p>可以利用堆的思想：建立一个小顶堆，然后遍历「出现次数数组」：</p><p>如果堆的元素个数小于 kkk，就可以直接插入堆中。<br>如果堆的元素个数等于 kkk，则检查堆顶与当前出现次数的大小。如果堆顶更大，说明至少有 kkk 个数字的出现次数比当前值大，故舍弃当前值；否则，就弹出堆顶，并将当前值插入堆中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] topKFrequent(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k) &#123;<br>    Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : nums) &#123;<br>        <span class="hljs-comment">// 建立数字与个数的对应关系</span><br>        map.put(x, map.getOrDefault(x, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">// 自定义比较器进行排序</span><br>    PriorityQueue&lt;Map.Entry&lt;Integer, Integer&gt;&gt; pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;((e1, e2) -&gt; e2.getValue() - e1.getValue());<br>    pq.addAll(map.entrySet());<br>    <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[k];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k &amp;&amp; !pq.isEmpty(); i++) &#123;<br>        ans[i] = pq.poll().getKey();<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-5Q973-最接近原点的-K-个点"><a href="#1-5-5Q973-最接近原点的-K-个点" class="headerlink" title="1.5 5Q973.最接近原点的 K 个点"></a>1.5 5Q973.最接近原点的 K 个点</h3><p>给定一个数组 <code>points</code> ，其中 <code>points[i] = [xi, yi]</code> 表示 <strong>X-Y</strong> 平面上的一个点，并且是一个整数 <code>k</code> ，返回离原点 <code>(0,0)</code> 最近的 <code>k</code> 个点。</p><p>这里，平面上两点之间的距离是 <strong>欧几里德距离</strong>（ <code>√(x1 - x2)2 + (y1 - y2)2</code> ）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] kClosest(<span class="hljs-type">int</span>[][] points, <span class="hljs-type">int</span> k) &#123;<br>    Arrays.sort(points, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;<span class="hljs-type">int</span>[]&gt;() &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">int</span>[] point1, <span class="hljs-type">int</span>[] point2)</span> &#123;<br>            <span class="hljs-keyword">return</span> (point1[<span class="hljs-number">0</span>] * point1[<span class="hljs-number">0</span>] + point1[<span class="hljs-number">1</span>] * point1[<span class="hljs-number">1</span>])<br>                - (point2[<span class="hljs-number">0</span>] * point2[<span class="hljs-number">0</span>] + point2[<span class="hljs-number">1</span>] * point2[<span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> Arrays.copyOfRange(points, <span class="hljs-number">0</span>, k);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-6Q1296-划分数组为连续数字的集合"><a href="#1-6-6Q1296-划分数组为连续数字的集合" class="headerlink" title="1.6 6Q1296.划分数组为连续数字的集合"></a>1.6 6Q1296.划分数组为连续数字的集合</h3><p>给你一个整数数组 <code>nums</code> 和一个正整数 <code>k</code>，请你判断是否可以把这个数组划分成一些由 <code>k</code> 个连续数字组成的集合。<br>如果可以，请返回 <code>true</code>；否则，返回 <code>false</code>。</p><p>输入：nums &#x3D; [1,2,3,3,4,4,5,6], k &#x3D; 4<br>输出：true<br>解释：数组可以分成 [1,2,3,4] 和 [3,4,5,6]。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPossibleDivide</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;<br>    PriorityQueue&lt;Integer&gt; pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Integer integer : nums) &#123;<br>        pq.offer(integer);<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!pq.isEmpty()) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> pq.poll();<span class="hljs-comment">// 队首元素出队</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">// 查看是否连续</span><br>            <span class="hljs-keyword">if</span> (!pq.contains(num + <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">// 如果不包含num+1说明不连续则直接返回false</span><br>            &#125;<br>            pq.remove(++num);<span class="hljs-comment">// 包含num+1说明连续，则直接出队--这里要注意是num+1出队</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2024/09/20/%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/09/20/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="0-1-Contents"><a href="#0-1-Contents" class="headerlink" title="0.1 Contents"></a>0.1 Contents</h3><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">回文链表</td><td align="center">反转、双指针</td></tr><tr><td align="center">合并两个有序链表</td><td align="center">双指针、递归</td></tr><tr><td align="center">设计链表</td><td align="center">设计、链表</td></tr><tr><td align="center">反转链表</td><td align="center">双指针</td></tr><tr><td align="center">反转链表ii</td><td align="center">哑结点</td></tr><tr><td align="center">移除链表元素</td><td align="center">哑结点</td></tr><tr><td align="center">删除排序链表中的重复元素</td><td align="center">链表</td></tr><tr><td align="center">删除排序链表中的重复元素ii</td><td align="center">链表、双指针</td></tr><tr><td align="center">复制带随机指针的链表</td><td align="center">递归、哈希表</td></tr><tr><td align="center">旋转链表</td><td align="center">双指针</td></tr></tbody></table><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">排序链表</td><td align="center">双指针、分治、排序、归并排序</td></tr><tr><td align="center">对链表进行插入排序</td><td align="center">插入排序</td></tr></tbody></table><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">相交链表</td><td align="center">哈希表、双指针</td></tr><tr><td align="center">链表的中间结点</td><td align="center">双指针</td></tr><tr><td align="center">环形链表i</td><td align="center">链表、双指针</td></tr><tr><td align="center">环形链表ii</td><td align="center">哈希表、链表、双指针</td></tr><tr><td align="center">删除链表的倒数第 N 个结点</td><td align="center">链表、双指针</td></tr><tr><td align="center">重链表</td><td align="center">递归、链表、双指针、线性表</td></tr><tr><td align="center">两数相加</td><td align="center">链表、双指针</td></tr><tr><td align="center">两数相加ii</td><td align="center">链表、双指针</td></tr></tbody></table><h3 id="0-2-1Q234-回文链表"><a href="#0-2-1Q234-回文链表" class="headerlink" title="0.2 1Q234.回文链表"></a>0.2 1Q234.回文链表</h3><p>给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。</p><p><a href="https://blog.csdn.net/weixin_51609435/article/details/124770417?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168994342316800182734913%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168994342316800182734913&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124770417-null-null.142%5Ev90%5Econtrol,239%5Ev3%5Econtrol&utm_term=%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8&spm=1018.2226.3001.4187">题解点这里</a></p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134977.png" alt="|800"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, slow = head, fast = head;<br>    <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>        fast = fast.next.next;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> slow.next;<span class="hljs-comment">// temp指向slow的下一结点</span><br>        slow.next = cur;<span class="hljs-comment">// slow的下一结点赋值给之前的slow</span><br>        cur = slow;<br>        slow = temp;<span class="hljs-comment">// slow后移</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (fast != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 此时说明是偶数链表，为统一，slow后移</span><br>        slow = slow.next;<br>    &#125;<br>    <span class="hljs-comment">// 此时前半段链表已经反转，由cur指向第一个节点</span><br>    <span class="hljs-comment">// 后半段链表由slow指向第一个结点</span><br>    <span class="hljs-keyword">while</span> (slow != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (slow.val != cur.val) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            slow = slow.next;<br>            cur = cur.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-3-2Q21-合并两个有序链表"><a href="#0-3-2Q21-合并两个有序链表" class="headerlink" title="0.3 2Q21.合并两个有序链表"></a>0.3 2Q21.合并两个有序链表</h3><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode list1, ListNode list2)</span> &#123;<br>    <span class="hljs-comment">/**循环+双指针**/</span><br>    <span class="hljs-comment">//当某个链表为空时，返回另一个链表</span><br>    <span class="hljs-comment">// if (list1==null) return list2;</span><br>    <span class="hljs-comment">// if (list2==null) return list1;</span><br>    <span class="hljs-comment">// //定义结果节点</span><br>    <span class="hljs-comment">// ListNode resultNode=new ListNode(0);</span><br>    <span class="hljs-comment">// ListNode p=resultNode;</span><br>    <span class="hljs-comment">// while(list1!=null&amp;&amp;list2!=null)&#123;</span><br>    <span class="hljs-comment">//     if (list1.val&lt;list2.val)</span><br>    <span class="hljs-comment">//     &#123;</span><br>    <span class="hljs-comment">//         p.next=list1;</span><br>    <span class="hljs-comment">//         list1=list1.next;</span><br>    <span class="hljs-comment">//     &#125;else</span><br>    <span class="hljs-comment">//     &#123;</span><br>    <span class="hljs-comment">//         p.next=list2;</span><br>    <span class="hljs-comment">//         list2=list2.next;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">//     p=p.next;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// //当某个链表为空时</span><br>    <span class="hljs-comment">// if (list1!=null)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     p.next=list1;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// if (list2!=null)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     p.next=list2;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// return resultNode.next;</span><br>    <span class="hljs-comment">/**递归写法**/</span><br>    <span class="hljs-keyword">if</span> (list1==<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> list2;<br>    <span class="hljs-keyword">if</span> (list2==<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> list1;<br>    <span class="hljs-keyword">if</span>(list1.val&lt;list2.val)&#123;<br>        list1.next=mergeTwoLists(list1.next,list2);<br>        <span class="hljs-keyword">return</span> list1;<br>    &#125;<br>    list2.next=mergeTwoLists(list2.next,list1);<br>    <span class="hljs-keyword">return</span> list2;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-4-3Q707-设计链表"><a href="#0-4-3Q707-设计链表" class="headerlink" title="0.4 3Q707.设计链表"></a>0.4 3Q707.设计链表</h3><p>你可以选择使用单链表或者双链表，设计并实现自己的链表。<br>单链表中的节点应该具备两个属性：val 和 next 。val 是当前节点的值，next 是指向下一个节点的指针&#x2F;引用。<br>如果是双向链表，则还需要属性 prev 以指示链表中的上一个节点。假设链表中的所有节点下标从 0 开始。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLinkedList</span> &#123;<br>    <span class="hljs-type">int</span> size;<br>    ListNode head;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyLinkedList</span><span class="hljs-params">()</span> &#123;<br>        size = <span class="hljs-number">0</span>;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取链表中下标为 index 的节点的值。如果下标无效，则返回 -1 。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= size) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= index; i++) &#123;<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cur.val;<br>    &#125;<br><br>    <span class="hljs-comment">// 将一个值为 val 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtHead</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(<span class="hljs-number">0</span>, val);<br>    &#125;<br><br>    <span class="hljs-comment">// 将一个值为 val 的节点追加到链表中作为链表的最后一个元素。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtTail</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(size, val);<br>    &#125;<br><br>    <span class="hljs-comment">// 将一个值为 val 的节点插入到链表中下标为 index 的节点之前。如果 index 等于链表的长度，那么该节点会被追加到链表的末尾。如果 index</span><br>    <span class="hljs-comment">// 比长度更大，该节点将 不会插入 到链表中。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; size) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-comment">// 插入到index之前</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(val);<br>        temp.next = cur.next;<br>        cur.next = temp;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果下标有效，则删除链表中下标为 index 的节点。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= size) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-comment">// 前一个结点</span><br>        cur.next = cur.next.next;<br>        size--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-5-4Q206-反转链表"><a href="#0-5-4Q206-反转链表" class="headerlink" title="0.5 4Q206.反转链表"></a>0.5 4Q206.反转链表</h3><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//迭代实现</span><br><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-comment">// pre记录前一个节点（因为链表没有指向前一个的指针），next记录下一个节点</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, next;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        next = cur.next;<span class="hljs-comment">// next指向下一个节点</span><br>        cur.next = pre;<span class="hljs-comment">// 当前节点指向前一个节点</span><br>        pre = cur;<span class="hljs-comment">// 前一个节点指向当前节点</span><br>        cur = next;<span class="hljs-comment">// 当前节点指向下一个节点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br><span class="hljs-comment">//递归实现</span><br><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-comment">// 从后往前两两反转</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">new_head</span> <span class="hljs-operator">=</span> reverseList(head.next);<br>    <span class="hljs-comment">// 这里是两个节点的反转</span><br>    head.next.next = head;<br>    head.next = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> new_head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-6-5Q92-反转链表ii"><a href="#0-6-5Q92-反转链表ii" class="headerlink" title="0.6 5Q92.反转链表ii"></a>0.6 5Q92.反转链表ii</h3><p>给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;&#x3D; right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。</p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134978.png" alt="|537|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>    <span class="hljs-comment">// 使用哑结点,避免讨论（[1,2],1,1的情况下避免讨论）</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>    dummyNode.next = head;<br><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> dummyNode, suc;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; left - <span class="hljs-number">1</span>; i++) &#123;<br>        pre = pre.next;<span class="hljs-comment">// pre指向left结点的前一个结点</span><br>    &#125;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">leftNode</span> <span class="hljs-operator">=</span> dummyNode, rightNode = dummyNode;<br>    leftNode = pre.next;<span class="hljs-comment">// 指向left结点</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; right; i++) &#123;<br>        rightNode = rightNode.next;<span class="hljs-comment">// 指向right结点</span><br>    &#125;<br>    suc = rightNode.next;<span class="hljs-comment">// 指向right后一结点</span><br>    <span class="hljs-comment">// 截断链表,取出要反转的部分</span><br>    pre.next = <span class="hljs-literal">null</span>;<br>    rightNode.next = <span class="hljs-literal">null</span>;<br>    reverseLinkedList(leftNode);<span class="hljs-comment">// 反转链表</span><br><br>    <span class="hljs-comment">// 连上链表</span><br>    leftNode.next = suc;<br>    pre.next = rightNode;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseLinkedList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-comment">// 反转链表</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> cur.next;<br>        cur.next = pre;<br>        pre = cur;<br>        cur = next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-7-6Q203-移除链表元素"><a href="#0-7-6Q203-移除链表元素" class="headerlink" title="0.7 6Q203.移除链表元素"></a>0.7 6Q203.移除链表元素</h3><p>给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val &#x3D;&#x3D; val 的节点，并返回 新的头节点 。</p><ol><li>建一个「虚拟头节点」dummy 以减少边界判断，往后的答案链表会接在 dummy 后面</li><li>使用 tail 代表当前有效链表的结尾</li><li>通过原输入的 head 指针进行链表扫描</li></ol><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/solution/yi-chu-lian-biao-yuan-su-by-leetcode-sol-654m/">题解点这里</a></p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134979.png" alt="|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeElements</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>    dummyNode.next = head;<span class="hljs-comment">//这里.next=head是防止只有一个节点时下面的while会报错！！！！</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> dummyNode;<br>    <span class="hljs-keyword">while</span> (tail.next != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (tail.next.val == val) &#123;<br>            <span class="hljs-comment">//这里做到删除的作用</span><br>            tail.next = tail.next.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tail = tail.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-8-7Q83-删除排序链表中的重复元素"><a href="#0-8-7Q83-删除排序链表中的重复元素" class="headerlink" title="0.8 7Q83.删除排序链表中的重复元素"></a>0.8 7Q83.删除排序链表中的重复元素</h3><p>给定一个已排序的链表的头 head ， 删除所有重复的元素，使每个元素只出现一次 。返回 已排序的链表 。<br>几乎所有的链表题目，都具有相似的解题思路。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span> &amp;&amp; cur.next != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">// 需要控制空链表</span><br>        <span class="hljs-keyword">if</span> (cur.val == cur.next.val) &#123;<br>            <span class="hljs-comment">// 当前结点数据等于下一结点数据，则指向下下结点</span><br>            cur.next = cur.next.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cur = cur.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-9-8Q82-删除排序链表中的重复元素-ii"><a href="#0-9-8Q82-删除排序链表中的重复元素-ii" class="headerlink" title="0.9 8Q82.删除排序链表中的重复元素-ii"></a>0.9 8Q82.删除排序链表中的重复元素-ii</h3><p>给定一个已排序的链表的头 head ， 删除原始链表中所有重复数字的节点，只留下不同的数字 。返回 已排序的链表 。</p><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/solution/tong-yong-shan-chu-zhong-fu-jie-dian-lia-od9g/">题解点这里</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dumyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> dumyNode;<br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span> || head.val != head.next.val) &#123;<br>            <span class="hljs-comment">// head 已经没有下一个节点，head 可以被插入</span><br>            <span class="hljs-comment">// head 有一下个节点，但是值与 head 不相同，head 可以被插入</span><br>            tail.next = head;<span class="hljs-comment">// tail的next指向head</span><br>            tail = head;<span class="hljs-comment">// head赋值给当前的tail</span><br>        &#125;<br>        <span class="hljs-keyword">while</span> (head.next != <span class="hljs-literal">null</span> &amp;&amp; head.val == head.next.val) &#123;<br>            <span class="hljs-comment">// 和下一结点相等时直接跳过</span><br>            head = head.next;<br>        &#125;<br>        <span class="hljs-comment">// 赋值完成跳过或者跳过当前相等的节点</span><br>        head = head.next;<br>    &#125;<br>    tail.next = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> dumyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-10-9Q328-奇偶链表"><a href="#0-10-9Q328-奇偶链表" class="headerlink" title="0.10 9Q328.奇偶链表"></a>0.10 9Q328.奇偶链表</h3><p>给定单链表的头节点 <code>head</code> ，将所有索引为奇数的节点和索引为偶数的节点分别组合在一起，然后返回重新排序的列表。<br><strong>第一个</strong>节点的索引被认为是 <strong>奇数</strong> ， <strong>第二个</strong>节点的索引为 <strong>偶数</strong> ，以此类推。<br>请注意，偶数组和奇数组内部的相对顺序应该与输入时保持一致。</p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301131237.png" alt="|675"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">oddEvenList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">odd</span> <span class="hljs-operator">=</span> head, even = head.next;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">evenHead</span> <span class="hljs-operator">=</span> even;<span class="hljs-comment">// 记录第一个偶数结点</span><br>    <span class="hljs-comment">// ListNode cur = head;</span><br>    <span class="hljs-keyword">while</span> (even != <span class="hljs-literal">null</span> &amp;&amp; even.next != <span class="hljs-literal">null</span>) &#123;<br>        odd.next = even.next;<br>        odd = odd.next;<br>        even.next = odd.next;<br>        even = even.next;<br>    &#125;<br>    odd.next = evenHead;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-11-10Q138-复制带随机指针的链表"><a href="#0-11-10Q138-复制带随机指针的链表" class="headerlink" title="0.11 10Q138.复制带随机指针的链表"></a>0.11 10Q138.复制带随机指针的链表</h3><p>给你一个长度为 <code>n</code> 的链表，每个节点包含一个额外增加的随机指针 <code>random</code> ，该指针可以指向链表中的任何节点或空节点。<br>构造这个链表的 <strong><a href="https://baike.baidu.com/item/%E6%B7%B1%E6%8B%B7%E8%B4%9D/22785317?fr=aladdin">深拷贝</a></strong>。 深拷贝应该正好由 <code>n</code> 个 <strong>全新</strong> 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 <code>next</code> 指针和 <code>random</code> 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。<strong>复制链表中的指针都不应指向原链表中的节点</strong> 。<br>例如，如果原链表中有 <code>X</code> 和 <code>Y</code> 两个节点，其中 <code>X.random --&gt; Y</code> 。那么在复制链表中对应的两个节点 <code>x</code> 和 <code>y</code> ，同样有 <code>x.random --&gt; y</code> 。<br>返回复制链表的头节点。<br>用一个由 <code>n</code> 个节点组成的链表来表示输入&#x2F;输出中的链表。每个节点用一个 <code>[val, random_index]</code> 表示：</p><ul><li><code>val</code>：一个表示 <code>Node.val</code> 的整数。</li><li><code>random_index</code>：随机指针指向的节点索引（范围从 <code>0</code> 到 <code>n-1</code>）；如果不指向任何节点，则为 <code>null</code> 。<br>你的代码 <strong>只</strong> 接受原链表的头节点 <code>head</code> 作为传入参数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    Map&lt;Node, Node&gt; nodeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">copyRandomList</span><span class="hljs-params">(Node head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!nodeMap.containsKey(head)) &#123;<br>            <span class="hljs-comment">// 需要防止重复，.next和.random可能会重复</span><br>            <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(head.val);<span class="hljs-comment">// 复制一份</span><br>            nodeMap.put(head, newNode);<br>            newNode.next = copyRandomList(head.next);<br>            newNode.random = copyRandomList(head.random);<br>        &#125;<br>        <span class="hljs-keyword">return</span> nodeMap.get(head);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-12-11Q61-旋转链表"><a href="#0-12-11Q61-旋转链表" class="headerlink" title="0.12 11Q61.旋转链表"></a>0.12 11Q61.旋转链表</h3><p>给你一个链表的头节点 <code>head</code> ，旋转链表，将链表每个节点向右移动 <code>k</code> 个位置。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134980.png" alt="|1000"></p><blockquote><p>输入：head &#x3D; [1,2,3,4,5], k &#x3D; 2<br>输出：[4,5,1,2,3]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第一次没看题解过Medium，虽然runtime beats 4.68 %</span><br><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">rotateRight</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span> || k == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        p = p.next;<br>        size++;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (k &gt; size) &#123;<br>        k -= size;<br>    &#125;<br><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>    dummyNode.next = head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> dummyNode, cur = dummyNode;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size - k; i++) &#123;<br>        pre = pre.next;<br>    &#125;<br>    cur = pre.next;<br>    <span class="hljs-keyword">if</span> (cur.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 说明是最后一个结点</span><br>        pre.next = <span class="hljs-literal">null</span>;<br>        cur.next = dummyNode.next;<br>        dummyNode.next = cur;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> pre.next;<br>        pre.next = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-literal">null</span>) &#123;<br>            cur = cur.next;<br>        &#125;<br>        cur.next = dummyNode.next;<br>        dummyNode.next = q;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//现在变成100%了，不容易啊</span><br><span class="hljs-comment">//先使原链表变成指向第二个结点的循环链表</span><br><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">rotateRight</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        p = p.next;<br>        size++;<br>    &#125;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>    dummyNode.next = head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> dummyNode, cur = dummyNode;<br>    <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-literal">null</span>) &#123;<br>        cur = cur.next;<br>    &#125;<br>    cur.next = dummyNode.next;<span class="hljs-comment">// 变成循环链表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size - k % size; i++) &#123;<br>        pre = pre.next;<br>    &#125;<br>    dummyNode.next = pre.next;<br>    pre.next = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-13-12Q148-排序链表"><a href="#0-13-12Q148-排序链表" class="headerlink" title="0.13 12Q148.排序链表"></a>0.13 12Q148.排序链表</h3><p>给你链表的头结点 <code>head</code> ，请将其按 <strong>升序</strong> 排列并返回 <strong>排序后的链表</strong> 。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134981.png" alt="|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">sortList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> mergeSort(head);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">mergeSort</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br><br>        <span class="hljs-comment">// 快慢指针找中点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>            fast = fast.next.next;<br>            pre = slow;<br>            slow = slow.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (pre != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 截断链表</span><br>            pre.next = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> mergeSort(head);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> mergeSort(slow);<br>        <span class="hljs-keyword">return</span> merge(left, right);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">merge</span><span class="hljs-params">(ListNode first, ListNode second)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> dummy;<br>        <span class="hljs-keyword">while</span> (first != <span class="hljs-literal">null</span> &amp;&amp; second != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (first.val &lt; second.val) &#123;<br>                cur.next = first;<br>                cur = cur.next;<br>                first = first.next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cur.next = second;<br>                cur = cur.next;<br>                second = second.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (first != <span class="hljs-literal">null</span>) &#123;<br>            cur.next = first;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (second != <span class="hljs-literal">null</span>) &#123;<br>            cur.next = second;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-14-13Q147-对链表进行插入排序"><a href="#0-14-13Q147-对链表进行插入排序" class="headerlink" title="0.14 13Q147.对链表进行插入排序"></a>0.14 13Q147.对链表进行插入排序</h3><p>给定单个链表的头 <code>head</code> ，使用 <strong>插入排序</strong> 对链表进行排序，并返回 <em>排序后链表的头</em> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">insertionSortList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    dummyNode.next = head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">lastSorted</span> <span class="hljs-operator">=</span> head, cur = lastSorted.next;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (lastSorted.val &lt;= cur.val) &#123;<br>            lastSorted = lastSorted.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> dummyNode;<br>            <span class="hljs-keyword">while</span> (p.next.val &lt;= cur.val) &#123;<span class="hljs-comment">// 找到cur结点插入的位置</span><br>                p = p.next;<br>            &#125;<br>            <span class="hljs-comment">// 插入结点</span><br>            lastSorted.next = cur.next;<br>            cur.next = p.next;<br>            p.next = cur;<br>        &#125;<br>        <span class="hljs-comment">// 移动到下一结点</span><br>        cur = lastSorted.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-15-14Q160-相交链表"><a href="#0-15-14Q160-相交链表" class="headerlink" title="0.15 14Q160.相交链表"></a>0.15 14Q160.相交链表</h3><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> 。</p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301131239.png" alt="image-20230725204058419|725"></p><blockquote><p>输入：intersectVal &#x3D; 8, listA &#x3D; [4,1,8,4,5], listB &#x3D; [5,6,1,8,4,5], skipA &#x3D; 2, skipB &#x3D; 3<br>输出：Intersected at ‘8’<br>解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。<br>从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。<br>在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。<br>— 请注意相交节点的值不为 1，因为在链表 A 和链表 B 之中值为 1 的节点 (A 中第二个节点和 B 中第三个节点) 是不同的节点。换句话说，它们在内存中指向两个不同的位置，而链表 A 和链表 B 中值为 8 的节点 (A 中第三个节点，B 中第四个节点) 在内存中指向相同的位置。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headA == <span class="hljs-literal">null</span> || headB == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    Set&lt;ListNode&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> headA;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        visited.add(p);<span class="hljs-comment">//使用hash表将链表元素存入其中</span><br>        p = p.next;<br>    &#125;<br>    p = headB;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (visited.contains(p)) &#123;<span class="hljs-comment">//若包含，则返回该结点</span><br>            <span class="hljs-keyword">return</span> p;<br>        &#125;<br>        p = p.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>[使用双指针的题解](<a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/solutions/12624/intersection-of-two-linked-lists-shuang-zhi-zhen-l/">160. 相交链表 - 力扣（LeetCode）</a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pA</span> <span class="hljs-operator">=</span> headA, pB = headB;<br>    <span class="hljs-keyword">while</span> (pA != pB) &#123;<br>        pA = pA != <span class="hljs-literal">null</span> ? pA.next : headB;<br>        pB = pB != <span class="hljs-literal">null</span> ? pB.next : headA;<br>    &#125;<br>    <span class="hljs-keyword">return</span> A;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>若两个链表相交，则A第二次遍历到相交结点与B第二次遍历到相交结点<strong>同时到达</strong></p></blockquote><h3 id="0-16-15Q876-链表的中间结点"><a href="#0-16-15Q876-链表的中间结点" class="headerlink" title="0.16 15Q876.链表的中间结点"></a>0.16 15Q876.链表的中间结点</h3><p>给你单链表的头结点 <code>head</code> ，请你找出并返回链表的中间结点。<br>如果有两个中间结点，则返回第二个中间结点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">middleNode</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        p = p.next;<br>        size++;<br>    &#125;<br>    p = head;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size / <span class="hljs-number">2</span>; i++) &#123;<br>        p = p.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">使用快慢指针解决<br> <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">middleNode</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head, fast = head;<br>    <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>        slow = slow.next;<br>        fast = fast.next.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> slow;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-17-Q141-环形链表i"><a href="#0-17-Q141-环形链表i" class="headerlink" title="0.17 Q141.环形链表i"></a>0.17 Q141.环形链表i</h3><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。<br>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况。<br><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134982.png" alt="|648|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//当链表为空或者只有一个元素时，返回非循环链表，防止下面的ListNode quick = head.next报错</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//快慢指针</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">quick</span> <span class="hljs-operator">=</span> head.next;<br>    <span class="hljs-keyword">while</span> (slow != quick) &#123;<br>        <span class="hljs-keyword">if</span> (quick.next == <span class="hljs-literal">null</span> || quick.next.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//快指针走两步，若是循环链表，快指针会追上慢指针</span><br>        slow = slow.next;<br>        quick = quick.next.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-18-17Q142-环形链表ii"><a href="#0-18-17Q142-环形链表ii" class="headerlink" title="0.18 17Q142.环形链表ii"></a>0.18 17Q142.环形链表ii</h3><p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em><br>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。<br><strong>不允许修改</strong> 链表。</p><blockquote><p>同样使用快慢指针求解    </p><p><strong>&#x2F;&#x2F;快指针走两步，若是循环链表，快指针会追上慢指针</strong></p><p>slow &#x3D; slow.next;</p><p>quick &#x3D; quick.next.next;</p></blockquote><h3 id="0-19-18Q-19删除链表的倒数第-N-个结点"><a href="#0-19-18Q-19删除链表的倒数第-N-个结点" class="headerlink" title="0.19 18Q.19删除链表的倒数第 N 个结点"></a>0.19 18Q.19删除链表的倒数第 N 个结点</h3><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134983.png" alt="|551|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>    dummyNode.next = head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head, q = dummyNode;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        p = p.next;<br>        size++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size - n; i++) &#123;<br>        <span class="hljs-comment">//这个地方有点小坑，需要考虑到[1] 1和[1,2] 2</span><br>        q = q.next;<span class="hljs-comment">// 此时q指向要删除的倒数第n个结点的前一个结点</span><br>    &#125;<br>    q.next = q.next.next;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-20-19Q143-重排链表"><a href="#0-20-19Q143-重排链表" class="headerlink" title="0.20 19Q143.重排链表"></a>0.20 19Q143.重排链表</h3><p>给定一个单链表 <code>L</code> 的头节点 <code>head</code> ，单链表 <code>L</code> 表示为：<br>L0 → L1 → … → Ln - 1 → Ln<br>请将其重新排列后变为：<br>L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …<br>不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301131240.png" alt="|650"></p><blockquote><p><strong>递归的方法是将最后一个结点插入到head之后</strong></p><p><strong>还可以根据线性表的特性转换成线性表研究</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reorderList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (p.next.next != <span class="hljs-literal">null</span>) &#123;<br>        p = p.next;<span class="hljs-comment">// 找到倒数第二个结点</span><br>    &#125;<br>    <span class="hljs-comment">// 将最后一个结点插入到head之后</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">suc</span> <span class="hljs-operator">=</span> p.next;<br>    p.next = <span class="hljs-literal">null</span>;<br>    suc.next = head.next;<br>    head.next = suc;<br><br>    reorderList(suc.next);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-21-20Q2-两数相加"><a href="#0-21-20Q2-两数相加" class="headerlink" title="0.21 20Q2.两数相加"></a>0.21 20Q2.两数相加</h3><p>给你两个 <strong>非空</strong>的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。<br>请你将两个数相加，并以相同形式返回一个表示和的链表。<br>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134984.png" alt="|445|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>    <span class="hljs-comment">//定义一个指向结果的指针</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//定义一个移动指针</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> pre;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//进位</span><br>    <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span> || l2 != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">//l1/l2是否为null，不是null取值，是null取0</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> l1 != <span class="hljs-literal">null</span> ? l1.val : <span class="hljs-number">0</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> l2 != <span class="hljs-literal">null</span> ? l2.val : <span class="hljs-number">0</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> x + y + carry;<br>      <span class="hljs-comment">//计算进位</span><br>      carry = sum / <span class="hljs-number">10</span>;<br>      <span class="hljs-comment">//计算节点值</span><br>      sum = sum % <span class="hljs-number">10</span>;<br>      <span class="hljs-comment">//将创建该值对应的节点，并将cur指向该节点</span><br>      cur.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum);<br>      <span class="hljs-comment">//指针后移</span><br>      cur = cur.next;<br>      <span class="hljs-comment">//如果后一位不是null，则后移</span><br>      <span class="hljs-keyword">if</span> (l1 != <span class="hljs-literal">null</span>) l1 = l1.next;<br>      <span class="hljs-keyword">if</span> (l2 != <span class="hljs-literal">null</span>) l2 = l2.next;<br>    &#125;<br>    <span class="hljs-comment">//当最后两个节点（首位）有进位，则需要新建节点</span><br>    <span class="hljs-keyword">if</span> (carry == <span class="hljs-number">1</span>) &#123;<br>      cur.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(carry);<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-22-21Q445-两数相加ii"><a href="#0-22-21Q445-两数相加ii" class="headerlink" title="0.22 21Q445.两数相加ii"></a>0.22 21Q445.两数相加ii</h3><p>给你两个 <strong>非空</strong> 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134985.png" alt="|1000"></p><blockquote><p>这里的进阶版需要先反转再相加，返回相加之和的反转</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        l1 = reverseList(l1);<br>        l2 = reverseList(l2);<br>        <span class="hljs-keyword">return</span> reverseList(addNumbers(l1, l2));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode list)</span> &#123;<br>        <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span> || list.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> list;<br>        &#125;<br>        <span class="hljs-comment">// pre记录前一个节点（因为链表没有指向前一个的指针），next记录下一个节点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, next;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> list;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>            next = cur.next;<span class="hljs-comment">// next指向下一个节点</span><br>            cur.next = pre;<span class="hljs-comment">// 当前节点指向前一个节点</span><br>            pre = cur;<span class="hljs-comment">// 前一个节点指向当前节点</span><br>            cur = next;<span class="hljs-comment">// 当前节点指向下一个节点</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">addNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-comment">// 定义一个指向结果的指针</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 定义一个移动指针</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> pre;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 进位</span><br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span> || l2 != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// l1/l2是否为null，不是null取值，是null取0</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> l1 != <span class="hljs-literal">null</span> ? l1.val : <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> l2 != <span class="hljs-literal">null</span> ? l2.val : <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> x + y + carry;<br>            <span class="hljs-comment">// 计算进位</span><br>            carry = sum / <span class="hljs-number">10</span>;<br>            <span class="hljs-comment">// 计算节点值</span><br>            sum = sum % <span class="hljs-number">10</span>;<br>            <span class="hljs-comment">// 将创建该值对应的节点，并将cur指向该节点</span><br>            cur.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum);<br>            <span class="hljs-comment">// 指针后移</span><br>            cur = cur.next;<br>            <span class="hljs-comment">// 如果后一位不是null，则后移</span><br>            <span class="hljs-keyword">if</span> (l1 != <span class="hljs-literal">null</span>)<br>                l1 = l1.next;<br>            <span class="hljs-keyword">if</span> (l2 != <span class="hljs-literal">null</span>)<br>                l2 = l2.next;<br>        &#125;<br>        <span class="hljs-comment">// 当最后两个节点（首位）有进位，则需要新建节点</span><br>        <span class="hljs-keyword">if</span> (carry == <span class="hljs-number">1</span>) &#123;<br>            cur.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(carry);<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
