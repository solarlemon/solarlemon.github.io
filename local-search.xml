<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>队列</title>
    <link href="/2025/07/30/%E9%98%9F%E5%88%97/"/>
    <url>/2025/07/30/%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Contents"><a href="#1-Contents" class="headerlink" title="1 Contents"></a>1 Contents</h2><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">设计循环队列</td><td align="center">设计、队列、数组、链表</td></tr><tr><td align="center">用队列实现栈</td><td align="center">栈、设计、队列</td></tr></tbody></table><p><strong>优先队列</strong></p><p><strong>PriorityQueue（优先队列）</strong> 采用的是堆排序，<br>实际上是一个堆（不指定Comparator时默认为最小堆）<br>队列既可以根据元素的自然顺序来排序，也可以根据 Comparator来设置排序规则。<br>队列的头是按指定排序方式的<strong>最小元素</strong>(入队则重新排序)。如果多个元素都是最小值，则头是其中一个元素。<br>新建对象的时候可以指定一个初始容量，其容量会自动增加。</p><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">数据流中的第 K 大元素</td><td align="center">树、设计、二叉搜索树、二叉树、数据流、堆（优先队列）</td></tr><tr><td align="center">前 K 个高频元素</td><td align="center">数组、哈希表、分治、桶排序、计数、快速选择、排序、堆（优先队列）</td></tr><tr><td align="center">根据字符出现频率排序</td><td align="center">哈希表、字符串、桶排序、计数、排序、堆（优先队列）</td></tr><tr><td align="center">最接近原点的 K 个点</td><td align="center">几何、数组、数学、分治、快速选择、排序、堆（优先队列）</td></tr><tr><td align="center">划分数组为连续数字的集合</td><td align="center">贪心、数组、哈希表、排序</td></tr></tbody></table><h3 id="1-1-1Q622-设计循环队列"><a href="#1-1-1Q622-设计循环队列" class="headerlink" title="1.1 1Q622.设计循环队列"></a>1.1 1Q622.设计循环队列</h3><p>​设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。<br>循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。<br>你的实现应该支持如下操作：</p><ul><li><p><code>MyCircularQueue(k)</code>: 构造器，设置队列长度为 k 。</p></li><li><p><code>Front</code>: 从队首获取元素。如果队列为空，返回 -1 。</p></li><li><p><code>Rear</code>: 获取队尾元素。如果队列为空，返回 -1 。</p></li><li><p><code>enQueue(value)</code>: 向循环队列插入一个元素。如果成功插入则返回真。</p></li><li><p><code>deQueue()</code>: 从循环队列中删除一个元素。如果成功删除则返回真。</p></li><li><p><code>isEmpty()</code>: 检查循环队列是否为空。</p></li><li><p><code>isFull()</code>: 检查循环队列是否已满。</p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/imags/202407261118858.png" style="zoom:67%;" /></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCircularQueue</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> front;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rear;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] elements;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCircularQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> &#123;<br>        size = k + <span class="hljs-number">1</span>;<span class="hljs-comment">// 牺牲一个存储单元来区分是否队满</span><br>        elements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        rear = front = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">enQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 入队并队尾指针后移</span><br>            elements[rear] = value;<br>            rear = (rear + <span class="hljs-number">1</span>) % size;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 队首指针后移</span><br>            front = (front + <span class="hljs-number">1</span>) % size;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Front</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> elements[front];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Rear</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 注意这里不能直接返回 element[rear-1],rear=0时越界</span><br>            <span class="hljs-keyword">return</span> elements[((rear - <span class="hljs-number">1</span>) + size) % size];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> rear == front;<span class="hljs-comment">// 队首指针等于队尾指针时为空</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (rear + <span class="hljs-number">1</span>) % size == front;<span class="hljs-comment">// 牺牲一个存储单元判断队满</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-2Q225-用队列实现栈"><a href="#1-2-2Q225-用队列实现栈" class="headerlink" title="1.2 2Q225.用队列实现栈"></a>1.2 2Q225.用队列实现栈</h3><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）。</p><p>实现 <code>MyStack</code> 类：</p><ul><li><code>void push(int x)</code> 将元素 x 压入栈顶。</li><li><code>int pop()</code> 移除并返回栈顶元素。</li><li><code>int top()</code> 返回栈顶元素。</li><li><code>boolean empty()</code> 如果栈是空的，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li></ul><blockquote><p>难点在于入队的操作：需要将数据放入queue2，然后将queue1的数据全部出队放入queue2，此时此时queue2存着所有正确顺序的数据，</p><p>则需要将queueu2与queue1交换</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStack</span> &#123;<br>    Queue&lt;Integer&gt; queue1;<br>    Queue&lt;Integer&gt; queue2;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyStack</span><span class="hljs-params">()</span> &#123;<br>        queue1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<span class="hljs-comment">// 存数据</span><br>        queue2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<span class="hljs-comment">// 辅助队列</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        queue2.offer(x);<br>        <span class="hljs-keyword">while</span> (!queue1.isEmpty()) &#123;<br>            <span class="hljs-comment">// 此时queue2存着所有正确顺序的数据</span><br>            queue2.offer(queue1.poll());<br>        &#125;<br>        <span class="hljs-comment">// 交换queue1和queue2</span><br>        Queue&lt;Integer&gt; temp = queue1;<br>        queue1 = queue2;<br>        queue2 = temp;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> queue1.poll();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">top</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> queue1.peek();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">empty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> queue1.isEmpty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-3Q703-数据流中的第-K-大元素"><a href="#1-3-3Q703-数据流中的第-K-大元素" class="headerlink" title="1.3 3Q703.数据流中的第 K 大元素"></a>1.3 3Q703.数据流中的第 K 大元素</h3><p>设计一个找到数据流中第 <code>k</code> 大元素的类（class）。注意是排序后的第 <code>k</code> 大元素，不是第 <code>k</code> 个不同的元素。<br>请实现 <code>KthLargest</code> 类：</p><ul><li><code>KthLargest(int k, int[] nums)</code> 使用整数 <code>k</code> 和整数流 <code>nums</code> 初始化对象。</li><li><code>int add(int val)</code> 将 <code>val</code> 插入数据流 <code>nums</code> 后，返回当前数据流中第 <code>k</code> 大的元素。</li></ul><p>使用一个大小为 k 的优先队列来存储前 k 大的元素，其中优先队列的队头为队列中最小的元素，也就是第 k 大的元素。</p><blockquote><p>在单次插入的操作中，我们首先将元素 val 加入到优先队列中。如果此时优先队列的大小大于 k，我们需要将优先队列的队头元素弹出，以保证优先队列的大小为 k。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">KthLargest</span> &#123;<br>    PriorityQueue&lt;Integer&gt; pq;<br>    <span class="hljs-type">int</span> k;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">KthLargest</span><span class="hljs-params">(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-built_in">this</span>.k = k;<br>        pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : nums) &#123;<br>            pq.offer(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        pq.offer(val);<br>        <span class="hljs-keyword">while</span> (pq.size() &gt; k) &#123;<br>            pq.poll();<br>        &#125;<br>        <span class="hljs-keyword">return</span> pq.peek();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-4Q374-前-K-个高频元素"><a href="#1-4-4Q374-前-K-个高频元素" class="headerlink" title="1.4 4Q374.前 K 个高频元素"></a>1.4 4Q374.前 K 个高频元素</h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回其中出现频率前 <code>k</code> 高的元素。你可以按 <strong>任意顺序</strong> 返回答案。</p><blockquote><p>可以利用堆的思想：建立一个小顶堆，然后遍历「出现次数数组」：</p><p>如果堆的元素个数小于 kkk，就可以直接插入堆中。<br>如果堆的元素个数等于 kkk，则检查堆顶与当前出现次数的大小。如果堆顶更大，说明至少有 kkk 个数字的出现次数比当前值大，故舍弃当前值；否则，就弹出堆顶，并将当前值插入堆中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] topKFrequent(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k) &#123;<br>    Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : nums) &#123;<br>        <span class="hljs-comment">// 建立数字与个数的对应关系</span><br>        map.put(x, map.getOrDefault(x, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">// 自定义比较器进行排序</span><br>    PriorityQueue&lt;Map.Entry&lt;Integer, Integer&gt;&gt; pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;((e1, e2) -&gt; e2.getValue() - e1.getValue());<br>    pq.addAll(map.entrySet());<br>    <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[k];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k &amp;&amp; !pq.isEmpty(); i++) &#123;<br>        ans[i] = pq.poll().getKey();<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-5Q973-最接近原点的-K-个点"><a href="#1-5-5Q973-最接近原点的-K-个点" class="headerlink" title="1.5 5Q973.最接近原点的 K 个点"></a>1.5 5Q973.最接近原点的 K 个点</h3><p>给定一个数组 <code>points</code> ，其中 <code>points[i] = [xi, yi]</code> 表示 <strong>X-Y</strong> 平面上的一个点，并且是一个整数 <code>k</code> ，返回离原点 <code>(0,0)</code> 最近的 <code>k</code> 个点。</p><p>这里，平面上两点之间的距离是 <strong>欧几里德距离</strong>（ <code>√(x1 - x2)2 + (y1 - y2)2</code> ）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] kClosest(<span class="hljs-type">int</span>[][] points, <span class="hljs-type">int</span> k) &#123;<br>    Arrays.sort(points, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;<span class="hljs-type">int</span>[]&gt;() &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">int</span>[] point1, <span class="hljs-type">int</span>[] point2)</span> &#123;<br>            <span class="hljs-keyword">return</span> (point1[<span class="hljs-number">0</span>] * point1[<span class="hljs-number">0</span>] + point1[<span class="hljs-number">1</span>] * point1[<span class="hljs-number">1</span>])<br>                - (point2[<span class="hljs-number">0</span>] * point2[<span class="hljs-number">0</span>] + point2[<span class="hljs-number">1</span>] * point2[<span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> Arrays.copyOfRange(points, <span class="hljs-number">0</span>, k);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-6Q1296-划分数组为连续数字的集合"><a href="#1-6-6Q1296-划分数组为连续数字的集合" class="headerlink" title="1.6 6Q1296.划分数组为连续数字的集合"></a>1.6 6Q1296.划分数组为连续数字的集合</h3><p>给你一个整数数组 <code>nums</code> 和一个正整数 <code>k</code>，请你判断是否可以把这个数组划分成一些由 <code>k</code> 个连续数字组成的集合。<br>如果可以，请返回 <code>true</code>；否则，返回 <code>false</code>。</p><p>输入：nums &#x3D; [1,2,3,3,4,4,5,6], k &#x3D; 4<br>输出：true<br>解释：数组可以分成 [1,2,3,4] 和 [3,4,5,6]。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPossibleDivide</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;<br>    PriorityQueue&lt;Integer&gt; pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Integer integer : nums) &#123;<br>        pq.offer(integer);<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!pq.isEmpty()) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> pq.poll();<span class="hljs-comment">// 队首元素出队</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">// 查看是否连续</span><br>            <span class="hljs-keyword">if</span> (!pq.contains(num + <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">// 如果不包含num+1说明不连续则直接返回false</span><br>            &#125;<br>            pq.remove(++num);<span class="hljs-comment">// 包含num+1说明连续，则直接出队--这里要注意是num+1出队</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2024/09/20/%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/09/20/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="0-1-Contents"><a href="#0-1-Contents" class="headerlink" title="0.1 Contents"></a>0.1 Contents</h3><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">回文链表</td><td align="center">反转、双指针</td></tr><tr><td align="center">合并两个有序链表</td><td align="center">双指针、递归</td></tr><tr><td align="center">设计链表</td><td align="center">设计、链表</td></tr><tr><td align="center">反转链表</td><td align="center">双指针</td></tr><tr><td align="center">反转链表ii</td><td align="center">哑结点</td></tr><tr><td align="center">移除链表元素</td><td align="center">哑结点</td></tr><tr><td align="center">删除排序链表中的重复元素</td><td align="center">链表</td></tr><tr><td align="center">删除排序链表中的重复元素ii</td><td align="center">链表、双指针</td></tr><tr><td align="center">复制带随机指针的链表</td><td align="center">递归、哈希表</td></tr><tr><td align="center">旋转链表</td><td align="center">双指针</td></tr></tbody></table><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">排序链表</td><td align="center">双指针、分治、排序、归并排序</td></tr><tr><td align="center">对链表进行插入排序</td><td align="center">插入排序</td></tr></tbody></table><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">相交链表</td><td align="center">哈希表、双指针</td></tr><tr><td align="center">链表的中间结点</td><td align="center">双指针</td></tr><tr><td align="center">环形链表i</td><td align="center">链表、双指针</td></tr><tr><td align="center">环形链表ii</td><td align="center">哈希表、链表、双指针</td></tr><tr><td align="center">删除链表的倒数第 N 个结点</td><td align="center">链表、双指针</td></tr><tr><td align="center">重链表</td><td align="center">递归、链表、双指针、线性表</td></tr><tr><td align="center">两数相加</td><td align="center">链表、双指针</td></tr><tr><td align="center">两数相加ii</td><td align="center">链表、双指针</td></tr></tbody></table><h3 id="0-2-1Q234-回文链表"><a href="#0-2-1Q234-回文链表" class="headerlink" title="0.2 1Q234.回文链表"></a>0.2 1Q234.回文链表</h3><p>给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。</p><p><a href="https://blog.csdn.net/weixin_51609435/article/details/124770417?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168994342316800182734913%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168994342316800182734913&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124770417-null-null.142%5Ev90%5Econtrol,239%5Ev3%5Econtrol&utm_term=%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8&spm=1018.2226.3001.4187">题解点这里</a></p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134977.png" alt="|800"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, slow = head, fast = head;<br>    <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>        fast = fast.next.next;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> slow.next;<span class="hljs-comment">// temp指向slow的下一结点</span><br>        slow.next = cur;<span class="hljs-comment">// slow的下一结点赋值给之前的slow</span><br>        cur = slow;<br>        slow = temp;<span class="hljs-comment">// slow后移</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (fast != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 此时说明是偶数链表，为统一，slow后移</span><br>        slow = slow.next;<br>    &#125;<br>    <span class="hljs-comment">// 此时前半段链表已经反转，由cur指向第一个节点</span><br>    <span class="hljs-comment">// 后半段链表由slow指向第一个结点</span><br>    <span class="hljs-keyword">while</span> (slow != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (slow.val != cur.val) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            slow = slow.next;<br>            cur = cur.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-3-2Q21-合并两个有序链表"><a href="#0-3-2Q21-合并两个有序链表" class="headerlink" title="0.3 2Q21.合并两个有序链表"></a>0.3 2Q21.合并两个有序链表</h3><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode list1, ListNode list2)</span> &#123;<br>    <span class="hljs-comment">/**循环+双指针**/</span><br>    <span class="hljs-comment">//当某个链表为空时，返回另一个链表</span><br>    <span class="hljs-comment">// if (list1==null) return list2;</span><br>    <span class="hljs-comment">// if (list2==null) return list1;</span><br>    <span class="hljs-comment">// //定义结果节点</span><br>    <span class="hljs-comment">// ListNode resultNode=new ListNode(0);</span><br>    <span class="hljs-comment">// ListNode p=resultNode;</span><br>    <span class="hljs-comment">// while(list1!=null&amp;&amp;list2!=null)&#123;</span><br>    <span class="hljs-comment">//     if (list1.val&lt;list2.val)</span><br>    <span class="hljs-comment">//     &#123;</span><br>    <span class="hljs-comment">//         p.next=list1;</span><br>    <span class="hljs-comment">//         list1=list1.next;</span><br>    <span class="hljs-comment">//     &#125;else</span><br>    <span class="hljs-comment">//     &#123;</span><br>    <span class="hljs-comment">//         p.next=list2;</span><br>    <span class="hljs-comment">//         list2=list2.next;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">//     p=p.next;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// //当某个链表为空时</span><br>    <span class="hljs-comment">// if (list1!=null)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     p.next=list1;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// if (list2!=null)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     p.next=list2;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// return resultNode.next;</span><br>    <span class="hljs-comment">/**递归写法**/</span><br>    <span class="hljs-keyword">if</span> (list1==<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> list2;<br>    <span class="hljs-keyword">if</span> (list2==<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> list1;<br>    <span class="hljs-keyword">if</span>(list1.val&lt;list2.val)&#123;<br>        list1.next=mergeTwoLists(list1.next,list2);<br>        <span class="hljs-keyword">return</span> list1;<br>    &#125;<br>    list2.next=mergeTwoLists(list2.next,list1);<br>    <span class="hljs-keyword">return</span> list2;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-4-3Q707-设计链表"><a href="#0-4-3Q707-设计链表" class="headerlink" title="0.4 3Q707.设计链表"></a>0.4 3Q707.设计链表</h3><p>你可以选择使用单链表或者双链表，设计并实现自己的链表。<br>单链表中的节点应该具备两个属性：val 和 next 。val 是当前节点的值，next 是指向下一个节点的指针&#x2F;引用。<br>如果是双向链表，则还需要属性 prev 以指示链表中的上一个节点。假设链表中的所有节点下标从 0 开始。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLinkedList</span> &#123;<br>    <span class="hljs-type">int</span> size;<br>    ListNode head;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyLinkedList</span><span class="hljs-params">()</span> &#123;<br>        size = <span class="hljs-number">0</span>;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取链表中下标为 index 的节点的值。如果下标无效，则返回 -1 。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= size) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= index; i++) &#123;<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cur.val;<br>    &#125;<br><br>    <span class="hljs-comment">// 将一个值为 val 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtHead</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(<span class="hljs-number">0</span>, val);<br>    &#125;<br><br>    <span class="hljs-comment">// 将一个值为 val 的节点追加到链表中作为链表的最后一个元素。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtTail</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(size, val);<br>    &#125;<br><br>    <span class="hljs-comment">// 将一个值为 val 的节点插入到链表中下标为 index 的节点之前。如果 index 等于链表的长度，那么该节点会被追加到链表的末尾。如果 index</span><br>    <span class="hljs-comment">// 比长度更大，该节点将 不会插入 到链表中。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; size) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-comment">// 插入到index之前</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(val);<br>        temp.next = cur.next;<br>        cur.next = temp;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果下标有效，则删除链表中下标为 index 的节点。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= size) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-comment">// 前一个结点</span><br>        cur.next = cur.next.next;<br>        size--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-5-4Q206-反转链表"><a href="#0-5-4Q206-反转链表" class="headerlink" title="0.5 4Q206.反转链表"></a>0.5 4Q206.反转链表</h3><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//迭代实现</span><br><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-comment">// pre记录前一个节点（因为链表没有指向前一个的指针），next记录下一个节点</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, next;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        next = cur.next;<span class="hljs-comment">// next指向下一个节点</span><br>        cur.next = pre;<span class="hljs-comment">// 当前节点指向前一个节点</span><br>        pre = cur;<span class="hljs-comment">// 前一个节点指向当前节点</span><br>        cur = next;<span class="hljs-comment">// 当前节点指向下一个节点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br><span class="hljs-comment">//递归实现</span><br><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-comment">// 从后往前两两反转</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">new_head</span> <span class="hljs-operator">=</span> reverseList(head.next);<br>    <span class="hljs-comment">// 这里是两个节点的反转</span><br>    head.next.next = head;<br>    head.next = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> new_head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-6-5Q92-反转链表ii"><a href="#0-6-5Q92-反转链表ii" class="headerlink" title="0.6 5Q92.反转链表ii"></a>0.6 5Q92.反转链表ii</h3><p>给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;&#x3D; right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。</p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134978.png" alt="|537|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>    <span class="hljs-comment">// 使用哑结点,避免讨论（[1,2],1,1的情况下避免讨论）</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>    dummyNode.next = head;<br><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> dummyNode, suc;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; left - <span class="hljs-number">1</span>; i++) &#123;<br>        pre = pre.next;<span class="hljs-comment">// pre指向left结点的前一个结点</span><br>    &#125;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">leftNode</span> <span class="hljs-operator">=</span> dummyNode, rightNode = dummyNode;<br>    leftNode = pre.next;<span class="hljs-comment">// 指向left结点</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; right; i++) &#123;<br>        rightNode = rightNode.next;<span class="hljs-comment">// 指向right结点</span><br>    &#125;<br>    suc = rightNode.next;<span class="hljs-comment">// 指向right后一结点</span><br>    <span class="hljs-comment">// 截断链表,取出要反转的部分</span><br>    pre.next = <span class="hljs-literal">null</span>;<br>    rightNode.next = <span class="hljs-literal">null</span>;<br>    reverseLinkedList(leftNode);<span class="hljs-comment">// 反转链表</span><br><br>    <span class="hljs-comment">// 连上链表</span><br>    leftNode.next = suc;<br>    pre.next = rightNode;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseLinkedList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-comment">// 反转链表</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> cur.next;<br>        cur.next = pre;<br>        pre = cur;<br>        cur = next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-7-6Q203-移除链表元素"><a href="#0-7-6Q203-移除链表元素" class="headerlink" title="0.7 6Q203.移除链表元素"></a>0.7 6Q203.移除链表元素</h3><p>给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val &#x3D;&#x3D; val 的节点，并返回 新的头节点 。</p><ol><li>建一个「虚拟头节点」dummy 以减少边界判断，往后的答案链表会接在 dummy 后面</li><li>使用 tail 代表当前有效链表的结尾</li><li>通过原输入的 head 指针进行链表扫描</li></ol><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/solution/yi-chu-lian-biao-yuan-su-by-leetcode-sol-654m/">题解点这里</a></p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134979.png" alt="|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeElements</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>    dummyNode.next = head;<span class="hljs-comment">//这里.next=head是防止只有一个节点时下面的while会报错！！！！</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> dummyNode;<br>    <span class="hljs-keyword">while</span> (tail.next != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (tail.next.val == val) &#123;<br>            <span class="hljs-comment">//这里做到删除的作用</span><br>            tail.next = tail.next.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tail = tail.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-8-7Q83-删除排序链表中的重复元素"><a href="#0-8-7Q83-删除排序链表中的重复元素" class="headerlink" title="0.8 7Q83.删除排序链表中的重复元素"></a>0.8 7Q83.删除排序链表中的重复元素</h3><p>给定一个已排序的链表的头 head ， 删除所有重复的元素，使每个元素只出现一次 。返回 已排序的链表 。<br>几乎所有的链表题目，都具有相似的解题思路。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span> &amp;&amp; cur.next != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">// 需要控制空链表</span><br>        <span class="hljs-keyword">if</span> (cur.val == cur.next.val) &#123;<br>            <span class="hljs-comment">// 当前结点数据等于下一结点数据，则指向下下结点</span><br>            cur.next = cur.next.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cur = cur.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-9-8Q82-删除排序链表中的重复元素-ii"><a href="#0-9-8Q82-删除排序链表中的重复元素-ii" class="headerlink" title="0.9 8Q82.删除排序链表中的重复元素-ii"></a>0.9 8Q82.删除排序链表中的重复元素-ii</h3><p>给定一个已排序的链表的头 head ， 删除原始链表中所有重复数字的节点，只留下不同的数字 。返回 已排序的链表 。</p><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/solution/tong-yong-shan-chu-zhong-fu-jie-dian-lia-od9g/">题解点这里</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dumyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> dumyNode;<br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span> || head.val != head.next.val) &#123;<br>            <span class="hljs-comment">// head 已经没有下一个节点，head 可以被插入</span><br>            <span class="hljs-comment">// head 有一下个节点，但是值与 head 不相同，head 可以被插入</span><br>            tail.next = head;<span class="hljs-comment">// tail的next指向head</span><br>            tail = head;<span class="hljs-comment">// head赋值给当前的tail</span><br>        &#125;<br>        <span class="hljs-keyword">while</span> (head.next != <span class="hljs-literal">null</span> &amp;&amp; head.val == head.next.val) &#123;<br>            <span class="hljs-comment">// 和下一结点相等时直接跳过</span><br>            head = head.next;<br>        &#125;<br>        <span class="hljs-comment">// 赋值完成跳过或者跳过当前相等的节点</span><br>        head = head.next;<br>    &#125;<br>    tail.next = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> dumyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-10-9Q328-奇偶链表"><a href="#0-10-9Q328-奇偶链表" class="headerlink" title="0.10 9Q328.奇偶链表"></a>0.10 9Q328.奇偶链表</h3><p>给定单链表的头节点 <code>head</code> ，将所有索引为奇数的节点和索引为偶数的节点分别组合在一起，然后返回重新排序的列表。<br><strong>第一个</strong>节点的索引被认为是 <strong>奇数</strong> ， <strong>第二个</strong>节点的索引为 <strong>偶数</strong> ，以此类推。<br>请注意，偶数组和奇数组内部的相对顺序应该与输入时保持一致。</p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301131237.png" alt="|675"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">oddEvenList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">odd</span> <span class="hljs-operator">=</span> head, even = head.next;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">evenHead</span> <span class="hljs-operator">=</span> even;<span class="hljs-comment">// 记录第一个偶数结点</span><br>    <span class="hljs-comment">// ListNode cur = head;</span><br>    <span class="hljs-keyword">while</span> (even != <span class="hljs-literal">null</span> &amp;&amp; even.next != <span class="hljs-literal">null</span>) &#123;<br>        odd.next = even.next;<br>        odd = odd.next;<br>        even.next = odd.next;<br>        even = even.next;<br>    &#125;<br>    odd.next = evenHead;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-11-10Q138-复制带随机指针的链表"><a href="#0-11-10Q138-复制带随机指针的链表" class="headerlink" title="0.11 10Q138.复制带随机指针的链表"></a>0.11 10Q138.复制带随机指针的链表</h3><p>给你一个长度为 <code>n</code> 的链表，每个节点包含一个额外增加的随机指针 <code>random</code> ，该指针可以指向链表中的任何节点或空节点。<br>构造这个链表的 <strong><a href="https://baike.baidu.com/item/%E6%B7%B1%E6%8B%B7%E8%B4%9D/22785317?fr=aladdin">深拷贝</a></strong>。 深拷贝应该正好由 <code>n</code> 个 <strong>全新</strong> 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 <code>next</code> 指针和 <code>random</code> 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。<strong>复制链表中的指针都不应指向原链表中的节点</strong> 。<br>例如，如果原链表中有 <code>X</code> 和 <code>Y</code> 两个节点，其中 <code>X.random --&gt; Y</code> 。那么在复制链表中对应的两个节点 <code>x</code> 和 <code>y</code> ，同样有 <code>x.random --&gt; y</code> 。<br>返回复制链表的头节点。<br>用一个由 <code>n</code> 个节点组成的链表来表示输入&#x2F;输出中的链表。每个节点用一个 <code>[val, random_index]</code> 表示：</p><ul><li><code>val</code>：一个表示 <code>Node.val</code> 的整数。</li><li><code>random_index</code>：随机指针指向的节点索引（范围从 <code>0</code> 到 <code>n-1</code>）；如果不指向任何节点，则为 <code>null</code> 。<br>你的代码 <strong>只</strong> 接受原链表的头节点 <code>head</code> 作为传入参数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    Map&lt;Node, Node&gt; nodeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">copyRandomList</span><span class="hljs-params">(Node head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!nodeMap.containsKey(head)) &#123;<br>            <span class="hljs-comment">// 需要防止重复，.next和.random可能会重复</span><br>            <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(head.val);<span class="hljs-comment">// 复制一份</span><br>            nodeMap.put(head, newNode);<br>            newNode.next = copyRandomList(head.next);<br>            newNode.random = copyRandomList(head.random);<br>        &#125;<br>        <span class="hljs-keyword">return</span> nodeMap.get(head);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-12-11Q61-旋转链表"><a href="#0-12-11Q61-旋转链表" class="headerlink" title="0.12 11Q61.旋转链表"></a>0.12 11Q61.旋转链表</h3><p>给你一个链表的头节点 <code>head</code> ，旋转链表，将链表每个节点向右移动 <code>k</code> 个位置。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134980.png" alt="|1000"></p><blockquote><p>输入：head &#x3D; [1,2,3,4,5], k &#x3D; 2<br>输出：[4,5,1,2,3]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第一次没看题解过Medium，虽然runtime beats 4.68 %</span><br><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">rotateRight</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span> || k == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        p = p.next;<br>        size++;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (k &gt; size) &#123;<br>        k -= size;<br>    &#125;<br><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>    dummyNode.next = head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> dummyNode, cur = dummyNode;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size - k; i++) &#123;<br>        pre = pre.next;<br>    &#125;<br>    cur = pre.next;<br>    <span class="hljs-keyword">if</span> (cur.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 说明是最后一个结点</span><br>        pre.next = <span class="hljs-literal">null</span>;<br>        cur.next = dummyNode.next;<br>        dummyNode.next = cur;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> pre.next;<br>        pre.next = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-literal">null</span>) &#123;<br>            cur = cur.next;<br>        &#125;<br>        cur.next = dummyNode.next;<br>        dummyNode.next = q;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//现在变成100%了，不容易啊</span><br><span class="hljs-comment">//先使原链表变成指向第二个结点的循环链表</span><br><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">rotateRight</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        p = p.next;<br>        size++;<br>    &#125;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>    dummyNode.next = head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> dummyNode, cur = dummyNode;<br>    <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-literal">null</span>) &#123;<br>        cur = cur.next;<br>    &#125;<br>    cur.next = dummyNode.next;<span class="hljs-comment">// 变成循环链表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size - k % size; i++) &#123;<br>        pre = pre.next;<br>    &#125;<br>    dummyNode.next = pre.next;<br>    pre.next = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-13-12Q148-排序链表"><a href="#0-13-12Q148-排序链表" class="headerlink" title="0.13 12Q148.排序链表"></a>0.13 12Q148.排序链表</h3><p>给你链表的头结点 <code>head</code> ，请将其按 <strong>升序</strong> 排列并返回 <strong>排序后的链表</strong> 。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134981.png" alt="|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">sortList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> mergeSort(head);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">mergeSort</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br><br>        <span class="hljs-comment">// 快慢指针找中点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>            fast = fast.next.next;<br>            pre = slow;<br>            slow = slow.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (pre != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 截断链表</span><br>            pre.next = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> mergeSort(head);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> mergeSort(slow);<br>        <span class="hljs-keyword">return</span> merge(left, right);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">merge</span><span class="hljs-params">(ListNode first, ListNode second)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> dummy;<br>        <span class="hljs-keyword">while</span> (first != <span class="hljs-literal">null</span> &amp;&amp; second != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (first.val &lt; second.val) &#123;<br>                cur.next = first;<br>                cur = cur.next;<br>                first = first.next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cur.next = second;<br>                cur = cur.next;<br>                second = second.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (first != <span class="hljs-literal">null</span>) &#123;<br>            cur.next = first;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (second != <span class="hljs-literal">null</span>) &#123;<br>            cur.next = second;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-14-13Q147-对链表进行插入排序"><a href="#0-14-13Q147-对链表进行插入排序" class="headerlink" title="0.14 13Q147.对链表进行插入排序"></a>0.14 13Q147.对链表进行插入排序</h3><p>给定单个链表的头 <code>head</code> ，使用 <strong>插入排序</strong> 对链表进行排序，并返回 <em>排序后链表的头</em> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">insertionSortList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    dummyNode.next = head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">lastSorted</span> <span class="hljs-operator">=</span> head, cur = lastSorted.next;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (lastSorted.val &lt;= cur.val) &#123;<br>            lastSorted = lastSorted.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> dummyNode;<br>            <span class="hljs-keyword">while</span> (p.next.val &lt;= cur.val) &#123;<span class="hljs-comment">// 找到cur结点插入的位置</span><br>                p = p.next;<br>            &#125;<br>            <span class="hljs-comment">// 插入结点</span><br>            lastSorted.next = cur.next;<br>            cur.next = p.next;<br>            p.next = cur;<br>        &#125;<br>        <span class="hljs-comment">// 移动到下一结点</span><br>        cur = lastSorted.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-15-14Q160-相交链表"><a href="#0-15-14Q160-相交链表" class="headerlink" title="0.15 14Q160.相交链表"></a>0.15 14Q160.相交链表</h3><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> 。</p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301131239.png" alt="image-20230725204058419|725"></p><blockquote><p>输入：intersectVal &#x3D; 8, listA &#x3D; [4,1,8,4,5], listB &#x3D; [5,6,1,8,4,5], skipA &#x3D; 2, skipB &#x3D; 3<br>输出：Intersected at ‘8’<br>解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。<br>从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。<br>在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。<br>— 请注意相交节点的值不为 1，因为在链表 A 和链表 B 之中值为 1 的节点 (A 中第二个节点和 B 中第三个节点) 是不同的节点。换句话说，它们在内存中指向两个不同的位置，而链表 A 和链表 B 中值为 8 的节点 (A 中第三个节点，B 中第四个节点) 在内存中指向相同的位置。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headA == <span class="hljs-literal">null</span> || headB == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    Set&lt;ListNode&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> headA;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        visited.add(p);<span class="hljs-comment">//使用hash表将链表元素存入其中</span><br>        p = p.next;<br>    &#125;<br>    p = headB;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (visited.contains(p)) &#123;<span class="hljs-comment">//若包含，则返回该结点</span><br>            <span class="hljs-keyword">return</span> p;<br>        &#125;<br>        p = p.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>[使用双指针的题解](<a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/solutions/12624/intersection-of-two-linked-lists-shuang-zhi-zhen-l/">160. 相交链表 - 力扣（LeetCode）</a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pA</span> <span class="hljs-operator">=</span> headA, pB = headB;<br>    <span class="hljs-keyword">while</span> (pA != pB) &#123;<br>        pA = pA != <span class="hljs-literal">null</span> ? pA.next : headB;<br>        pB = pB != <span class="hljs-literal">null</span> ? pB.next : headA;<br>    &#125;<br>    <span class="hljs-keyword">return</span> A;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>若两个链表相交，则A第二次遍历到相交结点与B第二次遍历到相交结点<strong>同时到达</strong></p></blockquote><h3 id="0-16-15Q876-链表的中间结点"><a href="#0-16-15Q876-链表的中间结点" class="headerlink" title="0.16 15Q876.链表的中间结点"></a>0.16 15Q876.链表的中间结点</h3><p>给你单链表的头结点 <code>head</code> ，请你找出并返回链表的中间结点。<br>如果有两个中间结点，则返回第二个中间结点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">middleNode</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        p = p.next;<br>        size++;<br>    &#125;<br>    p = head;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size / <span class="hljs-number">2</span>; i++) &#123;<br>        p = p.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">使用快慢指针解决<br> <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">middleNode</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head, fast = head;<br>    <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>        slow = slow.next;<br>        fast = fast.next.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> slow;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-17-Q141-环形链表i"><a href="#0-17-Q141-环形链表i" class="headerlink" title="0.17 Q141.环形链表i"></a>0.17 Q141.环形链表i</h3><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。<br>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况。<br><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134982.png" alt="|648|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//当链表为空或者只有一个元素时，返回非循环链表，防止下面的ListNode quick = head.next报错</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//快慢指针</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">quick</span> <span class="hljs-operator">=</span> head.next;<br>    <span class="hljs-keyword">while</span> (slow != quick) &#123;<br>        <span class="hljs-keyword">if</span> (quick.next == <span class="hljs-literal">null</span> || quick.next.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//快指针走两步，若是循环链表，快指针会追上慢指针</span><br>        slow = slow.next;<br>        quick = quick.next.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-18-17Q142-环形链表ii"><a href="#0-18-17Q142-环形链表ii" class="headerlink" title="0.18 17Q142.环形链表ii"></a>0.18 17Q142.环形链表ii</h3><p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em><br>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。<br><strong>不允许修改</strong> 链表。</p><blockquote><p>同样使用快慢指针求解    </p><p><strong>&#x2F;&#x2F;快指针走两步，若是循环链表，快指针会追上慢指针</strong></p><p>slow &#x3D; slow.next;</p><p>quick &#x3D; quick.next.next;</p></blockquote><h3 id="0-19-18Q-19删除链表的倒数第-N-个结点"><a href="#0-19-18Q-19删除链表的倒数第-N-个结点" class="headerlink" title="0.19 18Q.19删除链表的倒数第 N 个结点"></a>0.19 18Q.19删除链表的倒数第 N 个结点</h3><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134983.png" alt="|551|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>    dummyNode.next = head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head, q = dummyNode;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        p = p.next;<br>        size++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size - n; i++) &#123;<br>        <span class="hljs-comment">//这个地方有点小坑，需要考虑到[1] 1和[1,2] 2</span><br>        q = q.next;<span class="hljs-comment">// 此时q指向要删除的倒数第n个结点的前一个结点</span><br>    &#125;<br>    q.next = q.next.next;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-20-19Q143-重排链表"><a href="#0-20-19Q143-重排链表" class="headerlink" title="0.20 19Q143.重排链表"></a>0.20 19Q143.重排链表</h3><p>给定一个单链表 <code>L</code> 的头节点 <code>head</code> ，单链表 <code>L</code> 表示为：<br>L0 → L1 → … → Ln - 1 → Ln<br>请将其重新排列后变为：<br>L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …<br>不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301131240.png" alt="|650"></p><blockquote><p><strong>递归的方法是将最后一个结点插入到head之后</strong></p><p><strong>还可以根据线性表的特性转换成线性表研究</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reorderList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (p.next.next != <span class="hljs-literal">null</span>) &#123;<br>        p = p.next;<span class="hljs-comment">// 找到倒数第二个结点</span><br>    &#125;<br>    <span class="hljs-comment">// 将最后一个结点插入到head之后</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">suc</span> <span class="hljs-operator">=</span> p.next;<br>    p.next = <span class="hljs-literal">null</span>;<br>    suc.next = head.next;<br>    head.next = suc;<br><br>    reorderList(suc.next);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-21-20Q2-两数相加"><a href="#0-21-20Q2-两数相加" class="headerlink" title="0.21 20Q2.两数相加"></a>0.21 20Q2.两数相加</h3><p>给你两个 <strong>非空</strong>的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。<br>请你将两个数相加，并以相同形式返回一个表示和的链表。<br>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134984.png" alt="|445|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>    <span class="hljs-comment">//定义一个指向结果的指针</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//定义一个移动指针</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> pre;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//进位</span><br>    <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span> || l2 != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">//l1/l2是否为null，不是null取值，是null取0</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> l1 != <span class="hljs-literal">null</span> ? l1.val : <span class="hljs-number">0</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> l2 != <span class="hljs-literal">null</span> ? l2.val : <span class="hljs-number">0</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> x + y + carry;<br>      <span class="hljs-comment">//计算进位</span><br>      carry = sum / <span class="hljs-number">10</span>;<br>      <span class="hljs-comment">//计算节点值</span><br>      sum = sum % <span class="hljs-number">10</span>;<br>      <span class="hljs-comment">//将创建该值对应的节点，并将cur指向该节点</span><br>      cur.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum);<br>      <span class="hljs-comment">//指针后移</span><br>      cur = cur.next;<br>      <span class="hljs-comment">//如果后一位不是null，则后移</span><br>      <span class="hljs-keyword">if</span> (l1 != <span class="hljs-literal">null</span>) l1 = l1.next;<br>      <span class="hljs-keyword">if</span> (l2 != <span class="hljs-literal">null</span>) l2 = l2.next;<br>    &#125;<br>    <span class="hljs-comment">//当最后两个节点（首位）有进位，则需要新建节点</span><br>    <span class="hljs-keyword">if</span> (carry == <span class="hljs-number">1</span>) &#123;<br>      cur.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(carry);<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-22-21Q445-两数相加ii"><a href="#0-22-21Q445-两数相加ii" class="headerlink" title="0.22 21Q445.两数相加ii"></a>0.22 21Q445.两数相加ii</h3><p>给你两个 <strong>非空</strong> 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134985.png" alt="|1000"></p><blockquote><p>这里的进阶版需要先反转再相加，返回相加之和的反转</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        l1 = reverseList(l1);<br>        l2 = reverseList(l2);<br>        <span class="hljs-keyword">return</span> reverseList(addNumbers(l1, l2));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode list)</span> &#123;<br>        <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span> || list.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> list;<br>        &#125;<br>        <span class="hljs-comment">// pre记录前一个节点（因为链表没有指向前一个的指针），next记录下一个节点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, next;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> list;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>            next = cur.next;<span class="hljs-comment">// next指向下一个节点</span><br>            cur.next = pre;<span class="hljs-comment">// 当前节点指向前一个节点</span><br>            pre = cur;<span class="hljs-comment">// 前一个节点指向当前节点</span><br>            cur = next;<span class="hljs-comment">// 当前节点指向下一个节点</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">addNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-comment">// 定义一个指向结果的指针</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 定义一个移动指针</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> pre;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 进位</span><br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span> || l2 != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// l1/l2是否为null，不是null取值，是null取0</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> l1 != <span class="hljs-literal">null</span> ? l1.val : <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> l2 != <span class="hljs-literal">null</span> ? l2.val : <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> x + y + carry;<br>            <span class="hljs-comment">// 计算进位</span><br>            carry = sum / <span class="hljs-number">10</span>;<br>            <span class="hljs-comment">// 计算节点值</span><br>            sum = sum % <span class="hljs-number">10</span>;<br>            <span class="hljs-comment">// 将创建该值对应的节点，并将cur指向该节点</span><br>            cur.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum);<br>            <span class="hljs-comment">// 指针后移</span><br>            cur = cur.next;<br>            <span class="hljs-comment">// 如果后一位不是null，则后移</span><br>            <span class="hljs-keyword">if</span> (l1 != <span class="hljs-literal">null</span>)<br>                l1 = l1.next;<br>            <span class="hljs-keyword">if</span> (l2 != <span class="hljs-literal">null</span>)<br>                l2 = l2.next;<br>        &#125;<br>        <span class="hljs-comment">// 当最后两个节点（首位）有进位，则需要新建节点</span><br>        <span class="hljs-keyword">if</span> (carry == <span class="hljs-number">1</span>) &#123;<br>            cur.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(carry);<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
