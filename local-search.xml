<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>字符串</title>
    <link href="/2025/07/30/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2025/07/30/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Contents"><a href="#1-Contents" class="headerlink" title="1 Contents"></a>1 Contents</h2><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">验证回文串</td><td align="center">双指针、字符串</td></tr><tr><td align="center">最长回文子串</td><td align="center">字符串、动态规划</td></tr><tr><td align="center">无重复字符的最长子串</td><td align="center">哈希表、字符串、滑动窗口</td></tr><tr><td align="center">反转字符串</td><td align="center">双指针、字符串</td></tr><tr><td align="center">反转字符串中的单词 III</td><td align="center">双指针、字符串</td></tr><tr><td align="center">字母异位词分组</td><td align="center">数组、哈希表、字符串、排序</td></tr><tr><td align="center">字符串相加</td><td align="center">数学、字符串、模拟</td></tr><tr><td align="center">反转字符串中的单词</td><td align="center">双指针、字符串</td></tr><tr><td align="center">字符串相乘</td><td align="center">数学、字符串、模拟</td></tr><tr><td align="center">最长公共前缀</td><td align="center">字典树、字符串</td></tr></tbody></table><p><strong>单模式串匹配题目</strong></p><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">找出字符串中第一个匹配项的下标</td><td align="center">双指针、字符串、字符串匹配</td></tr><tr><td align="center">重复的子字符串</td><td align="center">字符串、字符串匹配</td></tr><tr><td align="center">重复叠加字符串匹配</td><td align="center">字符串、字符串匹配</td></tr><tr><td align="center">最大重复子字符串</td><td align="center">字符串、字符串匹配</td></tr><tr><td align="center">旋转字符串</td><td align="center">字符串、字符串匹配</td></tr><tr><td align="center">数组中的字符串匹配</td><td align="center">数组、字符串、字符串匹配</td></tr></tbody></table><h3 id="1-1-1Q125-验证回文串"><a href="#1-1-1Q125-验证回文串" class="headerlink" title="1.1 1Q125.验证回文串"></a>1.1 1Q125.验证回文串</h3><p>如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个 <strong>回文串</strong> 。<br>字母和数字都属于字母数字字符。<br>给你一个字符串 <code>s</code>，如果它是 <strong>回文串</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-comment">//使用首尾指针判断</span><br>    <span class="hljs-type">char</span>[] ch = s.toLowerCase().toCharArray();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = s.length()-<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        <span class="hljs-keyword">while</span> (!isValid(ch[i]) &amp;&amp; i &lt; j) &#123;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (!isValid(ch[j]) &amp;&amp; i &lt; j) &#123;<br>            j--;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ch[i] != ch[j]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        i++;<br>        j--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;<br>    <span class="hljs-keyword">return</span> (c &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) || (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-3Q3-无重复字符的最长子串-滑动窗口"><a href="#1-2-3Q3-无重复字符的最长子串-滑动窗口" class="headerlink" title="1.2 3Q3.无重复字符的最长子串(滑动窗口)"></a>1.2 3Q3.无重复字符的最长子串(滑动窗口)</h3><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301139324.png" alt="|775|1000"></p><blockquote><p>1、首先，判断当前字符是否包含在map中，如果不包含，将该字符添加到map（字符，字符在数组下标）, 此时没有出现重复的字符，左指针不需要变化。此时不重复子串的长度为：i-left+1，与原来的maxLen比较，取最大值；</p><p>2、如果当前字符 ch 包含在 map中，此时有2类情况： </p><p>​1）当前字符包含在当前有效的子段中，如：abca，当我们遍历到第二个a，当前有效最长子段是 abc，我们又遍历到a， 那么此时更新 left 为 map.get(a)+1&#x3D;1，当前有效子段更新为 bca；</p><p>​ 2）当前字符不包含在当前最长有效子段中，如：abba，我们先添加a,b进map，此时left&#x3D;0，我们再添加b，发现map中包含b， 而且b包含在最长有效子段中，就是1）的情况，我们更新 left&#x3D;map.get(b)+1&#x3D;2，此时子段更新为 b，而且map中仍然包含a，map.get(a)&#x3D;0； 随后，我们遍历到a，发现a包含在map中，且map.get(a)&#x3D;0，如果我们像1）一样处理，就会发现 left&#x3D;map.get(a)+1&#x3D;1，实际上，left此时 应该不变，left始终为2，子段变成 ba才对。</p><p>为了处理以上2类情况，我们每次更新left，left&#x3D;Math.max(left , map.get(ch)+1). 另外，更新left后，不管原来的 s.charAt(i) 是否在最长子段中，我们都要将 s.charAt(i) 的位置更新为当前的i， 因此此时新的 s.charAt(i) 已经进入到 当前最长的子段中！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s.length() == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// left是子串的起始位置</span><br>    Map&lt;Character, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (map.containsKey(s.charAt(i))) &#123;<br>            left = Math.max(left, map.get(s.charAt(i)) + <span class="hljs-number">1</span>);<br>        &#125;<br>        map.put(s.charAt(i), i);<br>        maxLen = Math.max(maxLen, i - left + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxLen;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-4Q344-反转字符串"><a href="#1-3-4Q344-反转字符串" class="headerlink" title="1.3 4Q344.反转字符串"></a>1.3 4Q344.反转字符串</h3><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须**<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a>修改输入数组**、使用 O(1) 的额外空间解决这一问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseString</span><span class="hljs-params">(<span class="hljs-type">char</span>[] s)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = s.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> s[j];<br>        s[j] = s[i];<br>        s[i] = ch;<br>        i++;<br>        j--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-5Q557-反转字符串中的单词-III"><a href="#1-4-5Q557-反转字符串中的单词-III" class="headerlink" title="1.4 5Q557.反转字符串中的单词 III"></a>1.4 5Q557.反转字符串中的单词 III</h3><p>给定一个字符串 <code>s</code> ，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。</p><p><strong>字母反转</strong></p><blockquote><p>对于java而言，String是不可变字符数组，所以无法避免空间的开销</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseWords</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> s.length();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; len) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-keyword">while</span> (i &lt; len &amp;&amp; s.charAt(i) != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            i++;<span class="hljs-comment">// 记录单词，start是单词起始位置，i是结束位置</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> start; j &lt; i; j++) &#123;<br>            ans.append(s.charAt(start + i - <span class="hljs-number">1</span> - j));<br>        &#125;<br>        <span class="hljs-keyword">while</span> (i &lt; len &amp;&amp; s.charAt(i) == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            i++;<br>            ans.append(<span class="hljs-string">&#x27; &#x27;</span>);<span class="hljs-comment">// 添加空格</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-6Q49-字母异位词分组"><a href="#1-5-6Q49-字母异位词分组" class="headerlink" title="1.5 6Q49.字母异位词分组"></a>1.5 6Q49.字母异位词分组</h3><p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p><p><strong>字母异位词</strong> 是由重新排列源单词的所有字母得到的一个新单词。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">groupAnagrams</span><span class="hljs-params">(String[] strs)</span> &#123;<br>    <span class="hljs-comment">// 使用哈希表存储，key=字符从小到大排序之后的串，value=字母异位词</span><br>    Map&lt;String, List&lt;String&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (String str : strs) &#123;<br>        <span class="hljs-type">char</span>[] arr = str.toCharArray();<br>        Arrays.sort(arr);<span class="hljs-comment">// 排序之和看是否是字母异位词</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(arr);<br>        List&lt;String&gt; list = map.getOrDefault(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<span class="hljs-comment">// 能找到则返回key对应的value，否则返回空</span><br>        list.add(str);<span class="hljs-comment">// 将字符串本身加入list</span><br>        map.put(key, list);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;(map.values());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-7Q415-字符串相加"><a href="#1-6-7Q415-字符串相加" class="headerlink" title="1.6 7Q415.字符串相加"></a>1.6 7Q415.字符串相加</h3><p>给定两个字符串形式的非负整数 <code>num1</code> 和<code>num2</code> ，计算它们的和并同样以字符串形式返回。</p><p>你不能使用任何內建的用于处理大整数的库（比如 <code>BigInteger</code>）， 也不能直接将输入的字符串转换为整数形式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addStrings</span><span class="hljs-params">(String num1, String num2)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> num1.length() - <span class="hljs-number">1</span>, j = num2.length() - <span class="hljs-number">1</span>;<span class="hljs-comment">// i、j分别记录位次</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// add记录进位</span><br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> || j &gt;= <span class="hljs-number">0</span> || add != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> i &gt;= <span class="hljs-number">0</span> ? num1.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-number">0</span>;<span class="hljs-comment">// 取对应位次上的数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> j &gt;= <span class="hljs-number">0</span> ? num2.charAt(j) - <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-number">0</span>;<span class="hljs-comment">// 取对应位次上的数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> x + y + add;<br>        ans.append(result % <span class="hljs-number">10</span>);<span class="hljs-comment">// 取个位上的数，十位上的数是进位</span><br>        add = result / <span class="hljs-number">10</span>;<br>        i--;<br>        j--;<br>    &#125;<br>    ans.reverse();<span class="hljs-comment">// 结果需要反转</span><br>    <span class="hljs-keyword">return</span> ans.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-7-8Q151-反转字符串中的单词"><a href="#1-7-8Q151-反转字符串中的单词" class="headerlink" title="1.7 8Q151.反转字符串中的单词"></a>1.7 8Q151.反转字符串中的单词</h3><p>给你一个字符串 <code>s</code> ，请你反转字符串中 <strong>单词</strong> 的顺序。</p><p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p><p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong> 之间用单个空格连接的结果字符串。</p><p>**注意：**输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p><p><strong>单词反转</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseWords</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s.length() == <span class="hljs-number">0</span> || s.length() == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> s.length();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> len - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">while</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; s.charAt(i) == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            i--;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">finish</span> <span class="hljs-operator">=</span> i;<span class="hljs-comment">// 记录单词，finish是单词结束位置</span><br>        <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; s.charAt(i) != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            i--;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>;<span class="hljs-comment">// 记录单词，start是单词开始位置</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> start; j &lt;= finish; j++) &#123;<br>            ans.append(s.charAt(j));<br>        &#125; <span class="hljs-comment">// 此时已添加完一个单词</span><br><br>        ans.append(<span class="hljs-string">&#x27; &#x27;</span>);<span class="hljs-comment">// 添加空格</span><br><br>    &#125;<br>    <span class="hljs-keyword">return</span> ans.toString().trim();<span class="hljs-comment">// 注意去掉末尾空格</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-8-9Q43-字符串相乘"><a href="#1-8-9Q43-字符串相乘" class="headerlink" title="1.8 9Q43.字符串相乘"></a>1.8 9Q43.字符串相乘</h3><p>给定两个以字符串形式表示的非负整数 <code>num1</code> 和 <code>num2</code>，返回 <code>num1</code> 和 <code>num2</code> 的乘积，它们的乘积也表示为字符串形式。</p><p>**注意：**不能使用任何内置的 BigInteger 库或直接将输入转换为整数。</p><blockquote><p>需要使用数组存储乘积，int类型会越界。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">multiply</span><span class="hljs-params">(String num1, String num2)</span> &#123;<br>    <span class="hljs-keyword">if</span> (num1.equals(<span class="hljs-string">&quot;0&quot;</span>) || num2.equals(<span class="hljs-string">&quot;0&quot;</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> num1.length(), n = num2.length();<br>    <span class="hljs-type">int</span>[] ansArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m + n];<span class="hljs-comment">// 结果长度最长为m+n，最短为m+n-1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> m - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-comment">// 首先将各个位数的乘积赋值给对应位数的数组项</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> num1.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> n - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> num2.charAt(j) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            ansArr[i + j + <span class="hljs-number">1</span>] += x * y;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> m + n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-comment">// 传入进位</span><br>        ansArr[i - <span class="hljs-number">1</span>] += ansArr[i] / <span class="hljs-number">10</span>;<br>        ansArr[i] %= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> ansArr[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<span class="hljs-comment">// 最高位是否为0，为0则从第一位开始，否则第零位开始</span><br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    <span class="hljs-keyword">while</span> (index &lt; m + n) &#123;<br>        ans.append(ansArr[index]);<br>        index++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-9-14Q41-最长公共前缀"><a href="#1-9-14Q41-最长公共前缀" class="headerlink" title="1.9 14Q41.最长公共前缀"></a>1.9 14Q41.最长公共前缀</h3><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">longestCommonPrefix</span><span class="hljs-params">(String[] strs)</span> &#123;<br>    <span class="hljs-keyword">if</span> (strs == <span class="hljs-literal">null</span> || strs.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">prefix</span> <span class="hljs-operator">=</span> strs[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; strs.length; i++) &#123;<br>        <span class="hljs-comment">// 计算公共前缀</span><br>        prefix = longestCommonPrefix(prefix, strs[i]);<br>        <span class="hljs-keyword">if</span> (prefix.length() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> prefix;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">longestCommonPrefix</span><span class="hljs-params">(String str1, String str2)</span> &#123;<br>    <span class="hljs-comment">// 返回两个字符串的最长公共前缀</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> Math.min(str1.length(), str2.length());<br>    <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (idx &lt; len &amp;&amp; str1.charAt(idx) == str2.charAt(idx)) &#123;<br>        idx++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> str1.substring(<span class="hljs-number">0</span>, idx);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-10-15Q25-找出字符串中第一个匹配项的下标"><a href="#1-10-15Q25-找出字符串中第一个匹配项的下标" class="headerlink" title="1.10 15Q25.找出字符串中第一个匹配项的下标"></a>1.10 15Q25.找出字符串中第一个匹配项的下标</h3><p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串的第一个匹配项的下标（下标从 0 开始）。如果 <code>needle</code> 不是 <code>haystack</code> 的一部分，则返回 <code>-1</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> haystack.indexOf(needle);<span class="hljs-comment">//调用函数直接返回</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strStr</span><span class="hljs-params">(String haystack, String needle)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> haystack.length(), m = needle.length();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i + m &lt;= n; i++) &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>            <span class="hljs-comment">// 比较是否相同</span><br>            <span class="hljs-keyword">if</span> (haystack.charAt(i + j) != needle.charAt(j)) &#123;<br>                <span class="hljs-comment">//haystack[i+j]与needle[j]是否相同</span><br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-11-16Q456-重复的子字符串"><a href="#1-11-16Q456-重复的子字符串" class="headerlink" title="1.11 16Q456.重复的子字符串"></a>1.11 16Q456.重复的子字符串</h3><blockquote><p>给定一个非空的字符串 <code>s</code> ，检查是否可以通过由它的一个子串重复多次构成。</p><p>如果一个长度为 nnn 的字符串 sss 可以由它的一个长度为 n′ 的子串 s′ 重复多次构成，那么：</p><ul><li>n 一定是 n′的倍数；</li><li>s′一定是 sss 的前缀；</li><li>对于任意的 i∈[n′,n),有 s[i]&#x3D;s[i−n′]。</li></ul><p>也就是说，s 中长度为 n′的前缀就是 s ，并且在这之后的每一个位置上的字符 s[i]，都需要与它之前的第 n′<br>个字符 s[i−n′] 相同。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">repeatedSubstringPattern</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> s.length();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i * <span class="hljs-number">2</span> &lt;= len; i++) &#123;<span class="hljs-comment">// 子串长度至少要小于字符串长度/2</span><br>        <span class="hljs-keyword">if</span> (len % i == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 首先需要满足字符串长度是子串的整倍数</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i; j &lt; len; j++) &#123;<br>                <span class="hljs-keyword">if</span> (s.charAt(j) != s.charAt(j - i)) &#123;<br>                    <span class="hljs-comment">/*判断是否是子串的重复</span><br><span class="hljs-comment">                    * s.charAt(j)是当前字符，s.charAt(j - i)则是可能重复的字符</span><br><span class="hljs-comment">                    */</span><br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-12-17Q686-重复叠加字符串匹配"><a href="#1-12-17Q686-重复叠加字符串匹配" class="headerlink" title="1.12 17Q686.重复叠加字符串匹配"></a>1.12 17Q686.重复叠加字符串匹配</h3><p>给定两个字符串 <code>a</code> 和 <code>b</code>，寻找重复叠加字符串 <code>a</code> 的最小次数，使得字符串 <code>b</code> 成为叠加后的字符串 <code>a</code> 的子串，如果不存在则返回 <code>-1</code>。</p><p>**注意：**字符串 <code>&quot;abc&quot;</code> 重复叠加 0 次是 <code>&quot;&quot;</code>，重复叠加 1 次是 <code>&quot;abc&quot;</code>，重复叠加 2 次是 <code>&quot;abcabc&quot;</code>。</p><blockquote><p>输入：a &#x3D; “abcd”, b &#x3D; “cdabcdab”<br>输出：3<br>解释：a 重复叠加三遍后为 “abcdabcdabcd”, 此时 b 是其子串。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">repeatedStringMatch</span><span class="hljs-params">(String a, String b)</span> &#123;<br>    <span class="hljs-comment">// 像a = &quot;abcd&quot;, b = &quot;cdabcdab&quot;这种首尾分开的还需要加上一个a的长度</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> a.length() + b.length();<br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (sb.length() &lt; max) &#123;<br>        sb.append(a);<br>        ans++;<br>        <span class="hljs-keyword">if</span> (sb.indexOf(b) != -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>至少将 a 复制长度 大于等于 b 的长度，才有可能匹配。比如： <code>a = &quot;abcd&quot;, b = &quot;abcdabcd&quot;</code> ，这时候只需要最少的复制次数2次，<code>max = b.length()</code>。若，a &#x3D; “abcd”, b &#x3D; “cdabcdab”，这个时候就需要复制3次，即在最少的次数上+1， <code>max = a.length() + b.length()</code> 。所以，至少需要将 a 复制长度 大于等于 b 的长度。当然可以设置为更长啊 <code>max = n * a.length() + b.length()</code> ，只要满足if条件就会提前退出</p></blockquote><h3 id="1-13-18Q1668-最大重复子字符串"><a href="#1-13-18Q1668-最大重复子字符串" class="headerlink" title="1.13 18Q1668.最大重复子字符串"></a>1.13 18Q1668.最大重复子字符串</h3><p>给你一个字符串 <code>sequence</code> ，如果字符串 <code>word</code> 连续重复 <code>k</code> 次形成的字符串是 <code>sequence</code> 的一个子字符串，那么单词 <code>word</code> 的 <strong>重复值为 <code>k</code></strong> 。单词 <code>word</code> 的 <strong>最****大重复值</strong> 是单词 <code>word</code> 在 <code>sequence</code> 中最大的重复值。如果 <code>word</code> 不是 <code>sequence</code> 的子串，那么重复值 <code>k</code> 为 <code>0</code> 。</p><p>给你一个字符串 <code>sequence</code> 和 <code>word</code> ，请你返回 <strong>最大重复值 <code>k</code></strong> 。</p><blockquote><p>输入：sequence &#x3D; “ababc”, word &#x3D; “ab”<br>输出：2<br>解释：”abab” 是 “ababc” 的子字符串。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxRepeating</span><span class="hljs-params">(String sequence, String word)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sequence.length() / word.length(); i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">if</span> (sequence.contains(word.repeat(i))) &#123;<br>            <span class="hljs-comment">//如果sequence包含word重复i次，则直接</span><br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-14-19Q796-旋转字符串"><a href="#1-14-19Q796-旋转字符串" class="headerlink" title="1.14 19Q796.旋转字符串"></a>1.14 19Q796.旋转字符串</h3><p>给定两个字符串, <code>s</code> 和 <code>goal</code>。如果在若干次旋转操作之后，<code>s</code> 能变成 <code>goal</code> ，那么返回 <code>true</code> 。</p><p><code>s</code> 的 <strong>旋转操作</strong> 就是将 <code>s</code> 最左边的字符移动到最右边。 </p><ul><li>例如, 若 <code>s = &#39;abcde&#39;</code>，在旋转一次之后结果就是<code>&#39;bcdea&#39;</code> 。</li></ul><blockquote><p>输入: s &#x3D; “abcde”, goal &#x3D; “cdeab”<br>输出: true</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//只要将s重复后看是否包含goal即可</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">rotateString</span><span class="hljs-params">(String s, String goal)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s.length() != goal.length()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (s + s).contains(goal);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-15-20Q1408-数组中的字符串匹配"><a href="#1-15-20Q1408-数组中的字符串匹配" class="headerlink" title="1.15 20Q1408.数组中的字符串匹配"></a>1.15 20Q1408.数组中的字符串匹配</h3><p>给你一个字符串数组 <code>words</code> ，数组中的每个字符串都可以看作是一个单词。请你按 <strong>任意</strong> 顺序返回 <code>words</code> 中是其他单词的子字符串的所有单词。</p><p>如果你可以删除 <code>words[j]</code> 最左侧和&#x2F;或最右侧的若干字符得到 <code>words[i]</code> ，那么字符串 <code>words[i]</code> 就是 <code>words[j]</code> 的一个子字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：words = [<span class="hljs-string">&quot;mass&quot;</span>,<span class="hljs-string">&quot;as&quot;</span>,<span class="hljs-string">&quot;hero&quot;</span>,<span class="hljs-string">&quot;superhero&quot;</span>]<br>输出：[<span class="hljs-string">&quot;as&quot;</span>,<span class="hljs-string">&quot;hero&quot;</span>]<br>解释：<span class="hljs-string">&quot;as&quot;</span> 是 <span class="hljs-string">&quot;mass&quot;</span> 的子字符串，<span class="hljs-string">&quot;hero&quot;</span> 是 <span class="hljs-string">&quot;superhero&quot;</span> 的子字符串。<br>[<span class="hljs-string">&quot;hero&quot;</span>,<span class="hljs-string">&quot;as&quot;</span>] 也是有效的答案。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">stringMatching</span><span class="hljs-params">(String[] words)</span> &#123;<br>    List&lt;String&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; words.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; words.length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (i != j &amp;&amp; words[j].contains(words[i])) &#123;<br>                <span class="hljs-comment">//其他字符串是否包含word[i],包含则直接记录word[i]</span><br>                ans.add(words[i]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>tips</strong>:还有字典树、AC自动机和后缀数组，这里展示不作要求。。。。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈</title>
    <link href="/2025/07/30/%E6%A0%88/"/>
    <url>/2025/07/30/%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Contents"><a href="#1-Contents" class="headerlink" title="1 Contents"></a>1 Contents</h2><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">删除字符串中的所有相邻重复项</td><td align="center">栈、字符串</td></tr><tr><td align="center">有效的括号</td><td align="center">栈、字符串</td></tr><tr><td align="center">用栈实现队列</td><td align="center">栈、队列</td></tr><tr><td align="center">用两个栈实现队列</td><td align="center">栈、队列</td></tr><tr><td align="center">从尾到头打印链表</td><td align="center">栈、递归、链表、双指针</td></tr><tr><td align="center">最小栈</td><td align="center">栈、设计</td></tr><tr><td align="center">基本计算器ii</td><td align="center">栈、数学、字符串</td></tr><tr><td align="center">每日温度</td><td align="center">栈、数组、<strong>单调栈</strong></td></tr><tr><td align="center">逆波兰表达式求值</td><td align="center">数组、数学</td></tr><tr><td align="center">字符串解码</td><td align="center">栈、递归&#x2F;辅助栈、字符串</td></tr><tr><td align="center">验证栈序列</td><td align="center">栈、数组、模拟</td></tr><tr><td align="center">简化路径</td><td align="center">字符串</td></tr></tbody></table><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">下一个更大元素i</td><td align="center">栈、数组、哈希表、单调栈</td></tr><tr><td align="center">下一个更大元素ii</td><td align="center">栈、数组、单调栈</td></tr><tr><td align="center">股票价格跨度</td><td align="center">设计、数据流、单调栈</td></tr><tr><td align="center">去除重复字母</td><td align="center">贪心、字符串、单调栈</td></tr></tbody></table><h3 id="1-1-1Q1047-删除字符串中的所有相邻重复项"><a href="#1-1-1Q1047-删除字符串中的所有相邻重复项" class="headerlink" title="1.1 1Q1047.删除字符串中的所有相邻重复项"></a>1.1 1Q1047.删除字符串中的所有相邻重复项</h3><p>给出由小写字母组成的字符串 <code>S</code>，<strong>重复项删除操作</strong>会选择两个相邻且相同的字母，并删除它们。<br>在 S 上反复执行重复项删除操作，直到无法继续删除。<br>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(String S)</span> &#123;<br>    <span class="hljs-type">char</span>[] s = S.toCharArray();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">// 定义栈底指针</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; S.length(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (top == -<span class="hljs-number">1</span> || s[top] != s[i]) &#123;<br>            s[++top] = s[i];<span class="hljs-comment">// 栈为空或入栈元素与栈顶元素不相等时元素入栈</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 此时应该删除重复项</span><br>            top--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> String.valueOf(s, <span class="hljs-number">0</span>, top + <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-2Q20-有效的括号"><a href="#1-2-2Q20-有效的括号" class="headerlink" title="1.2 2Q20.有效的括号"></a>1.2 2Q20.有效的括号</h3><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。<br>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> HashMap&lt;Character, Character&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Character, Character&gt;() &#123;<br>        &#123;<br>            put(<span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>);<br>            put(<span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>);<br>            put(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;)&#x27;</span>);<br>            put(<span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>);<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">if</span> (s.length() &gt; <span class="hljs-number">0</span> &amp;&amp; !map.containsKey(s.charAt(<span class="hljs-number">0</span>))) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 多加了一个【&#x27;?&#x27;: &#x27;?&#x27;】的键值对，用于【字符串第一个元素是右括号】的情况，防止removeLast时为空</span><br>        LinkedList&lt;Character&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Character&gt;() &#123;<br>            &#123;<br>                add(<span class="hljs-string">&#x27;?&#x27;</span>);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">for</span> (Character c : s.toCharArray()) &#123;<br>            <span class="hljs-keyword">if</span> (map.containsKey(c)) &#123;<br>                stack.addLast(c);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (map.get(stack.removeLast()) != c) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack.size() == <span class="hljs-number">1</span>;<span class="hljs-comment">//当有效时应该是stack.size() == 0，没有把问号弹出</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-3Q232-用栈实现队列"><a href="#1-3-3Q232-用栈实现队列" class="headerlink" title="1.3 3Q232.用栈实现队列"></a>1.3 3Q232.用栈实现队列</h3><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyQueue</span> &#123;<br>    <span class="hljs-comment">// 使用两个栈实现先入先出队列</span><br>    Stack&lt;Integer&gt; inStack;<br>    Stack&lt;Integer&gt; outStack;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyQueue</span><span class="hljs-params">()</span> &#123;<br>        inStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();<br>        outStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        inStack.push(x);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (outStack.isEmpty()) &#123;<br>            inStackToOutStack();<br>        &#125;<br>        <span class="hljs-keyword">return</span> outStack.pop();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (outStack.isEmpty()) &#123;<br>            inStackToOutStack();<br>        &#125;<br>        <span class="hljs-keyword">return</span> outStack.peek();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">empty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> inStack.isEmpty() &amp;&amp; outStack.isEmpty();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inStackToOutStack</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (!inStack.isEmpty()) &#123;<br>            <span class="hljs-comment">// inStack栈底元素移动到outStack栈顶</span><br>            outStack.push(inStack.pop());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-4剑指-Offer-09-用两个栈实现队列"><a href="#1-4-4剑指-Offer-09-用两个栈实现队列" class="headerlink" title="1.4 4剑指 Offer 09  用两个栈实现队列"></a>1.4 4剑指 Offer 09  用两个栈实现队列</h3><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 <code>appendTail</code> 和 <code>deleteHead</code> ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，<code>deleteHead</code> 操作返回 -1 )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CQueue</span> &#123;<br>    <span class="hljs-comment">// 使用两个栈实现先入先出队列</span><br>    Stack&lt;Integer&gt; inStack;<br>    Stack&lt;Integer&gt; outStack;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CQueue</span><span class="hljs-params">()</span> &#123;<br>        inStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();<br>        outStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendTail</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        inStack.push(value);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteHead</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(outStack.isEmpty())&#123;<br>            <span class="hljs-keyword">if</span>(inStack.isEmpty()) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            inStackToOutStack();<br>        &#125;<br>        <span class="hljs-keyword">return</span> outStack.pop();<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inStackToOutStack</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (!inStack.isEmpty()) &#123;<br>            <span class="hljs-comment">// inStack栈底元素移动到outStack栈顶</span><br>            outStack.push(inStack.pop());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-5Q155-最小栈"><a href="#1-5-5Q155-最小栈" class="headerlink" title="1.5 5Q155. 最小栈"></a>1.5 5Q155. 最小栈</h3><p>设计一个支持 <code>push</code> ，<code>pop</code> ，<code>top</code> 操作，并能在常数时间内检索到最小元素的栈。<br>实现 <code>MinStack</code> 类:</p><ul><li><code>MinStack()</code> 初始化堆栈对象。</li><li><code>void push(int val)</code> 将元素val推入堆栈。</li><li><code>void pop()</code> 删除堆栈顶部的元素。</li><li><code>int top()</code> 获取堆栈顶部的元素。</li><li><code>int getMin()</code> 获取堆栈中的最小元素。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MinStack</span> &#123;<br>    LinkedList&lt;Integer&gt; stack;<br>    LinkedList&lt;Integer&gt; minStack;<span class="hljs-comment">// 使用一个栈来存储最小值</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MinStack</span><span class="hljs-params">()</span> &#123;<br>        stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<br>        minStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<br>        minStack.push(Integer.MAX_VALUE);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        stack.push(val);<br>        minStack.push(Math.min(minStack.peek(), val));<span class="hljs-comment">// 与当前最小值比较</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        stack.pop();<br>        minStack.pop();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">top</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> stack.peek();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMin</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> minStack.peek();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-6Q227-基本计算器-II"><a href="#1-6-6Q227-基本计算器-II" class="headerlink" title="1.6 6Q227.基本计算器 II"></a>1.6 6Q227.基本计算器 II</h3><p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值。<br>整数除法仅保留整数部分。<br>你可以假设给定的表达式总是有效的。所有中间结果将在 <code>[-231, 231 - 1]</code> 的范围内。<br>**注意：**不允许使用任何将字符串作为数学表达式计算的内置函数，比如 <code>eval()</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-comment">// 由于乘除优先于加减计算，因此不妨考虑先进行所有乘除运算，并将这些乘除运算后的整数值放回原表达式的相应位置，</span><br>    Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> <span class="hljs-variable">preSign</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;+&#x27;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (Character.isDigit(s.charAt(i))) &#123;<span class="hljs-comment">// 如果是数字需要记录</span><br>            num = num * <span class="hljs-number">10</span> + (s.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>);<span class="hljs-comment">// 转换成数字</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (!Character.isDigit(s.charAt(i)) &amp;&amp; s.charAt(i) != <span class="hljs-string">&#x27; &#x27;</span> || i == n - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 不是数字、空格，或者已经是最后一个字符</span><br>            <span class="hljs-keyword">switch</span> (preSign) &#123;<br>                    <span class="hljs-comment">// 如果是+或者-则先将数字存入</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                    stack.push(num);<br>                    <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-comment">// 是*/则直接运算</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                    stack.push(-num);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                    stack.push(stack.pop() * num);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-comment">// 这里说明是最后一个字符</span><br>                    stack.push(stack.pop() / num);<br>            &#125;<br>            preSign = s.charAt(i);<br>            num = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>        <span class="hljs-comment">// 现在只有+运算（减法已经变成负数）</span><br>        ans += stack.pop();<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-7-7Q739-每日温度"><a href="#1-7-7Q739-每日温度" class="headerlink" title="1.7 7Q739.每日温度"></a>1.7 7Q739.每日温度</h3><p><a href="https://oi-wiki.org/ds/monotonous-stack/">单调栈 - OI Wiki (oi-wiki.org)</a></p><p>给定一个整数数组 <code>temperatures</code> ，表示每天的温度，返回一个数组 <code>answer</code> ，其中 <code>answer[i]</code> 是指对于第 <code>i</code> 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 <code>0</code> 来代替。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这里的单调栈是温度递减对应的天数</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] dailyTemperatures(<span class="hljs-type">int</span>[] temperatures) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> temperatures.length;<br>    <span class="hljs-type">int</span>[] answer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>    Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; temperatures.length; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temperature</span> <span class="hljs-operator">=</span> temperatures[i];<br>        <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; temperature &gt; temperatures[stack.peek()]) &#123;<br>            <span class="hljs-comment">// 当前温度大于单调栈存对应的栈顶温度</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> stack.pop();<span class="hljs-comment">// 弹出对应天数</span><br>            answer[day] = i - day;<span class="hljs-comment">//</span><br>        &#125;<br>        <span class="hljs-comment">// 当栈为空或者当前温度小于栈顶天数对应温度</span><br>        stack.push(i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> answer;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-8-8Q150-逆波兰表达式求值"><a href="#1-8-8Q150-逆波兰表达式求值" class="headerlink" title="1.8 8Q150.逆波兰表达式求值"></a>1.8 8Q150.逆波兰表达式求值</h3><p>给你一个字符串数组 <code>tokens</code> ，表示一个根据 <a href="https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437">逆波兰表示法</a> (后缀表达式、王道考研P89)表示的算术表达式。<br>请你计算该表达式。返回一个表示表达式值的整数。</p><blockquote><p>输入：tokens &#x3D; [“2”,”1”,”+”,”3”,”*”]<br>输出：9<br>解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) &#x3D; 9</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">evalRPN</span><span class="hljs-params">(String[] tokens)</span> &#123;<br>        Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tokens.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (isNumber(tokens[i])) &#123;<br>                <span class="hljs-comment">// 是数字则入栈</span><br>                stack.push(Integer.parseInt(tokens[i]));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 非数字则弹栈计算</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> stack.pop();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> stack.pop();<br>                <span class="hljs-keyword">switch</span> (tokens[i]) &#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>                        stack.push(x + y);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:<br>                        stack.push(x - y);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>                        stack.push(x * y);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>                        stack.push(x / y);<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack.pop();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNumber</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-keyword">return</span> !(<span class="hljs-string">&quot;+&quot;</span>.equals(token) || <span class="hljs-string">&quot;-&quot;</span>.equals(token) || <span class="hljs-string">&quot;*&quot;</span>.equals(token) || <span class="hljs-string">&quot;/&quot;</span>.equals(token));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-9-9Q394-字符串解码"><a href="#1-9-9Q394-字符串解码" class="headerlink" title="1.9 9Q394.字符串解码"></a>1.9 9Q394.字符串解码</h3><p>给定一个经过编码的字符串，返回它解码后的字符串。<br>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的 <code>encoded_string</code> 正好重复 <code>k</code> 次。注意 <code>k</code> 保证为正整数。<br>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。<br>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 <code>k</code> ，例如不会出现像 <code>3a</code> 或 <code>2[4]</code> 的输入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">decodeString</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">multi</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// 记录倍数</span><br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    Stack&lt;Integer&gt; multiStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<span class="hljs-comment">// 记录倍数</span><br>    Stack&lt;StringBuilder&gt; restack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<span class="hljs-comment">//记录一个[]的结果</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray()) &#123;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>            multiStack.push(multi);<br>            restack.push(res);<br>            multi = <span class="hljs-number">0</span>;<span class="hljs-comment">// 压栈之后归零</span><br>            res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<span class="hljs-comment">//置为空，需要记录一个新[]的内容</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;]&#x27;</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">cur_multi</span> <span class="hljs-operator">=</span> multiStack.pop();<span class="hljs-comment">// 记录最近的倍数</span><br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cur_multi; i++) &#123;<br>                <span class="hljs-comment">// 倍数拼接</span><br>                temp.append(res);<br>            &#125;<br>            <span class="hljs-comment">// 外层括号拼接</span><br>            res = restack.pop().append(temp);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>            multi = c - <span class="hljs-string">&#x27;0&#x27;</span> + multi * <span class="hljs-number">10</span>;<span class="hljs-comment">// 这里需要考虑到多位数</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 是字母则拼接</span><br>            res.append(c);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-10-10Q946-验证栈序列"><a href="#1-10-10Q946-验证栈序列" class="headerlink" title="1.10 10Q946.验证栈序列"></a>1.10 10Q946.验证栈序列</h3><p>给定 <code>pushed</code> 和 <code>popped</code> 两个序列，每个序列中的 <strong>值都不重复</strong>，只有当它们可能是在最初空栈上进行的推入 push 和弹出 pop 操作序列的结果时，返回 <code>true</code>；否则，返回 <code>false</code> 。</p><blockquote><p>输入：pushed &#x3D; [1,2,3,4,5], popped &#x3D; [4,5,3,2,1]<br>输出：true<br>解释：我们可以按以下顺序执行：<br>push(1), push(2), push(3), push(4), pop() -&gt; 4,<br>push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">validateStackSequences</span><span class="hljs-params">(<span class="hljs-type">int</span>[] pushed, <span class="hljs-type">int</span>[] popped)</span> &#123;<br>    Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; pushed.length; i++) &#123;<br>        stack.push(pushed[i]);<br>        <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() == popped[j]) &#123;<br>            stack.pop();<span class="hljs-comment">// 当栈顶元素等于pop数组的元素</span><br>            j++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> stack.isEmpty();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-11-11Q71-简化路径"><a href="#1-11-11Q71-简化路径" class="headerlink" title="1.11 11Q71.简化路径"></a>1.11 11Q71.简化路径</h3><p>给你一个字符串 <code>path</code> ，表示指向某一文件或目录的 Unix 风格 <strong>绝对路径</strong> （以 <code>&#39;/&#39;</code> 开头），请你将其转化为更加简洁的规范路径。<br>在 Unix 风格的文件系统中，一个点（<code>.</code>）表示当前目录本身；此外，两个点 （<code>..</code>） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，<code>&#39;//&#39;</code>）都被视为单个斜杠 <code>&#39;/&#39;</code> 。 对于此问题，任何其他格式的点（例如，<code>&#39;...&#39;</code>）均被视为文件&#x2F;目录名称。</p><p>—相当于规范化目录</p><blockquote><p>输入：path &#x3D; “&#x2F;home&#x2F;“<br>输出：”&#x2F;home”<br>解释：注意，最后一个目录名后面没有斜杠。 </p><p>输入：path &#x3D; “&#x2F;home&#x2F;&#x2F;foo&#x2F;“<br>输出：”&#x2F;home&#x2F;foo”<br>解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。</p></blockquote><p>1、先把路径根据<code>&quot;/&quot;</code>分割成字符串数组，建立个栈备用（最好用个可以从栈底遍历的，比如<code>LinkedlList</code>）；</p><p>2、遍历数组，遇到空串或者<code>&quot;.&quot;</code>直接跳过；遇到<code>&quot;..&quot;</code>表示的是上一级别的路径，也就是把栈中的最后一个路径移除（注意假如栈空就直接跳过），其他的字符串直接入栈（这里包括其他数量的<code>&quot;.&quot;</code>）；</p><p>3、假如栈空，直接返回默认空路径<code>&quot;/&quot;</code>，其他的情况把每个路径标记前边加个<code>&quot;/&quot;</code>之后串起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">simplifyPath</span><span class="hljs-params">(String path)</span> &#123;<br>    Stack&lt;String&gt; paths = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;String&gt;();<br>    String[] p = path.split(<span class="hljs-string">&quot;/&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; p.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (p[i].equals(<span class="hljs-string">&quot;.&quot;</span>) || p[i].length() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;<span class="hljs-comment">// 空串和当前路径“/”直接跳过</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p[i].equals(<span class="hljs-string">&quot;..&quot;</span>)) &#123;<br>            <span class="hljs-keyword">if</span> (!paths.isEmpty()) &#123;<br>                paths.pop();<span class="hljs-comment">// 上一级路径“..”弹栈</span><br>            &#125;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            paths.push(p[i]);<span class="hljs-comment">// 此时说明是目录名</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paths.size(); i++) &#123;<br>        ans.append(<span class="hljs-string">&quot;/&quot;</span>).append(paths.get(i));<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans.length() == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;/&quot;</span> : ans.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-12-12Q496-下一个更大元素i"><a href="#1-12-12Q496-下一个更大元素i" class="headerlink" title="1.12 12Q496.下一个更大元素i"></a>1.12 12Q496.下一个更大元素i</h3><p><code>nums1</code> 中数字 <code>x</code> 的 <strong>下一个更大元素</strong> 是指 <code>x</code> 在 <code>nums2</code> 中对应位置 <strong>右侧</strong> 的 <strong>第一个</strong> 比 <code>x</code> 大的元素。<br>给你两个 <strong>没有重复元素</strong> 的数组 <code>nums1</code> 和 <code>nums2</code> ，下标从 <strong>0</strong> 开始计数，其中<code>nums1</code> 是 <code>nums2</code> 的子集。<br>对于每个 <code>0 &lt;= i &lt; nums1.length</code> ，找出满足 <code>nums1[i] == nums2[j]</code> 的下标 <code>j</code> ，并且在 <code>nums2</code> 确定 <code>nums2[j]</code> 的 <strong>下一个更大元素</strong> 。如果不存在下一个更大元素，那么本次查询的答案是 <code>-1</code> 。<br>返回一个长度为 <code>nums1.length</code> 的数组 <code>ans</code> 作为答案，满足 <code>ans[i]</code> 是如上所述的 <strong>下一个更大元素</strong> 。</p><ol><li>先遍历大数组nums2，首先将第一个元素入栈；</li><li>继续遍历，当前元素小于栈顶元素时，继续将它入栈；当前元素大于栈顶元素时，栈顶元素出栈，此时应将该出栈的元素与当前元素形成key-value键值对，存入HashMap中,当前元素入栈；</li><li>当遍历完nums2后，得到nums2中元素所对应的下一个更大元素的hash表；</li><li>遍历nums1的元素在hashMap中去查找‘下一个更大元素’，当找不到时则为-1。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301136724.png" alt="|587|1000"></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] nextGreaterElement(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums1.length;<br>    <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[len];<br>    Deque&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>    HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Integer&gt;();<br>    <span class="hljs-keyword">for</span> (Integer num : nums2) &#123;<br>        <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() &lt; num) &#123;<br>            map.put(stack.pop(), num);<span class="hljs-comment">// 当前元素大于栈顶元素，</span><br>            <span class="hljs-comment">// 说明弹栈元素的右侧第一个大的元素不是当前元素</span><br>        &#125;<br>        stack.push(num);<span class="hljs-comment">// 当前元素num小于栈顶元素/栈为空，说明当前元素左边的元素下一个更大的值可能是当前元素</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums1.length; i++) &#123;<br>        ans[i] = map.getOrDefault(nums1[i], -<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>最后stack&#x3D;{2,4}，map&#x3D;{（1,3），（3,4）}</p></blockquote><h3 id="1-13-13Q503-下一个更大元素ii"><a href="#1-13-13Q503-下一个更大元素ii" class="headerlink" title="1.13 13Q503.下一个更大元素ii"></a>1.13 13Q503.下一个更大元素ii</h3><p>给定一个循环数组 <code>nums</code> （ <code>nums[nums.length - 1]</code> 的下一个元素是 <code>nums[0]</code> ），返回 <em><code>nums</code> 中每个元素的 <strong>下一个更大元素</strong></em> 。</p><p>数字 <code>x</code> 的 <strong>下一个更大的元素</strong> 是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 <code>-1</code> 。</p><blockquote><p>输入: nums &#x3D; [1,2,1]<br>输出: [2,-1,2]<br>解释: 第一个 1 的下一个更大的数是 2；<br>数字 2 找不到下一个更大的数；<br>第二个 1 的下一个最大的数需要循环搜索，结果也是 2。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] nextGreaterElements(<span class="hljs-type">int</span>[] nums) &#123;<br>    <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>    Arrays.fill(ans, -<span class="hljs-number">1</span>);<br>    Deque&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;Integer&gt;();<span class="hljs-comment">// 栈里存放的是数组下标</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-comment">// 相当于需要遍历两次</span><br>        <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; nums[i % nums.length] &gt; nums[stack.peek()]) &#123;<span class="hljs-comment">// 栈顶下标数组值小于当前数组值</span><br>            <span class="hljs-comment">// 对应下标弹栈并赋值</span><br>            ans[stack.pop()] = nums[i % nums.length];<br>        &#125;<br>        stack.push(i % nums.length);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-14-14Q901-股票价格跨度"><a href="#1-14-14Q901-股票价格跨度" class="headerlink" title="1.14 14Q901.股票价格跨度"></a>1.14 14Q901.股票价格跨度</h3><p>设计一个算法收集某些股票的每日报价，并返回该股票当日价格的 <strong>跨度</strong> 。</p><p>当日股票价格的 <strong>跨度</strong> 被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。</p><ul><li>例如，如果未来 7 天股票的价格是 <code>[100,80,60,70,60,75,85]</code>，那么股票跨度将是 <code>[1,1,1,2,1,4,6]</code> 。</li></ul><p>实现 <code>StockSpanner</code> 类：</p><ul><li><code>StockSpanner()</code> 初始化类对象。</li><li><code>int next(int price)</code> 给出今天的股价 <code>price</code> ，返回该股票当日价格的 <strong>跨度</strong> 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StockSpanner</span> &#123;<br>    <span class="hljs-comment">// 递减单调栈</span><br>    Deque&lt;<span class="hljs-type">int</span>[]&gt; stack;<br>    <span class="hljs-type">int</span> index;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StockSpanner</span><span class="hljs-params">()</span> &#123;<br>        stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>        stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123; -<span class="hljs-number">1</span>, Integer.MAX_VALUE &#125;);<br>        index = -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">next</span><span class="hljs-params">(<span class="hljs-type">int</span> price)</span> &#123;<br>        index++;<span class="hljs-comment">// 天数+1</span><br>        <span class="hljs-keyword">while</span> (stack.peek()[<span class="hljs-number">1</span>] &lt;= price) &#123;<br>            stack.pop();<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> index - stack.peek()[<span class="hljs-number">0</span>];<span class="hljs-comment">// 计算天数</span><br>        stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123; index, price &#125;);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-15-15Q316-去除重复字母"><a href="#1-15-15Q316-去除重复字母" class="headerlink" title="1.15 15Q316.去除重复字母"></a>1.15 15Q316.去除重复字母</h3><p>给你一个字符串 <code>s</code> ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 <strong>返回结果的字典序最小</strong>（要求不能打乱其他字符的相对位置）。</p><blockquote><p>输入：s &#x3D; “bcabc”<br>输出：”abc”</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">removeDuplicateLetters</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-type">boolean</span>[] vis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[<span class="hljs-number">26</span>];<span class="hljs-comment">// 记录是否已在栈内</span><br>    <span class="hljs-type">int</span>[] num = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        num[s.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>]++;<span class="hljs-comment">// 记录字符数量</span><br>    &#125;<br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> s.charAt(i);<br>        <span class="hljs-keyword">if</span> (!vis[ch - <span class="hljs-string">&#x27;a&#x27;</span>]) &#123;<br>            <span class="hljs-comment">// 未在栈内</span><br>            <span class="hljs-keyword">while</span> (sb.length() &gt; <span class="hljs-number">0</span> &amp;&amp; sb.charAt(sb.length() - <span class="hljs-number">1</span>) &gt; ch) &#123;<br>                <span class="hljs-comment">// 当栈顶字母大于当前字母且未入栈</span><br>                <span class="hljs-keyword">if</span> (num[sb.charAt(sb.length() - <span class="hljs-number">1</span>) - <span class="hljs-string">&#x27;a&#x27;</span>] &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// 说明之后还有栈顶字母，则弹栈（记录为未在栈内）</span><br>                    vis[sb.charAt(sb.length() - <span class="hljs-number">1</span>) - <span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-literal">false</span>;<br>                    sb.deleteCharAt(sb.length() - <span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 之后没有该字母</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 记录已在栈内且入栈</span><br>            vis[ch - <span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-literal">true</span>;<br>            sb.append(ch);<br>        &#125;<br>        num[ch - <span class="hljs-string">&#x27;a&#x27;</span>]--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在考虑字符 s[i]时，如果它已经存在于栈中，则不能加入字符 s[i]。为此，需要记录每个字符是否出现在栈中。</p><p>在弹出栈顶字符时，如果字符串在后面的位置上再也没有这一字符，则不能弹出栈顶字符。为此，需要记录每个字符的剩余数量，当这个值为 0 时，就不能弹出栈顶字符了。</p><p>寻找下一个更大&#x2F;小的这种题目，必选单调栈</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>队列</title>
    <link href="/2025/07/30/%E9%98%9F%E5%88%97/"/>
    <url>/2025/07/30/%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Contents"><a href="#1-Contents" class="headerlink" title="1 Contents"></a>1 Contents</h2><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">设计循环队列</td><td align="center">设计、队列、数组、链表</td></tr><tr><td align="center">用队列实现栈</td><td align="center">栈、设计、队列</td></tr></tbody></table><p><strong>优先队列</strong></p><p><strong>PriorityQueue（优先队列）</strong> 采用的是堆排序，<br>实际上是一个堆（不指定Comparator时默认为最小堆）<br>队列既可以根据元素的自然顺序来排序，也可以根据 Comparator来设置排序规则。<br>队列的头是按指定排序方式的<strong>最小元素</strong>(入队则重新排序)。如果多个元素都是最小值，则头是其中一个元素。<br>新建对象的时候可以指定一个初始容量，其容量会自动增加。</p><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">数据流中的第 K 大元素</td><td align="center">树、设计、二叉搜索树、二叉树、数据流、堆（优先队列）</td></tr><tr><td align="center">前 K 个高频元素</td><td align="center">数组、哈希表、分治、桶排序、计数、快速选择、排序、堆（优先队列）</td></tr><tr><td align="center">根据字符出现频率排序</td><td align="center">哈希表、字符串、桶排序、计数、排序、堆（优先队列）</td></tr><tr><td align="center">最接近原点的 K 个点</td><td align="center">几何、数组、数学、分治、快速选择、排序、堆（优先队列）</td></tr><tr><td align="center">划分数组为连续数字的集合</td><td align="center">贪心、数组、哈希表、排序</td></tr></tbody></table><h3 id="1-1-1Q622-设计循环队列"><a href="#1-1-1Q622-设计循环队列" class="headerlink" title="1.1 1Q622.设计循环队列"></a>1.1 1Q622.设计循环队列</h3><p>​设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。<br>循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。<br>你的实现应该支持如下操作：</p><ul><li><p><code>MyCircularQueue(k)</code>: 构造器，设置队列长度为 k 。</p></li><li><p><code>Front</code>: 从队首获取元素。如果队列为空，返回 -1 。</p></li><li><p><code>Rear</code>: 获取队尾元素。如果队列为空，返回 -1 。</p></li><li><p><code>enQueue(value)</code>: 向循环队列插入一个元素。如果成功插入则返回真。</p></li><li><p><code>deQueue()</code>: 从循环队列中删除一个元素。如果成功删除则返回真。</p></li><li><p><code>isEmpty()</code>: 检查循环队列是否为空。</p></li><li><p><code>isFull()</code>: 检查循环队列是否已满。</p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/imags/202407261118858.png" style="zoom:67%;" /></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCircularQueue</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> front;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rear;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] elements;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCircularQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> &#123;<br>        size = k + <span class="hljs-number">1</span>;<span class="hljs-comment">// 牺牲一个存储单元来区分是否队满</span><br>        elements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        rear = front = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">enQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 入队并队尾指针后移</span><br>            elements[rear] = value;<br>            rear = (rear + <span class="hljs-number">1</span>) % size;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 队首指针后移</span><br>            front = (front + <span class="hljs-number">1</span>) % size;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Front</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> elements[front];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Rear</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 注意这里不能直接返回 element[rear-1],rear=0时越界</span><br>            <span class="hljs-keyword">return</span> elements[((rear - <span class="hljs-number">1</span>) + size) % size];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> rear == front;<span class="hljs-comment">// 队首指针等于队尾指针时为空</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (rear + <span class="hljs-number">1</span>) % size == front;<span class="hljs-comment">// 牺牲一个存储单元判断队满</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-2Q225-用队列实现栈"><a href="#1-2-2Q225-用队列实现栈" class="headerlink" title="1.2 2Q225.用队列实现栈"></a>1.2 2Q225.用队列实现栈</h3><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）。</p><p>实现 <code>MyStack</code> 类：</p><ul><li><code>void push(int x)</code> 将元素 x 压入栈顶。</li><li><code>int pop()</code> 移除并返回栈顶元素。</li><li><code>int top()</code> 返回栈顶元素。</li><li><code>boolean empty()</code> 如果栈是空的，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li></ul><blockquote><p>难点在于入队的操作：需要将数据放入queue2，然后将queue1的数据全部出队放入queue2，此时此时queue2存着所有正确顺序的数据，</p><p>则需要将queueu2与queue1交换</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStack</span> &#123;<br>    Queue&lt;Integer&gt; queue1;<br>    Queue&lt;Integer&gt; queue2;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyStack</span><span class="hljs-params">()</span> &#123;<br>        queue1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<span class="hljs-comment">// 存数据</span><br>        queue2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<span class="hljs-comment">// 辅助队列</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        queue2.offer(x);<br>        <span class="hljs-keyword">while</span> (!queue1.isEmpty()) &#123;<br>            <span class="hljs-comment">// 此时queue2存着所有正确顺序的数据</span><br>            queue2.offer(queue1.poll());<br>        &#125;<br>        <span class="hljs-comment">// 交换queue1和queue2</span><br>        Queue&lt;Integer&gt; temp = queue1;<br>        queue1 = queue2;<br>        queue2 = temp;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> queue1.poll();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">top</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> queue1.peek();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">empty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> queue1.isEmpty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-3Q703-数据流中的第-K-大元素"><a href="#1-3-3Q703-数据流中的第-K-大元素" class="headerlink" title="1.3 3Q703.数据流中的第 K 大元素"></a>1.3 3Q703.数据流中的第 K 大元素</h3><p>设计一个找到数据流中第 <code>k</code> 大元素的类（class）。注意是排序后的第 <code>k</code> 大元素，不是第 <code>k</code> 个不同的元素。<br>请实现 <code>KthLargest</code> 类：</p><ul><li><code>KthLargest(int k, int[] nums)</code> 使用整数 <code>k</code> 和整数流 <code>nums</code> 初始化对象。</li><li><code>int add(int val)</code> 将 <code>val</code> 插入数据流 <code>nums</code> 后，返回当前数据流中第 <code>k</code> 大的元素。</li></ul><p>使用一个大小为 k 的优先队列来存储前 k 大的元素，其中优先队列的队头为队列中最小的元素，也就是第 k 大的元素。</p><blockquote><p>在单次插入的操作中，我们首先将元素 val 加入到优先队列中。如果此时优先队列的大小大于 k，我们需要将优先队列的队头元素弹出，以保证优先队列的大小为 k。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">KthLargest</span> &#123;<br>    PriorityQueue&lt;Integer&gt; pq;<br>    <span class="hljs-type">int</span> k;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">KthLargest</span><span class="hljs-params">(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-built_in">this</span>.k = k;<br>        pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : nums) &#123;<br>            pq.offer(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        pq.offer(val);<br>        <span class="hljs-keyword">while</span> (pq.size() &gt; k) &#123;<br>            pq.poll();<br>        &#125;<br>        <span class="hljs-keyword">return</span> pq.peek();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-4Q374-前-K-个高频元素"><a href="#1-4-4Q374-前-K-个高频元素" class="headerlink" title="1.4 4Q374.前 K 个高频元素"></a>1.4 4Q374.前 K 个高频元素</h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回其中出现频率前 <code>k</code> 高的元素。你可以按 <strong>任意顺序</strong> 返回答案。</p><blockquote><p>可以利用堆的思想：建立一个小顶堆，然后遍历「出现次数数组」：</p><p>如果堆的元素个数小于 kkk，就可以直接插入堆中。<br>如果堆的元素个数等于 kkk，则检查堆顶与当前出现次数的大小。如果堆顶更大，说明至少有 kkk 个数字的出现次数比当前值大，故舍弃当前值；否则，就弹出堆顶，并将当前值插入堆中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] topKFrequent(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k) &#123;<br>    Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : nums) &#123;<br>        <span class="hljs-comment">// 建立数字与个数的对应关系</span><br>        map.put(x, map.getOrDefault(x, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">// 自定义比较器进行排序</span><br>    PriorityQueue&lt;Map.Entry&lt;Integer, Integer&gt;&gt; pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;((e1, e2) -&gt; e2.getValue() - e1.getValue());<br>    pq.addAll(map.entrySet());<br>    <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[k];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k &amp;&amp; !pq.isEmpty(); i++) &#123;<br>        ans[i] = pq.poll().getKey();<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-5Q973-最接近原点的-K-个点"><a href="#1-5-5Q973-最接近原点的-K-个点" class="headerlink" title="1.5 5Q973.最接近原点的 K 个点"></a>1.5 5Q973.最接近原点的 K 个点</h3><p>给定一个数组 <code>points</code> ，其中 <code>points[i] = [xi, yi]</code> 表示 <strong>X-Y</strong> 平面上的一个点，并且是一个整数 <code>k</code> ，返回离原点 <code>(0,0)</code> 最近的 <code>k</code> 个点。</p><p>这里，平面上两点之间的距离是 <strong>欧几里德距离</strong>（ <code>√(x1 - x2)2 + (y1 - y2)2</code> ）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] kClosest(<span class="hljs-type">int</span>[][] points, <span class="hljs-type">int</span> k) &#123;<br>    Arrays.sort(points, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;<span class="hljs-type">int</span>[]&gt;() &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">int</span>[] point1, <span class="hljs-type">int</span>[] point2)</span> &#123;<br>            <span class="hljs-keyword">return</span> (point1[<span class="hljs-number">0</span>] * point1[<span class="hljs-number">0</span>] + point1[<span class="hljs-number">1</span>] * point1[<span class="hljs-number">1</span>])<br>                - (point2[<span class="hljs-number">0</span>] * point2[<span class="hljs-number">0</span>] + point2[<span class="hljs-number">1</span>] * point2[<span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> Arrays.copyOfRange(points, <span class="hljs-number">0</span>, k);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-6Q1296-划分数组为连续数字的集合"><a href="#1-6-6Q1296-划分数组为连续数字的集合" class="headerlink" title="1.6 6Q1296.划分数组为连续数字的集合"></a>1.6 6Q1296.划分数组为连续数字的集合</h3><p>给你一个整数数组 <code>nums</code> 和一个正整数 <code>k</code>，请你判断是否可以把这个数组划分成一些由 <code>k</code> 个连续数字组成的集合。<br>如果可以，请返回 <code>true</code>；否则，返回 <code>false</code>。</p><p>输入：nums &#x3D; [1,2,3,3,4,4,5,6], k &#x3D; 4<br>输出：true<br>解释：数组可以分成 [1,2,3,4] 和 [3,4,5,6]。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPossibleDivide</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;<br>    PriorityQueue&lt;Integer&gt; pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Integer integer : nums) &#123;<br>        pq.offer(integer);<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!pq.isEmpty()) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> pq.poll();<span class="hljs-comment">// 队首元素出队</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">// 查看是否连续</span><br>            <span class="hljs-keyword">if</span> (!pq.contains(num + <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">// 如果不包含num+1说明不连续则直接返回false</span><br>            &#125;<br>            pq.remove(++num);<span class="hljs-comment">// 包含num+1说明连续，则直接出队--这里要注意是num+1出队</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2024/09/20/%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/09/20/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="0-1-Contents"><a href="#0-1-Contents" class="headerlink" title="0.1 Contents"></a>0.1 Contents</h3><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">回文链表</td><td align="center">反转、双指针</td></tr><tr><td align="center">合并两个有序链表</td><td align="center">双指针、递归</td></tr><tr><td align="center">设计链表</td><td align="center">设计、链表</td></tr><tr><td align="center">反转链表</td><td align="center">双指针</td></tr><tr><td align="center">反转链表ii</td><td align="center">哑结点</td></tr><tr><td align="center">移除链表元素</td><td align="center">哑结点</td></tr><tr><td align="center">删除排序链表中的重复元素</td><td align="center">链表</td></tr><tr><td align="center">删除排序链表中的重复元素ii</td><td align="center">链表、双指针</td></tr><tr><td align="center">复制带随机指针的链表</td><td align="center">递归、哈希表</td></tr><tr><td align="center">旋转链表</td><td align="center">双指针</td></tr></tbody></table><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">排序链表</td><td align="center">双指针、分治、排序、归并排序</td></tr><tr><td align="center">对链表进行插入排序</td><td align="center">插入排序</td></tr></tbody></table><table><thead><tr><th align="center">标题</th><th align="center">标签</th></tr></thead><tbody><tr><td align="center">相交链表</td><td align="center">哈希表、双指针</td></tr><tr><td align="center">链表的中间结点</td><td align="center">双指针</td></tr><tr><td align="center">环形链表i</td><td align="center">链表、双指针</td></tr><tr><td align="center">环形链表ii</td><td align="center">哈希表、链表、双指针</td></tr><tr><td align="center">删除链表的倒数第 N 个结点</td><td align="center">链表、双指针</td></tr><tr><td align="center">重链表</td><td align="center">递归、链表、双指针、线性表</td></tr><tr><td align="center">两数相加</td><td align="center">链表、双指针</td></tr><tr><td align="center">两数相加ii</td><td align="center">链表、双指针</td></tr></tbody></table><h3 id="0-2-1Q234-回文链表"><a href="#0-2-1Q234-回文链表" class="headerlink" title="0.2 1Q234.回文链表"></a>0.2 1Q234.回文链表</h3><p>给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。</p><p><a href="https://blog.csdn.net/weixin_51609435/article/details/124770417?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168994342316800182734913%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168994342316800182734913&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124770417-null-null.142%5Ev90%5Econtrol,239%5Ev3%5Econtrol&utm_term=%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8&spm=1018.2226.3001.4187">题解点这里</a></p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134977.png" alt="|800"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, slow = head, fast = head;<br>    <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>        fast = fast.next.next;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> slow.next;<span class="hljs-comment">// temp指向slow的下一结点</span><br>        slow.next = cur;<span class="hljs-comment">// slow的下一结点赋值给之前的slow</span><br>        cur = slow;<br>        slow = temp;<span class="hljs-comment">// slow后移</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (fast != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 此时说明是偶数链表，为统一，slow后移</span><br>        slow = slow.next;<br>    &#125;<br>    <span class="hljs-comment">// 此时前半段链表已经反转，由cur指向第一个节点</span><br>    <span class="hljs-comment">// 后半段链表由slow指向第一个结点</span><br>    <span class="hljs-keyword">while</span> (slow != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (slow.val != cur.val) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            slow = slow.next;<br>            cur = cur.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-3-2Q21-合并两个有序链表"><a href="#0-3-2Q21-合并两个有序链表" class="headerlink" title="0.3 2Q21.合并两个有序链表"></a>0.3 2Q21.合并两个有序链表</h3><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode list1, ListNode list2)</span> &#123;<br>    <span class="hljs-comment">/**循环+双指针**/</span><br>    <span class="hljs-comment">//当某个链表为空时，返回另一个链表</span><br>    <span class="hljs-comment">// if (list1==null) return list2;</span><br>    <span class="hljs-comment">// if (list2==null) return list1;</span><br>    <span class="hljs-comment">// //定义结果节点</span><br>    <span class="hljs-comment">// ListNode resultNode=new ListNode(0);</span><br>    <span class="hljs-comment">// ListNode p=resultNode;</span><br>    <span class="hljs-comment">// while(list1!=null&amp;&amp;list2!=null)&#123;</span><br>    <span class="hljs-comment">//     if (list1.val&lt;list2.val)</span><br>    <span class="hljs-comment">//     &#123;</span><br>    <span class="hljs-comment">//         p.next=list1;</span><br>    <span class="hljs-comment">//         list1=list1.next;</span><br>    <span class="hljs-comment">//     &#125;else</span><br>    <span class="hljs-comment">//     &#123;</span><br>    <span class="hljs-comment">//         p.next=list2;</span><br>    <span class="hljs-comment">//         list2=list2.next;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">//     p=p.next;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// //当某个链表为空时</span><br>    <span class="hljs-comment">// if (list1!=null)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     p.next=list1;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// if (list2!=null)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     p.next=list2;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// return resultNode.next;</span><br>    <span class="hljs-comment">/**递归写法**/</span><br>    <span class="hljs-keyword">if</span> (list1==<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> list2;<br>    <span class="hljs-keyword">if</span> (list2==<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> list1;<br>    <span class="hljs-keyword">if</span>(list1.val&lt;list2.val)&#123;<br>        list1.next=mergeTwoLists(list1.next,list2);<br>        <span class="hljs-keyword">return</span> list1;<br>    &#125;<br>    list2.next=mergeTwoLists(list2.next,list1);<br>    <span class="hljs-keyword">return</span> list2;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-4-3Q707-设计链表"><a href="#0-4-3Q707-设计链表" class="headerlink" title="0.4 3Q707.设计链表"></a>0.4 3Q707.设计链表</h3><p>你可以选择使用单链表或者双链表，设计并实现自己的链表。<br>单链表中的节点应该具备两个属性：val 和 next 。val 是当前节点的值，next 是指向下一个节点的指针&#x2F;引用。<br>如果是双向链表，则还需要属性 prev 以指示链表中的上一个节点。假设链表中的所有节点下标从 0 开始。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLinkedList</span> &#123;<br>    <span class="hljs-type">int</span> size;<br>    ListNode head;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyLinkedList</span><span class="hljs-params">()</span> &#123;<br>        size = <span class="hljs-number">0</span>;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取链表中下标为 index 的节点的值。如果下标无效，则返回 -1 。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= size) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= index; i++) &#123;<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cur.val;<br>    &#125;<br><br>    <span class="hljs-comment">// 将一个值为 val 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtHead</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(<span class="hljs-number">0</span>, val);<br>    &#125;<br><br>    <span class="hljs-comment">// 将一个值为 val 的节点追加到链表中作为链表的最后一个元素。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtTail</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(size, val);<br>    &#125;<br><br>    <span class="hljs-comment">// 将一个值为 val 的节点插入到链表中下标为 index 的节点之前。如果 index 等于链表的长度，那么该节点会被追加到链表的末尾。如果 index</span><br>    <span class="hljs-comment">// 比长度更大，该节点将 不会插入 到链表中。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; size) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-comment">// 插入到index之前</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(val);<br>        temp.next = cur.next;<br>        cur.next = temp;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果下标有效，则删除链表中下标为 index 的节点。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= size) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-comment">// 前一个结点</span><br>        cur.next = cur.next.next;<br>        size--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-5-4Q206-反转链表"><a href="#0-5-4Q206-反转链表" class="headerlink" title="0.5 4Q206.反转链表"></a>0.5 4Q206.反转链表</h3><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//迭代实现</span><br><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-comment">// pre记录前一个节点（因为链表没有指向前一个的指针），next记录下一个节点</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, next;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        next = cur.next;<span class="hljs-comment">// next指向下一个节点</span><br>        cur.next = pre;<span class="hljs-comment">// 当前节点指向前一个节点</span><br>        pre = cur;<span class="hljs-comment">// 前一个节点指向当前节点</span><br>        cur = next;<span class="hljs-comment">// 当前节点指向下一个节点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br><span class="hljs-comment">//递归实现</span><br><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-comment">// 从后往前两两反转</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">new_head</span> <span class="hljs-operator">=</span> reverseList(head.next);<br>    <span class="hljs-comment">// 这里是两个节点的反转</span><br>    head.next.next = head;<br>    head.next = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> new_head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-6-5Q92-反转链表ii"><a href="#0-6-5Q92-反转链表ii" class="headerlink" title="0.6 5Q92.反转链表ii"></a>0.6 5Q92.反转链表ii</h3><p>给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;&#x3D; right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。</p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134978.png" alt="|537|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>    <span class="hljs-comment">// 使用哑结点,避免讨论（[1,2],1,1的情况下避免讨论）</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>    dummyNode.next = head;<br><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> dummyNode, suc;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; left - <span class="hljs-number">1</span>; i++) &#123;<br>        pre = pre.next;<span class="hljs-comment">// pre指向left结点的前一个结点</span><br>    &#125;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">leftNode</span> <span class="hljs-operator">=</span> dummyNode, rightNode = dummyNode;<br>    leftNode = pre.next;<span class="hljs-comment">// 指向left结点</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; right; i++) &#123;<br>        rightNode = rightNode.next;<span class="hljs-comment">// 指向right结点</span><br>    &#125;<br>    suc = rightNode.next;<span class="hljs-comment">// 指向right后一结点</span><br>    <span class="hljs-comment">// 截断链表,取出要反转的部分</span><br>    pre.next = <span class="hljs-literal">null</span>;<br>    rightNode.next = <span class="hljs-literal">null</span>;<br>    reverseLinkedList(leftNode);<span class="hljs-comment">// 反转链表</span><br><br>    <span class="hljs-comment">// 连上链表</span><br>    leftNode.next = suc;<br>    pre.next = rightNode;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseLinkedList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-comment">// 反转链表</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> cur.next;<br>        cur.next = pre;<br>        pre = cur;<br>        cur = next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-7-6Q203-移除链表元素"><a href="#0-7-6Q203-移除链表元素" class="headerlink" title="0.7 6Q203.移除链表元素"></a>0.7 6Q203.移除链表元素</h3><p>给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val &#x3D;&#x3D; val 的节点，并返回 新的头节点 。</p><ol><li>建一个「虚拟头节点」dummy 以减少边界判断，往后的答案链表会接在 dummy 后面</li><li>使用 tail 代表当前有效链表的结尾</li><li>通过原输入的 head 指针进行链表扫描</li></ol><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/solution/yi-chu-lian-biao-yuan-su-by-leetcode-sol-654m/">题解点这里</a></p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134979.png" alt="|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeElements</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>    dummyNode.next = head;<span class="hljs-comment">//这里.next=head是防止只有一个节点时下面的while会报错！！！！</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> dummyNode;<br>    <span class="hljs-keyword">while</span> (tail.next != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (tail.next.val == val) &#123;<br>            <span class="hljs-comment">//这里做到删除的作用</span><br>            tail.next = tail.next.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tail = tail.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-8-7Q83-删除排序链表中的重复元素"><a href="#0-8-7Q83-删除排序链表中的重复元素" class="headerlink" title="0.8 7Q83.删除排序链表中的重复元素"></a>0.8 7Q83.删除排序链表中的重复元素</h3><p>给定一个已排序的链表的头 head ， 删除所有重复的元素，使每个元素只出现一次 。返回 已排序的链表 。<br>几乎所有的链表题目，都具有相似的解题思路。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span> &amp;&amp; cur.next != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">// 需要控制空链表</span><br>        <span class="hljs-keyword">if</span> (cur.val == cur.next.val) &#123;<br>            <span class="hljs-comment">// 当前结点数据等于下一结点数据，则指向下下结点</span><br>            cur.next = cur.next.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cur = cur.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-9-8Q82-删除排序链表中的重复元素-ii"><a href="#0-9-8Q82-删除排序链表中的重复元素-ii" class="headerlink" title="0.9 8Q82.删除排序链表中的重复元素-ii"></a>0.9 8Q82.删除排序链表中的重复元素-ii</h3><p>给定一个已排序的链表的头 head ， 删除原始链表中所有重复数字的节点，只留下不同的数字 。返回 已排序的链表 。</p><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/solution/tong-yong-shan-chu-zhong-fu-jie-dian-lia-od9g/">题解点这里</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dumyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> dumyNode;<br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span> || head.val != head.next.val) &#123;<br>            <span class="hljs-comment">// head 已经没有下一个节点，head 可以被插入</span><br>            <span class="hljs-comment">// head 有一下个节点，但是值与 head 不相同，head 可以被插入</span><br>            tail.next = head;<span class="hljs-comment">// tail的next指向head</span><br>            tail = head;<span class="hljs-comment">// head赋值给当前的tail</span><br>        &#125;<br>        <span class="hljs-keyword">while</span> (head.next != <span class="hljs-literal">null</span> &amp;&amp; head.val == head.next.val) &#123;<br>            <span class="hljs-comment">// 和下一结点相等时直接跳过</span><br>            head = head.next;<br>        &#125;<br>        <span class="hljs-comment">// 赋值完成跳过或者跳过当前相等的节点</span><br>        head = head.next;<br>    &#125;<br>    tail.next = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> dumyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-10-9Q328-奇偶链表"><a href="#0-10-9Q328-奇偶链表" class="headerlink" title="0.10 9Q328.奇偶链表"></a>0.10 9Q328.奇偶链表</h3><p>给定单链表的头节点 <code>head</code> ，将所有索引为奇数的节点和索引为偶数的节点分别组合在一起，然后返回重新排序的列表。<br><strong>第一个</strong>节点的索引被认为是 <strong>奇数</strong> ， <strong>第二个</strong>节点的索引为 <strong>偶数</strong> ，以此类推。<br>请注意，偶数组和奇数组内部的相对顺序应该与输入时保持一致。</p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301131237.png" alt="|675"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">oddEvenList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">odd</span> <span class="hljs-operator">=</span> head, even = head.next;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">evenHead</span> <span class="hljs-operator">=</span> even;<span class="hljs-comment">// 记录第一个偶数结点</span><br>    <span class="hljs-comment">// ListNode cur = head;</span><br>    <span class="hljs-keyword">while</span> (even != <span class="hljs-literal">null</span> &amp;&amp; even.next != <span class="hljs-literal">null</span>) &#123;<br>        odd.next = even.next;<br>        odd = odd.next;<br>        even.next = odd.next;<br>        even = even.next;<br>    &#125;<br>    odd.next = evenHead;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-11-10Q138-复制带随机指针的链表"><a href="#0-11-10Q138-复制带随机指针的链表" class="headerlink" title="0.11 10Q138.复制带随机指针的链表"></a>0.11 10Q138.复制带随机指针的链表</h3><p>给你一个长度为 <code>n</code> 的链表，每个节点包含一个额外增加的随机指针 <code>random</code> ，该指针可以指向链表中的任何节点或空节点。<br>构造这个链表的 <strong><a href="https://baike.baidu.com/item/%E6%B7%B1%E6%8B%B7%E8%B4%9D/22785317?fr=aladdin">深拷贝</a></strong>。 深拷贝应该正好由 <code>n</code> 个 <strong>全新</strong> 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 <code>next</code> 指针和 <code>random</code> 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。<strong>复制链表中的指针都不应指向原链表中的节点</strong> 。<br>例如，如果原链表中有 <code>X</code> 和 <code>Y</code> 两个节点，其中 <code>X.random --&gt; Y</code> 。那么在复制链表中对应的两个节点 <code>x</code> 和 <code>y</code> ，同样有 <code>x.random --&gt; y</code> 。<br>返回复制链表的头节点。<br>用一个由 <code>n</code> 个节点组成的链表来表示输入&#x2F;输出中的链表。每个节点用一个 <code>[val, random_index]</code> 表示：</p><ul><li><code>val</code>：一个表示 <code>Node.val</code> 的整数。</li><li><code>random_index</code>：随机指针指向的节点索引（范围从 <code>0</code> 到 <code>n-1</code>）；如果不指向任何节点，则为 <code>null</code> 。<br>你的代码 <strong>只</strong> 接受原链表的头节点 <code>head</code> 作为传入参数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    Map&lt;Node, Node&gt; nodeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">copyRandomList</span><span class="hljs-params">(Node head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!nodeMap.containsKey(head)) &#123;<br>            <span class="hljs-comment">// 需要防止重复，.next和.random可能会重复</span><br>            <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(head.val);<span class="hljs-comment">// 复制一份</span><br>            nodeMap.put(head, newNode);<br>            newNode.next = copyRandomList(head.next);<br>            newNode.random = copyRandomList(head.random);<br>        &#125;<br>        <span class="hljs-keyword">return</span> nodeMap.get(head);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-12-11Q61-旋转链表"><a href="#0-12-11Q61-旋转链表" class="headerlink" title="0.12 11Q61.旋转链表"></a>0.12 11Q61.旋转链表</h3><p>给你一个链表的头节点 <code>head</code> ，旋转链表，将链表每个节点向右移动 <code>k</code> 个位置。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134980.png" alt="|1000"></p><blockquote><p>输入：head &#x3D; [1,2,3,4,5], k &#x3D; 2<br>输出：[4,5,1,2,3]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第一次没看题解过Medium，虽然runtime beats 4.68 %</span><br><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">rotateRight</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span> || k == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        p = p.next;<br>        size++;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (k &gt; size) &#123;<br>        k -= size;<br>    &#125;<br><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>    dummyNode.next = head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> dummyNode, cur = dummyNode;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size - k; i++) &#123;<br>        pre = pre.next;<br>    &#125;<br>    cur = pre.next;<br>    <span class="hljs-keyword">if</span> (cur.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 说明是最后一个结点</span><br>        pre.next = <span class="hljs-literal">null</span>;<br>        cur.next = dummyNode.next;<br>        dummyNode.next = cur;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> pre.next;<br>        pre.next = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-literal">null</span>) &#123;<br>            cur = cur.next;<br>        &#125;<br>        cur.next = dummyNode.next;<br>        dummyNode.next = q;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//现在变成100%了，不容易啊</span><br><span class="hljs-comment">//先使原链表变成指向第二个结点的循环链表</span><br><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">rotateRight</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        p = p.next;<br>        size++;<br>    &#125;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>    dummyNode.next = head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> dummyNode, cur = dummyNode;<br>    <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-literal">null</span>) &#123;<br>        cur = cur.next;<br>    &#125;<br>    cur.next = dummyNode.next;<span class="hljs-comment">// 变成循环链表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size - k % size; i++) &#123;<br>        pre = pre.next;<br>    &#125;<br>    dummyNode.next = pre.next;<br>    pre.next = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-13-12Q148-排序链表"><a href="#0-13-12Q148-排序链表" class="headerlink" title="0.13 12Q148.排序链表"></a>0.13 12Q148.排序链表</h3><p>给你链表的头结点 <code>head</code> ，请将其按 <strong>升序</strong> 排列并返回 <strong>排序后的链表</strong> 。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134981.png" alt="|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">sortList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> mergeSort(head);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">mergeSort</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br><br>        <span class="hljs-comment">// 快慢指针找中点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>            fast = fast.next.next;<br>            pre = slow;<br>            slow = slow.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (pre != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 截断链表</span><br>            pre.next = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> mergeSort(head);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> mergeSort(slow);<br>        <span class="hljs-keyword">return</span> merge(left, right);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">merge</span><span class="hljs-params">(ListNode first, ListNode second)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> dummy;<br>        <span class="hljs-keyword">while</span> (first != <span class="hljs-literal">null</span> &amp;&amp; second != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (first.val &lt; second.val) &#123;<br>                cur.next = first;<br>                cur = cur.next;<br>                first = first.next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cur.next = second;<br>                cur = cur.next;<br>                second = second.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (first != <span class="hljs-literal">null</span>) &#123;<br>            cur.next = first;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (second != <span class="hljs-literal">null</span>) &#123;<br>            cur.next = second;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-14-13Q147-对链表进行插入排序"><a href="#0-14-13Q147-对链表进行插入排序" class="headerlink" title="0.14 13Q147.对链表进行插入排序"></a>0.14 13Q147.对链表进行插入排序</h3><p>给定单个链表的头 <code>head</code> ，使用 <strong>插入排序</strong> 对链表进行排序，并返回 <em>排序后链表的头</em> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">insertionSortList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    dummyNode.next = head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">lastSorted</span> <span class="hljs-operator">=</span> head, cur = lastSorted.next;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (lastSorted.val &lt;= cur.val) &#123;<br>            lastSorted = lastSorted.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> dummyNode;<br>            <span class="hljs-keyword">while</span> (p.next.val &lt;= cur.val) &#123;<span class="hljs-comment">// 找到cur结点插入的位置</span><br>                p = p.next;<br>            &#125;<br>            <span class="hljs-comment">// 插入结点</span><br>            lastSorted.next = cur.next;<br>            cur.next = p.next;<br>            p.next = cur;<br>        &#125;<br>        <span class="hljs-comment">// 移动到下一结点</span><br>        cur = lastSorted.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-15-14Q160-相交链表"><a href="#0-15-14Q160-相交链表" class="headerlink" title="0.15 14Q160.相交链表"></a>0.15 14Q160.相交链表</h3><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> 。</p><p><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301131239.png" alt="image-20230725204058419|725"></p><blockquote><p>输入：intersectVal &#x3D; 8, listA &#x3D; [4,1,8,4,5], listB &#x3D; [5,6,1,8,4,5], skipA &#x3D; 2, skipB &#x3D; 3<br>输出：Intersected at ‘8’<br>解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。<br>从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。<br>在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。<br>— 请注意相交节点的值不为 1，因为在链表 A 和链表 B 之中值为 1 的节点 (A 中第二个节点和 B 中第三个节点) 是不同的节点。换句话说，它们在内存中指向两个不同的位置，而链表 A 和链表 B 中值为 8 的节点 (A 中第三个节点，B 中第四个节点) 在内存中指向相同的位置。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>    <span class="hljs-keyword">if</span> (headA == <span class="hljs-literal">null</span> || headB == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    Set&lt;ListNode&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> headA;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        visited.add(p);<span class="hljs-comment">//使用hash表将链表元素存入其中</span><br>        p = p.next;<br>    &#125;<br>    p = headB;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (visited.contains(p)) &#123;<span class="hljs-comment">//若包含，则返回该结点</span><br>            <span class="hljs-keyword">return</span> p;<br>        &#125;<br>        p = p.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>[使用双指针的题解](<a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/solutions/12624/intersection-of-two-linked-lists-shuang-zhi-zhen-l/">160. 相交链表 - 力扣（LeetCode）</a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pA</span> <span class="hljs-operator">=</span> headA, pB = headB;<br>    <span class="hljs-keyword">while</span> (pA != pB) &#123;<br>        pA = pA != <span class="hljs-literal">null</span> ? pA.next : headB;<br>        pB = pB != <span class="hljs-literal">null</span> ? pB.next : headA;<br>    &#125;<br>    <span class="hljs-keyword">return</span> A;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>若两个链表相交，则A第二次遍历到相交结点与B第二次遍历到相交结点<strong>同时到达</strong></p></blockquote><h3 id="0-16-15Q876-链表的中间结点"><a href="#0-16-15Q876-链表的中间结点" class="headerlink" title="0.16 15Q876.链表的中间结点"></a>0.16 15Q876.链表的中间结点</h3><p>给你单链表的头结点 <code>head</code> ，请你找出并返回链表的中间结点。<br>如果有两个中间结点，则返回第二个中间结点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">middleNode</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        p = p.next;<br>        size++;<br>    &#125;<br>    p = head;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size / <span class="hljs-number">2</span>; i++) &#123;<br>        p = p.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">使用快慢指针解决<br> <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">middleNode</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head, fast = head;<br>    <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>        slow = slow.next;<br>        fast = fast.next.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> slow;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-17-Q141-环形链表i"><a href="#0-17-Q141-环形链表i" class="headerlink" title="0.17 Q141.环形链表i"></a>0.17 Q141.环形链表i</h3><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。<br>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况。<br><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134982.png" alt="|648|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//当链表为空或者只有一个元素时，返回非循环链表，防止下面的ListNode quick = head.next报错</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//快慢指针</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">quick</span> <span class="hljs-operator">=</span> head.next;<br>    <span class="hljs-keyword">while</span> (slow != quick) &#123;<br>        <span class="hljs-keyword">if</span> (quick.next == <span class="hljs-literal">null</span> || quick.next.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//快指针走两步，若是循环链表，快指针会追上慢指针</span><br>        slow = slow.next;<br>        quick = quick.next.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-18-17Q142-环形链表ii"><a href="#0-18-17Q142-环形链表ii" class="headerlink" title="0.18 17Q142.环形链表ii"></a>0.18 17Q142.环形链表ii</h3><p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em><br>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。<br><strong>不允许修改</strong> 链表。</p><blockquote><p>同样使用快慢指针求解    </p><p><strong>&#x2F;&#x2F;快指针走两步，若是循环链表，快指针会追上慢指针</strong></p><p>slow &#x3D; slow.next;</p><p>quick &#x3D; quick.next.next;</p></blockquote><h3 id="0-19-18Q-19删除链表的倒数第-N-个结点"><a href="#0-19-18Q-19删除链表的倒数第-N-个结点" class="headerlink" title="0.19 18Q.19删除链表的倒数第 N 个结点"></a>0.19 18Q.19删除链表的倒数第 N 个结点</h3><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134983.png" alt="|551|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>    dummyNode.next = head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head, q = dummyNode;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        p = p.next;<br>        size++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size - n; i++) &#123;<br>        <span class="hljs-comment">//这个地方有点小坑，需要考虑到[1] 1和[1,2] 2</span><br>        q = q.next;<span class="hljs-comment">// 此时q指向要删除的倒数第n个结点的前一个结点</span><br>    &#125;<br>    q.next = q.next.next;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-20-19Q143-重排链表"><a href="#0-20-19Q143-重排链表" class="headerlink" title="0.20 19Q143.重排链表"></a>0.20 19Q143.重排链表</h3><p>给定一个单链表 <code>L</code> 的头节点 <code>head</code> ，单链表 <code>L</code> 表示为：<br>L0 → L1 → … → Ln - 1 → Ln<br>请将其重新排列后变为：<br>L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …<br>不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301131240.png" alt="|650"></p><blockquote><p><strong>递归的方法是将最后一个结点插入到head之后</strong></p><p><strong>还可以根据线性表的特性转换成线性表研究</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reorderList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (p.next.next != <span class="hljs-literal">null</span>) &#123;<br>        p = p.next;<span class="hljs-comment">// 找到倒数第二个结点</span><br>    &#125;<br>    <span class="hljs-comment">// 将最后一个结点插入到head之后</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">suc</span> <span class="hljs-operator">=</span> p.next;<br>    p.next = <span class="hljs-literal">null</span>;<br>    suc.next = head.next;<br>    head.next = suc;<br><br>    reorderList(suc.next);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-21-20Q2-两数相加"><a href="#0-21-20Q2-两数相加" class="headerlink" title="0.21 20Q2.两数相加"></a>0.21 20Q2.两数相加</h3><p>给你两个 <strong>非空</strong>的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。<br>请你将两个数相加，并以相同形式返回一个表示和的链表。<br>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134984.png" alt="|445|1000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>    <span class="hljs-comment">//定义一个指向结果的指针</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//定义一个移动指针</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> pre;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//进位</span><br>    <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span> || l2 != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">//l1/l2是否为null，不是null取值，是null取0</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> l1 != <span class="hljs-literal">null</span> ? l1.val : <span class="hljs-number">0</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> l2 != <span class="hljs-literal">null</span> ? l2.val : <span class="hljs-number">0</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> x + y + carry;<br>      <span class="hljs-comment">//计算进位</span><br>      carry = sum / <span class="hljs-number">10</span>;<br>      <span class="hljs-comment">//计算节点值</span><br>      sum = sum % <span class="hljs-number">10</span>;<br>      <span class="hljs-comment">//将创建该值对应的节点，并将cur指向该节点</span><br>      cur.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum);<br>      <span class="hljs-comment">//指针后移</span><br>      cur = cur.next;<br>      <span class="hljs-comment">//如果后一位不是null，则后移</span><br>      <span class="hljs-keyword">if</span> (l1 != <span class="hljs-literal">null</span>) l1 = l1.next;<br>      <span class="hljs-keyword">if</span> (l2 != <span class="hljs-literal">null</span>) l2 = l2.next;<br>    &#125;<br>    <span class="hljs-comment">//当最后两个节点（首位）有进位，则需要新建节点</span><br>    <span class="hljs-keyword">if</span> (carry == <span class="hljs-number">1</span>) &#123;<br>      cur.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(carry);<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre.next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0-22-21Q445-两数相加ii"><a href="#0-22-21Q445-两数相加ii" class="headerlink" title="0.22 21Q445.两数相加ii"></a>0.22 21Q445.两数相加ii</h3><p>给你两个 <strong>非空</strong> 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。<br><img src="https://note-image-shi.oss-cn-beijing.aliyuncs.com/images/202507301134985.png" alt="|1000"></p><blockquote><p>这里的进阶版需要先反转再相加，返回相加之和的反转</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        l1 = reverseList(l1);<br>        l2 = reverseList(l2);<br>        <span class="hljs-keyword">return</span> reverseList(addNumbers(l1, l2));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode list)</span> &#123;<br>        <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span> || list.next == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> list;<br>        &#125;<br>        <span class="hljs-comment">// pre记录前一个节点（因为链表没有指向前一个的指针），next记录下一个节点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, next;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> list;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>            next = cur.next;<span class="hljs-comment">// next指向下一个节点</span><br>            cur.next = pre;<span class="hljs-comment">// 当前节点指向前一个节点</span><br>            pre = cur;<span class="hljs-comment">// 前一个节点指向当前节点</span><br>            cur = next;<span class="hljs-comment">// 当前节点指向下一个节点</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">addNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-comment">// 定义一个指向结果的指针</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 定义一个移动指针</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> pre;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 进位</span><br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span> || l2 != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// l1/l2是否为null，不是null取值，是null取0</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> l1 != <span class="hljs-literal">null</span> ? l1.val : <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> l2 != <span class="hljs-literal">null</span> ? l2.val : <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> x + y + carry;<br>            <span class="hljs-comment">// 计算进位</span><br>            carry = sum / <span class="hljs-number">10</span>;<br>            <span class="hljs-comment">// 计算节点值</span><br>            sum = sum % <span class="hljs-number">10</span>;<br>            <span class="hljs-comment">// 将创建该值对应的节点，并将cur指向该节点</span><br>            cur.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum);<br>            <span class="hljs-comment">// 指针后移</span><br>            cur = cur.next;<br>            <span class="hljs-comment">// 如果后一位不是null，则后移</span><br>            <span class="hljs-keyword">if</span> (l1 != <span class="hljs-literal">null</span>)<br>                l1 = l1.next;<br>            <span class="hljs-keyword">if</span> (l2 != <span class="hljs-literal">null</span>)<br>                l2 = l2.next;<br>        &#125;<br>        <span class="hljs-comment">// 当最后两个节点（首位）有进位，则需要新建节点</span><br>        <span class="hljs-keyword">if</span> (carry == <span class="hljs-number">1</span>) &#123;<br>            cur.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(carry);<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
